
teste led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ac8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08009c58  08009c58  00019c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e5c  08009e5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009e5c  08009e5c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e5c  08009e5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e5c  08009e5c  00019e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e60  08009e60  00019e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025bc  20000074  08009ed8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002630  08009ed8  00022630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb5f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8f  00000000  00000000  0003ec03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a18  00000000  00000000  00042998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001870  00000000  00000000  000443b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c44e  00000000  00000000  00045c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a807  00000000  00000000  0007206e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116417  00000000  00000000  0008c875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a2c8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000736c  00000000  00000000  001a2ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c40 	.word	0x08009c40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009c40 	.word	0x08009c40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800088c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <vApplicationGetIdleTaskMemory+0x30>)
 8000892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000090 	.word	0x20000090
 80008ac:	200000e4 	.word	0x200000e4

080008b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 0307 	and.w	r3, r3, #7
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db0b      	blt.n	80008f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 021f 	and.w	r2, r3, #31
 80008e4:	4907      	ldr	r1, [pc, #28]	; (8000904 <__NVIC_EnableIRQ+0x38>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	095b      	lsrs	r3, r3, #5
 80008ec:	2001      	movs	r0, #1
 80008ee:	fa00 f202 	lsl.w	r2, r0, r2
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e100 	.word	0xe000e100

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	; (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	; (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	; 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f043 0201 	orr.w	r2, r3, #1
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	601a      	str	r2, [r3, #0]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	609a      	str	r2, [r3, #8]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	2b20      	cmp	r3, #32
 8000a20:	d101      	bne.n	8000a26 <LL_USART_IsActiveFlag_RXNE+0x18>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a44:	2b80      	cmp	r3, #128	; 0x80
 8000a46:	d101      	bne.n	8000a4c <LL_USART_IsActiveFlag_TXE+0x18>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <LL_USART_IsActiveFlag_TXE+0x1a>
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f043 0220 	orr.w	r2, r3, #32
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	601a      	str	r2, [r3, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	601a      	str	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	b2db      	uxtb	r3, r3
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000ae2:	78fb      	ldrb	r3, [r7, #3]
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4013      	ands	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000

08000b28 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b34:	4907      	ldr	r1, [pc, #28]	; (8000b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4013      	ands	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000

08000b58 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b64:	4907      	ldr	r1, [pc, #28]	; (8000b84 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4013      	ands	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	40021000 	.word	0x40021000

08000b88 <pwm_task>:
uint16_t wind;
uint16_t temp;
uint16_t umid;

void pwm_task(void * vParam)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		int valor_led = seeds_total * 20/3;
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <pwm_task+0x28>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4613      	mov	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <pwm_task+0x2c>)
 8000b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba2:	17db      	asrs	r3, r3, #31
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	60fb      	str	r3, [r7, #12]
		user_pwm_setvalue(valor_led);
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 fe7b 	bl	80018a4 <user_pwm_setvalue>
	{
 8000bae:	e7ef      	b.n	8000b90 <pwm_task+0x8>
 8000bb0:	200002e8 	.word	0x200002e8
 8000bb4:	55555556 	.word	0x55555556

08000bb8 <sendchar>:
	}
}

void sendchar(char c, char usart){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d10b      	bne.n	8000be6 <sendchar+0x2e>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <sendchar+0x54>)
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	1df9      	adds	r1, r7, #7
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bda:	f006 fc2d 	bl	8007438 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART1);
 8000bde:	480c      	ldr	r0, [pc, #48]	; (8000c10 <sendchar+0x58>)
 8000be0:	f7ff ff4b 	bl	8000a7a <LL_USART_EnableIT_TXE>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 8000be4:	e00d      	b.n	8000c02 <sendchar+0x4a>
	else if( usart == USART_2){
 8000be6:	79bb      	ldrb	r3, [r7, #6]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d10a      	bne.n	8000c02 <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <sendchar+0x5c>)
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	1df9      	adds	r1, r7, #7
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf8:	f006 fc1e 	bl	8007438 <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 8000bfc:	4806      	ldr	r0, [pc, #24]	; (8000c18 <sendchar+0x60>)
 8000bfe:	f7ff ff3c 	bl	8000a7a <LL_USART_EnableIT_TXE>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200025cc 	.word	0x200025cc
 8000c10:	40013800 	.word	0x40013800
 8000c14:	20002574 	.word	0x20002574
 8000c18:	40004400 	.word	0x40004400

08000c1c <sendString>:

void sendString(char * str, char usart){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]
	while(*str != 0){
 8000c28:	e009      	b.n	8000c3e <sendString+0x22>
		sendchar(*str, usart);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	78fa      	ldrb	r2, [r7, #3]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ffc0 	bl	8000bb8 <sendchar>
		str++;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	607b      	str	r3, [r7, #4]
	while(*str != 0){
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f1      	bne.n	8000c2a <sendString+0xe>
	}
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <readchar>:

char readchar(char usart){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	uint8_t caracter=0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]
	if(usart == USART_1)
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d109      	bne.n	8000c78 <readchar+0x28>
		xQueueReceive(rx_queue_1, &caracter, HAL_MAX_DELAY);
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <readchar+0x4c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f107 010f 	add.w	r1, r7, #15
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c70:	4618      	mov	r0, r3
 8000c72:	f006 fd7b 	bl	800776c <xQueueReceive>
 8000c76:	e00b      	b.n	8000c90 <readchar+0x40>
	else if(usart == USART_2)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d108      	bne.n	8000c90 <readchar+0x40>
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <readchar+0x50>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f107 010f 	add.w	r1, r7, #15
 8000c86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f006 fd6e 	bl	800776c <xQueueReceive>
	return caracter;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20002454 	.word	0x20002454
 8000ca0:	20002578 	.word	0x20002578

08000ca4 <readVoltage>:

uint16_t readVoltage(int potenc){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

	if(potenc == 0){
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10d      	bne.n	8000cce <readVoltage+0x2a>
		HAL_ADC_Start(&hadc1);
 8000cb2:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <readVoltage+0x4c>)
 8000cb4:	f001 fbf8 	bl	80024a8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <readVoltage+0x4c>)
 8000cbe:	f001 fcad 	bl	800261c <HAL_ADC_PollForConversion>
		return HAL_ADC_GetValue(&hadc1);
 8000cc2:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <readVoltage+0x4c>)
 8000cc4:	f001 fd82 	bl	80027cc <HAL_ADC_GetValue>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	e00c      	b.n	8000ce8 <readVoltage+0x44>
	}
	HAL_ADC_Start(&hadc2);
 8000cce:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <readVoltage+0x50>)
 8000cd0:	f001 fbea 	bl	80024a8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <readVoltage+0x50>)
 8000cda:	f001 fc9f 	bl	800261c <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc2);
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <readVoltage+0x50>)
 8000ce0:	f001 fd74 	bl	80027cc <HAL_ADC_GetValue>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b29b      	uxth	r3, r3
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000250c 	.word	0x2000250c
 8000cf4:	20002458 	.word	0x20002458

08000cf8 <cli>:



void cli(void * vParam)
{
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b092      	sub	sp, #72	; 0x48
 8000cfc:	af04      	add	r7, sp, #16
 8000cfe:	6078      	str	r0, [r7, #4]
	uint8_t caracter;
	uint16_t prev_acid = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t prev_wind = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t prev_temp = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t prev_umid = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	863b      	strh	r3, [r7, #48]	; 0x30
	uint16_t prev_topper = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(1)
	{
		uint16_t pot1 = readVoltage(0)/100;
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff ffc5 	bl	8000ca4 <readVoltage>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <cli+0x140>)
 8000d20:	fba3 2302 	umull	r2, r3, r3, r2
 8000d24:	095b      	lsrs	r3, r3, #5
 8000d26:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t pot2= readVoltage(1)/100;
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff ffbb 	bl	8000ca4 <readVoltage>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <cli+0x140>)
 8000d34:	fba3 2302 	umull	r2, r3, r3, r2
 8000d38:	095b      	lsrs	r3, r3, #5
 8000d3a:	857b      	strh	r3, [r7, #42]	; 0x2a
		acid = pot1;
 8000d3c:	4a3f      	ldr	r2, [pc, #252]	; (8000e3c <cli+0x144>)
 8000d3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d40:	8013      	strh	r3, [r2, #0]
		wind = pot1 * 1.3;
 8000d42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd0f 	bl	8000768 <__aeabi_i2d>
 8000d4a:	a337      	add	r3, pc, #220	; (adr r3, 8000e28 <cli+0x130>)
 8000d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d50:	f7ff fa8e 	bl	8000270 <__aeabi_dmul>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f7ff fd6e 	bl	800083c <__aeabi_d2uiz>
 8000d60:	4603      	mov	r3, r0
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <cli+0x148>)
 8000d66:	801a      	strh	r2, [r3, #0]
		temp = pot2;
 8000d68:	4a36      	ldr	r2, [pc, #216]	; (8000e44 <cli+0x14c>)
 8000d6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d6c:	8013      	strh	r3, [r2, #0]
		umid = pot2 * 0.9;
 8000d6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fcf9 	bl	8000768 <__aeabi_i2d>
 8000d76:	a32e      	add	r3, pc, #184	; (adr r3, 8000e30 <cli+0x138>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	f7ff fa78 	bl	8000270 <__aeabi_dmul>
 8000d80:	4602      	mov	r2, r0
 8000d82:	460b      	mov	r3, r1
 8000d84:	4610      	mov	r0, r2
 8000d86:	4619      	mov	r1, r3
 8000d88:	f7ff fd58 	bl	800083c <__aeabi_d2uiz>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <cli+0x150>)
 8000d92:	801a      	strh	r2, [r3, #0]

		if(toupeira != prev_topper || acid != prev_acid || wind != prev_wind || temp != prev_temp || umid != prev_umid){
 8000d94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <cli+0x154>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d113      	bne.n	8000dc6 <cli+0xce>
 8000d9e:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <cli+0x144>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d10e      	bne.n	8000dc6 <cli+0xce>
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <cli+0x148>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d109      	bne.n	8000dc6 <cli+0xce>
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <cli+0x14c>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d104      	bne.n	8000dc6 <cli+0xce>
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <cli+0x150>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d02a      	beq.n	8000e1c <cli+0x124>
			char buff[30];
			sprintf(buff,"{\n"
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <cli+0x154>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <cli+0x144>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	461d      	mov	r5, r3
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <cli+0x148>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <cli+0x14c>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	461c      	mov	r4, r3
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <cli+0x150>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	f107 000c 	add.w	r0, r7, #12
 8000de4:	9302      	str	r3, [sp, #8]
 8000de6:	9401      	str	r4, [sp, #4]
 8000de8:	9100      	str	r1, [sp, #0]
 8000dea:	462b      	mov	r3, r5
 8000dec:	4918      	ldr	r1, [pc, #96]	; (8000e50 <cli+0x158>)
 8000dee:	f008 fa79 	bl	80092e4 <siprintf>
					"Acid: %d,\n"
					"Wind: %d,\n"
					"Temp: %d,\n"
					"Umid: %d,\n"
					"}\n", toupeira, acid, wind, temp, umid);
			sendString(buff, USART_1);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	2101      	movs	r1, #1
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff0f 	bl	8000c1c <sendString>
			prev_acid = acid;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <cli+0x144>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	86fb      	strh	r3, [r7, #54]	; 0x36
			prev_wind = wind;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <cli+0x148>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	86bb      	strh	r3, [r7, #52]	; 0x34
			prev_temp = temp;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <cli+0x14c>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	867b      	strh	r3, [r7, #50]	; 0x32
			prev_umid = umid;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <cli+0x150>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	863b      	strh	r3, [r7, #48]	; 0x30
			prev_topper = toupeira;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <cli+0x154>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
		vTaskDelay(1000);
 8000e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e20:	f007 f8a8 	bl	8007f74 <vTaskDelay>
	{
 8000e24:	e776      	b.n	8000d14 <cli+0x1c>
 8000e26:	bf00      	nop
 8000e28:	cccccccd 	.word	0xcccccccd
 8000e2c:	3ff4cccc 	.word	0x3ff4cccc
 8000e30:	cccccccd 	.word	0xcccccccd
 8000e34:	3feccccc 	.word	0x3feccccc
 8000e38:	51eb851f 	.word	0x51eb851f
 8000e3c:	200025c8 	.word	0x200025c8
 8000e40:	20002570 	.word	0x20002570
 8000e44:	200024be 	.word	0x200024be
 8000e48:	200024bc 	.word	0x200024bc
 8000e4c:	200002e4 	.word	0x200002e4
 8000e50:	08009c64 	.word	0x08009c64

08000e54 <usart_1_fcn>:

	}
}

void usart_1_fcn(void * vParam){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	char c;
	int reset = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	char receiver [20];
	int counter = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
	int done = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
	// s1235
	while(1){
		c = readchar(USART_1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff fef1 	bl	8000c50 <readchar>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(c == '\n'){
 8000e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e78:	2b0a      	cmp	r3, #10
 8000e7a:	d111      	bne.n	8000ea0 <usart_1_fcn+0x4c>
			reset = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			counter = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
			seeds_total = atoi(receiver);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f008 f9e7 	bl	800925c <atoi>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a16      	ldr	r2, [pc, #88]	; (8000eec <usart_1_fcn+0x98>)
 8000e92:	6013      	str	r3, [r2, #0]
			sendString(receiver, USART2);
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff febe 	bl	8000c1c <sendString>
		}
		if(c == 't'){
 8000ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ea4:	2b74      	cmp	r3, #116	; 0x74
 8000ea6:	d102      	bne.n	8000eae <usart_1_fcn+0x5a>
			toupeira = 0;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <usart_1_fcn+0x9c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
		}
		if(c == 's'){
 8000eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000eb2:	2b73      	cmp	r3, #115	; 0x73
 8000eb4:	d101      	bne.n	8000eba <usart_1_fcn+0x66>
			reset = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if(reset){
 8000eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d009      	beq.n	8000ed4 <usart_1_fcn+0x80>
			receiver[counter] = c;
 8000ec0:	f107 020c 	add.w	r2, r7, #12
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	4413      	add	r3, r2
 8000ec8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ecc:	701a      	strb	r2, [r3, #0]
			counter += 1;
 8000ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if( c != 0){
 8000ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0c5      	beq.n	8000e68 <usart_1_fcn+0x14>
			sendchar(c, USART_2);
 8000edc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fe68 	bl	8000bb8 <sendchar>
		c = readchar(USART_1);
 8000ee8:	e7be      	b.n	8000e68 <usart_1_fcn+0x14>
 8000eea:	bf00      	nop
 8000eec:	200002e8 	.word	0x200002e8
 8000ef0:	200002e4 	.word	0x200002e4

08000ef4 <USART_2_IRQHandler>:
		}
	}
}

void USART_2_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000efa:	482a      	ldr	r0, [pc, #168]	; (8000fa4 <USART_2_IRQHandler+0xb0>)
 8000efc:	f7ff fd9a 	bl	8000a34 <LL_USART_IsActiveFlag_TXE>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d026      	beq.n	8000f54 <USART_2_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000f06:	e014      	b.n	8000f32 <USART_2_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <USART_2_IRQHandler+0xb4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f107 020c 	add.w	r2, r7, #12
 8000f10:	f107 010b 	add.w	r1, r7, #11
 8000f14:	4618      	mov	r0, r3
 8000f16:	f006 fd09 	bl	800792c <xQueueReceiveFromISR>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d103      	bne.n	8000f28 <USART_2_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART2);
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <USART_2_IRQHandler+0xb0>)
 8000f22:	f7ff fdba 	bl	8000a9a <LL_USART_DisableIT_TXE>
 8000f26:	e00a      	b.n	8000f3e <USART_2_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART2, byte);
 8000f28:	7afb      	ldrb	r3, [r7, #11]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481d      	ldr	r0, [pc, #116]	; (8000fa4 <USART_2_IRQHandler+0xb0>)
 8000f2e:	f7ff fdd2 	bl	8000ad6 <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000f32:	481c      	ldr	r0, [pc, #112]	; (8000fa4 <USART_2_IRQHandler+0xb0>)
 8000f34:	f7ff fd7e 	bl	8000a34 <LL_USART_IsActiveFlag_TXE>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1e4      	bne.n	8000f08 <USART_2_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d007      	beq.n	8000f54 <USART_2_IRQHandler+0x60>
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <USART_2_IRQHandler+0xb8>)
 8000f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	f3bf 8f4f 	dsb	sy
 8000f50:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <USART_2_IRQHandler+0xb0>)
 8000f56:	f7ff fd5a 	bl	8000a0e <LL_USART_IsActiveFlag_RXNE>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d01d      	beq.n	8000f9c <USART_2_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000f60:	e00b      	b.n	8000f7a <USART_2_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART2);
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <USART_2_IRQHandler+0xb0>)
 8000f64:	f7ff fda9 	bl	8000aba <LL_USART_ReceiveData8>
 8000f68:	4603      	mov	r3, r0
        	uint8_t byte =
 8000f6a:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <USART_2_IRQHandler+0xbc>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	1d3a      	adds	r2, r7, #4
 8000f72:	1cf9      	adds	r1, r7, #3
 8000f74:	2300      	movs	r3, #0
 8000f76:	f006 fb5d 	bl	8007634 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000f7a:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <USART_2_IRQHandler+0xb0>)
 8000f7c:	f7ff fd47 	bl	8000a0e <LL_USART_IsActiveFlag_RXNE>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1ed      	bne.n	8000f62 <USART_2_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <USART_2_IRQHandler+0xa8>
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <USART_2_IRQHandler+0xb8>)
 8000f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	f3bf 8f4f 	dsb	sy
 8000f98:	f3bf 8f6f 	isb	sy
    }
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40004400 	.word	0x40004400
 8000fa8:	20002574 	.word	0x20002574
 8000fac:	e000ed04 	.word	0xe000ed04
 8000fb0:	20002578 	.word	0x20002578

08000fb4 <USART_1_IRQHandler>:

void USART_1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
    if (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000fba:	482a      	ldr	r0, [pc, #168]	; (8001064 <USART_1_IRQHandler+0xb0>)
 8000fbc:	f7ff fd3a 	bl	8000a34 <LL_USART_IsActiveFlag_TXE>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d026      	beq.n	8001014 <USART_1_IRQHandler+0x60>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000fc6:	e014      	b.n	8000ff2 <USART_1_IRQHandler+0x3e>
            uint8_t byte;
            //Desinfileira um byte para tranmistir
            if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <USART_1_IRQHandler+0xb4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f107 020c 	add.w	r2, r7, #12
 8000fd0:	f107 010b 	add.w	r1, r7, #11
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 fca9 	bl	800792c <xQueueReceiveFromISR>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d103      	bne.n	8000fe8 <USART_1_IRQHandler+0x34>
            	//Se a fila de transmissao esta vazia, encerra a transmissao
                LL_USART_DisableIT_TXE(USART1);
 8000fe0:	4820      	ldr	r0, [pc, #128]	; (8001064 <USART_1_IRQHandler+0xb0>)
 8000fe2:	f7ff fd5a 	bl	8000a9a <LL_USART_DisableIT_TXE>
 8000fe6:	e00a      	b.n	8000ffe <USART_1_IRQHandler+0x4a>
                break;
            }
            //Envia o byte retirado da fila de transmisao
            LL_USART_TransmitData8(USART1, byte);
 8000fe8:	7afb      	ldrb	r3, [r7, #11]
 8000fea:	4619      	mov	r1, r3
 8000fec:	481d      	ldr	r0, [pc, #116]	; (8001064 <USART_1_IRQHandler+0xb0>)
 8000fee:	f7ff fd72 	bl	8000ad6 <LL_USART_TransmitData8>
        while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000ff2:	481c      	ldr	r0, [pc, #112]	; (8001064 <USART_1_IRQHandler+0xb0>)
 8000ff4:	f7ff fd1e 	bl	8000a34 <LL_USART_IsActiveFlag_TXE>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1e4      	bne.n	8000fc8 <USART_1_IRQHandler+0x14>
        }
        portYIELD_FROM_ISR(contextSwitch);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d007      	beq.n	8001014 <USART_1_IRQHandler+0x60>
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <USART_1_IRQHandler+0xb8>)
 8001006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	f3bf 8f4f 	dsb	sy
 8001010:	f3bf 8f6f 	isb	sy
    }

    //Se for interrupcao de recepcao
    if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8001014:	4813      	ldr	r0, [pc, #76]	; (8001064 <USART_1_IRQHandler+0xb0>)
 8001016:	f7ff fcfa 	bl	8000a0e <LL_USART_IsActiveFlag_RXNE>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d01d      	beq.n	800105c <USART_1_IRQHandler+0xa8>
        BaseType_t contextSwitch;

        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8001020:	e00b      	b.n	800103a <USART_1_IRQHandler+0x86>
        	//Copia o byte do regstrador de recepcao
        	uint8_t byte =
                LL_USART_ReceiveData8(USART1);
 8001022:	4810      	ldr	r0, [pc, #64]	; (8001064 <USART_1_IRQHandler+0xb0>)
 8001024:	f7ff fd49 	bl	8000aba <LL_USART_ReceiveData8>
 8001028:	4603      	mov	r3, r0
        	uint8_t byte =
 800102a:	70fb      	strb	r3, [r7, #3]
        	//Enfileira o byte recebido na fila de recepcao
            xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <USART_1_IRQHandler+0xbc>)
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	1d3a      	adds	r2, r7, #4
 8001032:	1cf9      	adds	r1, r7, #3
 8001034:	2300      	movs	r3, #0
 8001036:	f006 fafd 	bl	8007634 <xQueueGenericSendFromISR>
        while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <USART_1_IRQHandler+0xb0>)
 800103c:	f7ff fce7 	bl	8000a0e <LL_USART_IsActiveFlag_RXNE>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1ed      	bne.n	8001022 <USART_1_IRQHandler+0x6e>
            // xQueueSendFromISR can return errQUEUE_FULL
        }
        portYIELD_FROM_ISR(contextSwitch);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d007      	beq.n	800105c <USART_1_IRQHandler+0xa8>
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <USART_1_IRQHandler+0xb8>)
 800104e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	f3bf 8f4f 	dsb	sy
 8001058:	f3bf 8f6f 	isb	sy
    }
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40013800 	.word	0x40013800
 8001068:	200025cc 	.word	0x200025cc
 800106c:	e000ed04 	.word	0xe000ed04
 8001070:	20002454 	.word	0x20002454

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107a:	f000 fe9b 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107e:	f000 f859 	bl	8001134 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001082:	f000 f8a8 	bl	80011d6 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001086:	f000 fba5 	bl	80017d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800108a:	f000 fb09 	bl	80016a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800108e:	f000 f9a7 	bl	80013e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001092:	f000 fa1b 	bl	80014cc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001096:	f000 fa69 	bl	800156c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800109a:	f000 f8c7 	bl	800122c <MX_ADC1_Init>
  MX_ADC2_Init();
 800109e:	f000 f93b 	bl	8001318 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80010a2:	481b      	ldr	r0, [pc, #108]	; (8001110 <main+0x9c>)
 80010a4:	f003 ff06 	bl	8004eb4 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <main+0xa0>)
 80010aa:	1d3c      	adds	r4, r7, #4
 80010ac:	461d      	mov	r5, r3
 80010ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 ffe3 	bl	800708a <osThreadCreate>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <main+0xa4>)
 80010c8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(usart_1_fcn,    /* Nome da funcao que contem a task */
 80010ca:	2300      	movs	r3, #0
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	2301      	movs	r3, #1
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	4911      	ldr	r1, [pc, #68]	; (800111c <main+0xa8>)
 80010d8:	4811      	ldr	r0, [pc, #68]	; (8001120 <main+0xac>)
 80010da:	f006 fe14 	bl	8007d06 <xTaskCreate>
    		  	  "usart1fcn",     /* Nome descritivo */
  			  configMINIMAL_STACK_SIZE,   /* tamanho da pilha da task */
  			  NULL,       /* parametro para a task */
  			  1,          /* nivel de prioridade */
  			  NULL);      /* ponteiro para o handle da task */
  xTaskCreate(pwm_task,    /* Nome da funcao que contem a task */
 80010de:	2300      	movs	r3, #0
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2300      	movs	r3, #0
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	490e      	ldr	r1, [pc, #56]	; (8001124 <main+0xb0>)
 80010ec:	480e      	ldr	r0, [pc, #56]	; (8001128 <main+0xb4>)
 80010ee:	f006 fe0a 	bl	8007d06 <xTaskCreate>
    		  	  "pwm_task",     /* Nome descritivo */
  			  configMINIMAL_STACK_SIZE,   /* tamanho da pilha da task */
  			  NULL,       /* parametro para a task */
  			  1,          /* nivel de prioridade */
  			  NULL);      /* ponteiro para o handle da task */
  xTaskCreate(cli,    /* Nome da funcao que contem a task */
 80010f2:	2300      	movs	r3, #0
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	2301      	movs	r3, #1
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2300      	movs	r3, #0
 80010fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001100:	490a      	ldr	r1, [pc, #40]	; (800112c <main+0xb8>)
 8001102:	480b      	ldr	r0, [pc, #44]	; (8001130 <main+0xbc>)
 8001104:	f006 fdff 	bl	8007d06 <xTaskCreate>
    			  1,          /* nivel de prioridade */
    			  NULL);      /* ponteiro para o handle da task */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001108:	f005 ffb8 	bl	800707c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800110c:	e7fe      	b.n	800110c <main+0x98>
 800110e:	bf00      	nop
 8001110:	200024c0 	.word	0x200024c0
 8001114:	08009cbc 	.word	0x08009cbc
 8001118:	20002450 	.word	0x20002450
 800111c:	08009ca0 	.word	0x08009ca0
 8001120:	08000e55 	.word	0x08000e55
 8001124:	08009cac 	.word	0x08009cac
 8001128:	08000b89 	.word	0x08000b89
 800112c:	08009cb8 	.word	0x08009cb8
 8001130:	08000cf9 	.word	0x08000cf9

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b096      	sub	sp, #88	; 0x58
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2244      	movs	r2, #68	; 0x44
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f008 f8c6 	bl	80092d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001156:	f44f 7000 	mov.w	r0, #512	; 0x200
 800115a:	f002 fb39 	bl	80037d0 <HAL_PWREx_ControlVoltageScaling>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001164:	f000 fbec 	bl	8001940 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001170:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001172:	2310      	movs	r3, #16
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001176:	2302      	movs	r3, #2
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117a:	2302      	movs	r3, #2
 800117c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001182:	230a      	movs	r3, #10
 8001184:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001186:	2307      	movs	r3, #7
 8001188:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fb70 	bl	800387c <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011a2:	f000 fbcd 	bl	8001940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2303      	movs	r3, #3
 80011ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	2104      	movs	r1, #4
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 ff42 	bl	8004048 <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ca:	f000 fbb9 	bl	8001940 <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3758      	adds	r7, #88	; 0x58
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b0a2      	sub	sp, #136	; 0x88
 80011da:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2288      	movs	r2, #136	; 0x88
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 f876 	bl	80092d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ec:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011f2:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011f4:	2302      	movs	r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011fc:	2308      	movs	r3, #8
 80011fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001200:	2307      	movs	r3, #7
 8001202:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001204:	2302      	movs	r3, #2
 8001206:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800120c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001210:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4618      	mov	r0, r3
 8001216:	f003 f939 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001220:	f000 fb8e 	bl	8001940 <Error_Handler>
  }
}
 8001224:	bf00      	nop
 8001226:	3788      	adds	r7, #136	; 0x88
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800124e:	4b2f      	ldr	r3, [pc, #188]	; (800130c <MX_ADC1_Init+0xe0>)
 8001250:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <MX_ADC1_Init+0xe4>)
 8001252:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001254:	4b2d      	ldr	r3, [pc, #180]	; (800130c <MX_ADC1_Init+0xe0>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <MX_ADC1_Init+0xe0>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_ADC1_Init+0xe0>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <MX_ADC1_Init+0xe0>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <MX_ADC1_Init+0xe0>)
 800126e:	2204      	movs	r2, #4
 8001270:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_ADC1_Init+0xe0>)
 8001274:	2200      	movs	r2, #0
 8001276:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <MX_ADC1_Init+0xe0>)
 800127a:	2200      	movs	r2, #0
 800127c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <MX_ADC1_Init+0xe0>)
 8001280:	2201      	movs	r2, #1
 8001282:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <MX_ADC1_Init+0xe0>)
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_ADC1_Init+0xe0>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_ADC1_Init+0xe0>)
 8001294:	2200      	movs	r2, #0
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_ADC1_Init+0xe0>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_ADC1_Init+0xe0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_ADC1_Init+0xe0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ae:	4817      	ldr	r0, [pc, #92]	; (800130c <MX_ADC1_Init+0xe0>)
 80012b0:	f000 ffa4 	bl	80021fc <HAL_ADC_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012ba:	f000 fb41 	bl	8001940 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4810      	ldr	r0, [pc, #64]	; (800130c <MX_ADC1_Init+0xe0>)
 80012ca:	f001 ff05 	bl	80030d8 <HAL_ADCEx_MultiModeConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012d4:	f000 fb34 	bl	8001940 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_ADC1_Init+0xe8>)
 80012da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012dc:	2306      	movs	r3, #6
 80012de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012e4:	237f      	movs	r3, #127	; 0x7f
 80012e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012e8:	2304      	movs	r3, #4
 80012ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_ADC1_Init+0xe0>)
 80012f6:	f001 fa77 	bl	80027e8 <HAL_ADC_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001300:	f000 fb1e 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000250c 	.word	0x2000250c
 8001310:	50040000 	.word	0x50040000
 8001314:	14f00020 	.word	0x14f00020

08001318 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <MX_ADC2_Init+0xbc>)
 8001330:	4a29      	ldr	r2, [pc, #164]	; (80013d8 <MX_ADC2_Init+0xc0>)
 8001332:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <MX_ADC2_Init+0xbc>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <MX_ADC2_Init+0xbc>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <MX_ADC2_Init+0xbc>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <MX_ADC2_Init+0xbc>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <MX_ADC2_Init+0xbc>)
 800134e:	2204      	movs	r2, #4
 8001350:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_ADC2_Init+0xbc>)
 8001354:	2200      	movs	r2, #0
 8001356:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <MX_ADC2_Init+0xbc>)
 800135a:	2200      	movs	r2, #0
 800135c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_ADC2_Init+0xbc>)
 8001360:	2201      	movs	r2, #1
 8001362:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_ADC2_Init+0xbc>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_ADC2_Init+0xbc>)
 800136e:	2200      	movs	r2, #0
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_ADC2_Init+0xbc>)
 8001374:	2200      	movs	r2, #0
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_ADC2_Init+0xbc>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_ADC2_Init+0xbc>)
 8001382:	2200      	movs	r2, #0
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_ADC2_Init+0xbc>)
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MX_ADC2_Init+0xbc>)
 8001390:	f000 ff34 	bl	80021fc <HAL_ADC_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800139a:	f000 fad1 	bl	8001940 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_ADC2_Init+0xc4>)
 80013a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a2:	2306      	movs	r3, #6
 80013a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013aa:	237f      	movs	r3, #127	; 0x7f
 80013ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ae:	2304      	movs	r3, #4
 80013b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	4619      	mov	r1, r3
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <MX_ADC2_Init+0xbc>)
 80013bc:	f001 fa14 	bl	80027e8 <HAL_ADC_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80013c6:	f000 fabb 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20002458 	.word	0x20002458
 80013d8:	50040100 	.word	0x50040100
 80013dc:	19200040 	.word	0x19200040

080013e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	; 0x38
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
 800140e:	615a      	str	r2, [r3, #20]
 8001410:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001418:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 800141a:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <MX_TIM2_Init+0xe8>)
 800141c:	227f      	movs	r2, #127	; 0x7f
 800141e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001426:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001428:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800142c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800143a:	4823      	ldr	r0, [pc, #140]	; (80014c8 <MX_TIM2_Init+0xe8>)
 800143c:	f003 fce2 	bl	8004e04 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001446:	f000 fa7b 	bl	8001940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001454:	4619      	mov	r1, r3
 8001456:	481c      	ldr	r0, [pc, #112]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001458:	f004 f9ca 	bl	80057f0 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001462:	f000 fa6d 	bl	8001940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001466:	4818      	ldr	r0, [pc, #96]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001468:	f003 fd94 	bl	8004f94 <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001472:	f000 fa65 	bl	8001940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4810      	ldr	r0, [pc, #64]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001486:	f004 fed1 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001490:	f000 fa56 	bl	8001940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	; 0x60
 8001496:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	2208      	movs	r2, #8
 80014a8:	4619      	mov	r1, r3
 80014aa:	4807      	ldr	r0, [pc, #28]	; (80014c8 <MX_TIM2_Init+0xe8>)
 80014ac:	f004 f890 	bl	80055d0 <HAL_TIM_PWM_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014b6:	f000 fa43 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014ba:	4803      	ldr	r0, [pc, #12]	; (80014c8 <MX_TIM2_Init+0xe8>)
 80014bc:	f000 fb26 	bl	8001b0c <HAL_TIM_MspPostInit>

}
 80014c0:	bf00      	nop
 80014c2:	3738      	adds	r7, #56	; 0x38
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000257c 	.word	0x2000257c

080014cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <MX_TIM3_Init+0x98>)
 80014ec:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <MX_TIM3_Init+0x9c>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_TIM3_Init+0x98>)
 80014f2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80014f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_TIM3_Init+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_TIM3_Init+0x98>)
 8001500:	f242 720f 	movw	r2, #9999	; 0x270f
 8001504:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_TIM3_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_TIM3_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <MX_TIM3_Init+0x98>)
 8001514:	f003 fc76 	bl	8004e04 <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800151e:	f000 fa0f 	bl	8001940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001526:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	4619      	mov	r1, r3
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <MX_TIM3_Init+0x98>)
 8001530:	f004 f95e 	bl	80057f0 <HAL_TIM_ConfigClockSource>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800153a:	f000 fa01 	bl	8001940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_TIM3_Init+0x98>)
 800154c:	f004 fe6e 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001556:	f000 f9f3 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200024c0 	.word	0x200024c0
 8001568:	40000400 	.word	0x40000400

0800156c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0b0      	sub	sp, #192	; 0xc0
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001572:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]
 8001596:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2288      	movs	r2, #136	; 0x88
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f007 fe98 	bl	80092d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015a8:	2300      	movs	r3, #0
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 ff6c 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015ba:	f000 f9c1 	bl	8001940 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80015be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015c2:	f7ff fac9 	bl	8000b58 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff fa96 	bl	8000af8 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80015cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015d4:	2302      	movs	r3, #2
 80015d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80015ec:	2307      	movs	r3, #7
 80015ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f005 f807 	bl	800660e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001600:	f7ff f956 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 8001604:	4603      	mov	r3, r0
 8001606:	2200      	movs	r2, #0
 8001608:	2105      	movs	r1, #5
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff f9a6 	bl	800095c <NVIC_EncodePriority>
 8001610:	4603      	mov	r3, r0
 8001612:	4619      	mov	r1, r3
 8001614:	2025      	movs	r0, #37	; 0x25
 8001616:	f7ff f977 	bl	8000908 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800161a:	2025      	movs	r0, #37	; 0x25
 800161c:	f7ff f956 	bl	80008cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001620:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001624:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800163a:	230c      	movs	r3, #12
 800163c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART1, &USART_InitStruct);
 800164c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001650:	4619      	mov	r1, r3
 8001652:	4810      	ldr	r0, [pc, #64]	; (8001694 <MX_USART1_UART_Init+0x128>)
 8001654:	f005 fc7e 	bl	8006f54 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001658:	480e      	ldr	r0, [pc, #56]	; (8001694 <MX_USART1_UART_Init+0x128>)
 800165a:	f7ff f9c2 	bl	80009e2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800165e:	480d      	ldr	r0, [pc, #52]	; (8001694 <MX_USART1_UART_Init+0x128>)
 8001660:	f7ff f9af 	bl	80009c2 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */
  tx_queue_1 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8001664:	2200      	movs	r2, #0
 8001666:	2101      	movs	r1, #1
 8001668:	f44f 7080 	mov.w	r0, #256	; 0x100
 800166c:	f005 fe8a 	bl	8007384 <xQueueGenericCreate>
 8001670:	4603      	mov	r3, r0
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <MX_USART1_UART_Init+0x12c>)
 8001674:	6013      	str	r3, [r2, #0]
  rx_queue_1 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8001676:	2200      	movs	r2, #0
 8001678:	2101      	movs	r1, #1
 800167a:	2014      	movs	r0, #20
 800167c:	f005 fe82 	bl	8007384 <xQueueGenericCreate>
 8001680:	4603      	mov	r3, r0
 8001682:	4a06      	ldr	r2, [pc, #24]	; (800169c <MX_USART1_UART_Init+0x130>)
 8001684:	6013      	str	r3, [r2, #0]
  //Habilita a interrupcao de recepcao pela USART2
  LL_USART_EnableIT_RXNE(USART1);
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_USART1_UART_Init+0x128>)
 8001688:	f7ff f9e7 	bl	8000a5a <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	37c0      	adds	r7, #192	; 0xc0
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40013800 	.word	0x40013800
 8001698:	200025cc 	.word	0x200025cc
 800169c:	20002454 	.word	0x20002454

080016a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0b0      	sub	sp, #192	; 0xc0
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80016a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	615a      	str	r2, [r3, #20]
 80016b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2288      	movs	r2, #136	; 0x88
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f007 fdfe 	bl	80092d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d8:	2302      	movs	r3, #2
 80016da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016dc:	2300      	movs	r3, #0
 80016de:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fed2 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016ee:	f000 f927 	bl	8001940 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80016f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80016f6:	f7ff fa17 	bl	8000b28 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff f9fc 	bl	8000af8 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001700:	230c      	movs	r3, #12
 8001702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800171e:	2307      	movs	r3, #7
 8001720:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001728:	4619      	mov	r1, r3
 800172a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172e:	f004 ff6e 	bl	800660e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001732:	f7ff f8bd 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 8001736:	4603      	mov	r3, r0
 8001738:	2200      	movs	r2, #0
 800173a:	2105      	movs	r1, #5
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff f90d 	bl	800095c <NVIC_EncodePriority>
 8001742:	4603      	mov	r3, r0
 8001744:	4619      	mov	r1, r3
 8001746:	2026      	movs	r0, #38	; 0x26
 8001748:	f7ff f8de 	bl	8000908 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800174c:	2026      	movs	r0, #38	; 0x26
 800174e:	f7ff f8bd 	bl	80008cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001752:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800176c:	230c      	movs	r3, #12
 800176e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 800177e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001782:	4619      	mov	r1, r3
 8001784:	4810      	ldr	r0, [pc, #64]	; (80017c8 <MX_USART2_UART_Init+0x128>)
 8001786:	f005 fbe5 	bl	8006f54 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800178a:	480f      	ldr	r0, [pc, #60]	; (80017c8 <MX_USART2_UART_Init+0x128>)
 800178c:	f7ff f929 	bl	80009e2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_USART2_UART_Init+0x128>)
 8001792:	f7ff f916 	bl	80009c2 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8001796:	2200      	movs	r2, #0
 8001798:	2101      	movs	r1, #1
 800179a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800179e:	f005 fdf1 	bl	8007384 <xQueueGenericCreate>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a09      	ldr	r2, [pc, #36]	; (80017cc <MX_USART2_UART_Init+0x12c>)
 80017a6:	6013      	str	r3, [r2, #0]
  rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 80017a8:	2200      	movs	r2, #0
 80017aa:	2101      	movs	r1, #1
 80017ac:	2014      	movs	r0, #20
 80017ae:	f005 fde9 	bl	8007384 <xQueueGenericCreate>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <MX_USART2_UART_Init+0x130>)
 80017b6:	6013      	str	r3, [r2, #0]
  //Habilita a interrupcao de recepcao pela USART2
  LL_USART_EnableIT_RXNE(USART2);
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <MX_USART2_UART_Init+0x128>)
 80017ba:	f7ff f94e 	bl	8000a5a <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	37c0      	adds	r7, #192	; 0xc0
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40004400 	.word	0x40004400
 80017cc:	20002574 	.word	0x20002574
 80017d0:	20002578 	.word	0x20002578

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <MX_GPIO_Init+0xc4>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a2a      	ldr	r2, [pc, #168]	; (8001898 <MX_GPIO_Init+0xc4>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b28      	ldr	r3, [pc, #160]	; (8001898 <MX_GPIO_Init+0xc4>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <MX_GPIO_Init+0xc4>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a24      	ldr	r2, [pc, #144]	; (8001898 <MX_GPIO_Init+0xc4>)
 8001808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <MX_GPIO_Init+0xc4>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <MX_GPIO_Init+0xc4>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <MX_GPIO_Init+0xc4>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_GPIO_Init+0xc4>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_GPIO_Init+0xc4>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a18      	ldr	r2, [pc, #96]	; (8001898 <MX_GPIO_Init+0xc4>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_GPIO_Init+0xc4>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2120      	movs	r1, #32
 800184e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001852:	f001 ff7d 	bl	8003750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_GPIO_Init+0xc8>)
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <MX_GPIO_Init+0xcc>)
 800186c:	f001 fdc6 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001870:	2320      	movs	r3, #32
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188a:	f001 fdb7 	bl	80033fc <HAL_GPIO_Init>

}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	10210000 	.word	0x10210000
 80018a0:	48000800 	.word	0x48000800

080018a4 <user_pwm_setvalue>:

/* USER CODE BEGIN 4 */

void user_pwm_setvalue(uint16_t value)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]


	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80018ae:	2108      	movs	r1, #8
 80018b0:	480c      	ldr	r0, [pc, #48]	; (80018e4 <user_pwm_setvalue+0x40>)
 80018b2:	f003 fcd7 	bl	8005264 <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;


    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b6:	2360      	movs	r3, #96	; 0x60
 80018b8:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	2208      	movs	r2, #8
 80018cc:	4619      	mov	r1, r3
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <user_pwm_setvalue+0x40>)
 80018d0:	f003 fe7e 	bl	80055d0 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80018d4:	2108      	movs	r1, #8
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <user_pwm_setvalue+0x40>)
 80018d8:	f003 fbbe 	bl	8005058 <HAL_TIM_PWM_Start>
}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2000257c 	.word	0x2000257c

080018e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f005 fc16 	bl	8007122 <osDelay>
 80018f6:	e7fb      	b.n	80018f0 <StartDefaultTask+0x8>

080018f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800190a:	f000 fa73 	bl	8001df4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == htim3.Instance){
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d107      	bne.n	800192a <HAL_TIM_PeriodElapsedCallback+0x32>
          /* Toggle LED */
          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800191a:	2120      	movs	r1, #32
 800191c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001920:	f001 ff2e 	bl	8003780 <HAL_GPIO_TogglePin>
          toupeira = 1;
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
      }
  /* USER CODE END Callback 1 */
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40012c00 	.word	0x40012c00
 8001938:	200024c0 	.word	0x200024c0
 800193c:	200002e4 	.word	0x200002e4

08001940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001944:	b672      	cpsid	i
}
 8001946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001948:	e7fe      	b.n	8001948 <Error_Handler+0x8>
	...

0800194c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_MspInit+0x4c>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_MspInit+0x4c>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6613      	str	r3, [r2, #96]	; 0x60
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_MspInit+0x4c>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_MspInit+0x4c>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_MspInit+0x4c>)
 8001970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001974:	6593      	str	r3, [r2, #88]	; 0x58
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_MspInit+0x4c>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	210f      	movs	r1, #15
 8001986:	f06f 0001 	mvn.w	r0, #1
 800198a:	f001 fd0d 	bl	80033a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08c      	sub	sp, #48	; 0x30
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a34      	ldr	r2, [pc, #208]	; (8001a8c <HAL_ADC_MspInit+0xf0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12e      	bne.n	8001a1c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_ADC_MspInit+0xf4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <HAL_ADC_MspInit+0xf4>)
 80019c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_ADC_MspInit+0xf4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d10b      	bne.n	80019e8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d4:	4a2f      	ldr	r2, [pc, #188]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 80019d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 80019de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a00:	2301      	movs	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a04:	230b      	movs	r3, #11
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a16:	f001 fcf1 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a1a:	e032      	b.n	8001a82 <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <HAL_ADC_MspInit+0xfc>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d12d      	bne.n	8001a82 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_ADC_MspInit+0xf4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <HAL_ADC_MspInit+0xf4>)
 8001a2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_ADC_MspInit+0xf4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d10b      	bne.n	8001a50 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3c:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 8001a3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_ADC_MspInit+0xf8>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a6c:	230b      	movs	r3, #11
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7e:	f001 fcbd 	bl	80033fc <HAL_GPIO_Init>
}
 8001a82:	bf00      	nop
 8001a84:	3730      	adds	r7, #48	; 0x30
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	50040000 	.word	0x50040000
 8001a90:	200002ec 	.word	0x200002ec
 8001a94:	40021000 	.word	0x40021000
 8001a98:	50040100 	.word	0x50040100

08001a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_TIM_Base_MspInit+0x68>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <HAL_TIM_Base_MspInit+0x68>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_TIM_Base_MspInit+0x68>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ac6:	e018      	b.n	8001afa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <HAL_TIM_Base_MspInit+0x6c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d113      	bne.n	8001afa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_TIM_Base_MspInit+0x68>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <HAL_TIM_Base_MspInit+0x68>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_TIM_Base_MspInit+0x68>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2105      	movs	r1, #5
 8001aee:	201d      	movs	r0, #29
 8001af0:	f001 fc5a 	bl	80033a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001af4:	201d      	movs	r0, #29
 8001af6:	f001 fc73 	bl	80033e0 <HAL_NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40000400 	.word	0x40000400

08001b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2c:	d11c      	bne.n	8001b68 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_TIM_MspPostInit+0x64>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <HAL_TIM_MspPostInit+0x64>)
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_TIM_MspPostInit+0x64>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4619      	mov	r1, r3
 8001b62:	4804      	ldr	r0, [pc, #16]	; (8001b74 <HAL_TIM_MspPostInit+0x68>)
 8001b64:	f001 fc4a 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	48000400 	.word	0x48000400

08001b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	; 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	2019      	movs	r0, #25
 8001b8e:	f001 fc0b 	bl	80033a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b92:	2019      	movs	r0, #25
 8001b94:	f001 fc24 	bl	80033e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_InitTick+0x9c>)
 8001b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9c:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <HAL_InitTick+0x9c>)
 8001b9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ba2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_InitTick+0x9c>)
 8001ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bb0:	f107 0210 	add.w	r2, r7, #16
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fbd4 	bl	8004368 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bc0:	f002 fbbc 	bl	800433c <HAL_RCC_GetPCLK2Freq>
 8001bc4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc8:	4a13      	ldr	r2, [pc, #76]	; (8001c18 <HAL_InitTick+0xa0>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0c9b      	lsrs	r3, r3, #18
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_InitTick+0xa4>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <HAL_InitTick+0xa8>)
 8001bd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_InitTick+0xa4>)
 8001bdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001be0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_InitTick+0xa4>)
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_InitTick+0xa4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_InitTick+0xa4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001bf4:	4809      	ldr	r0, [pc, #36]	; (8001c1c <HAL_InitTick+0xa4>)
 8001bf6:	f003 f905 	bl	8004e04 <HAL_TIM_Base_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d104      	bne.n	8001c0a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c00:	4806      	ldr	r0, [pc, #24]	; (8001c1c <HAL_InitTick+0xa4>)
 8001c02:	f003 f957 	bl	8004eb4 <HAL_TIM_Base_Start_IT>
 8001c06:	4603      	mov	r3, r0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3730      	adds	r7, #48	; 0x30
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	431bde83 	.word	0x431bde83
 8001c1c:	200025d0 	.word	0x200025d0
 8001c20:	40012c00 	.word	0x40012c00

08001c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <NMI_Handler+0x4>

08001c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2e:	e7fe      	b.n	8001c2e <HardFault_Handler+0x4>

08001c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <MemManage_Handler+0x4>

08001c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c56:	f003 fb9b 	bl	8005390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200025d0 	.word	0x200025d0

08001c64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM3_IRQHandler+0x10>)
 8001c6a:	f003 fb91 	bl	8005390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200024c0 	.word	0x200024c0

08001c78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 8001c7c:	f7ff f99a 	bl	8000fb4 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 8001c88:	f7ff f934 	bl	8000ef4 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c98:	4a14      	ldr	r2, [pc, #80]	; (8001cec <_sbrk+0x5c>)
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <_sbrk+0x60>)
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <_sbrk+0x64>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <_sbrk+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d207      	bcs.n	8001cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc0:	f007 fad0 	bl	8009264 <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cce:	e009      	b.n	8001ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <_sbrk+0x64>)
 8001ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20018000 	.word	0x20018000
 8001cf0:	00000400 	.word	0x00000400
 8001cf4:	200002f0 	.word	0x200002f0
 8001cf8:	20002630 	.word	0x20002630

08001cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <SystemInit+0x5c>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d06:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <SystemInit+0x5c>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <SystemInit+0x60>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <SystemInit+0x60>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <SystemInit+0x60>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <SystemInit+0x60>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <SystemInit+0x60>)
 8001d28:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d2c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <SystemInit+0x60>)
 8001d34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d38:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <SystemInit+0x60>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <SystemInit+0x60>)
 8001d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <SystemInit+0x60>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00
 8001d5c:	40021000 	.word	0x40021000

08001d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d64:	f7ff ffca 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d6a:	e003      	b.n	8001d74 <LoopCopyDataInit>

08001d6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d72:	3104      	adds	r1, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d74:	480a      	ldr	r0, [pc, #40]	; (8001da0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d7c:	d3f6      	bcc.n	8001d6c <CopyDataInit>
	ldr	r2, =_sbss
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d80:	e002      	b.n	8001d88 <LoopFillZerobss>

08001d82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d84:	f842 3b04 	str.w	r3, [r2], #4

08001d88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <LoopForever+0x16>)
	cmp	r2, r3
 8001d8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d8c:	d3f9      	bcc.n	8001d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f007 fa6f 	bl	8009270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d92:	f7ff f96f 	bl	8001074 <main>

08001d96 <LoopForever>:

LoopForever:
    b LoopForever
 8001d96:	e7fe      	b.n	8001d96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d98:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001d9c:	08009e64 	.word	0x08009e64
	ldr	r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001da4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001da8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001dac:	20002630 	.word	0x20002630

08001db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC1_2_IRQHandler>
	...

08001db4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <HAL_Init+0x3c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <HAL_Init+0x3c>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dca:	2003      	movs	r0, #3
 8001dcc:	f001 fae1 	bl	8003392 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd0:	200f      	movs	r0, #15
 8001dd2:	f7ff fed1 	bl	8001b78 <HAL_InitTick>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	e001      	b.n	8001de6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001de2:	f7ff fdb3 	bl	800194c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001de6:	79fb      	ldrb	r3, [r7, #7]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40022000 	.word	0x40022000

08001df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_IncTick+0x20>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x24>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_IncTick+0x24>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000008 	.word	0x20000008
 8001e18:	2000261c 	.word	0x2000261c

08001e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_GetTick+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2000261c 	.word	0x2000261c

08001e34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
 8001ea8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3360      	adds	r3, #96	; 0x60
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <LL_ADC_SetOffset+0x44>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ed4:	bf00      	nop
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	03fff000 	.word	0x03fff000

08001ee4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3360      	adds	r3, #96	; 0x60
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3360      	adds	r3, #96	; 0x60
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f3a:	bf00      	nop
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3330      	adds	r3, #48	; 0x30
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	4413      	add	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	211f      	movs	r1, #31
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	0e9b      	lsrs	r3, r3, #26
 8001fa4:	f003 011f 	and.w	r1, r3, #31
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fb8:	bf00      	nop
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	0e5b      	lsrs	r3, r3, #25
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	0d1b      	lsrs	r3, r3, #20
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2107      	movs	r1, #7
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	0d1b      	lsrs	r3, r3, #20
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	431a      	orrs	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800200e:	bf00      	nop
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	43db      	mvns	r3, r3
 8002036:	401a      	ands	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0318 	and.w	r3, r3, #24
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002040:	40d9      	lsrs	r1, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	400b      	ands	r3, r1
 8002046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204a:	431a      	orrs	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	0007ffff 	.word	0x0007ffff

08002064 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 031f 	and.w	r3, r3, #31
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6093      	str	r3, [r2, #8]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020d4:	d101      	bne.n	80020da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002124:	d101      	bne.n	800212a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002148:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800214c:	f043 0201 	orr.w	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <LL_ADC_IsEnabled+0x18>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <LL_ADC_IsEnabled+0x1a>
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002196:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800219a:	f043 0204 	orr.w	r2, r3, #4
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d101      	bne.n	80021c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d101      	bne.n	80021ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e136      	b.n	8002484 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	2b00      	cmp	r3, #0
 8002222:	d109      	bne.n	8002238 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fbb9 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff3f 	bl	80020c0 <LL_ADC_IsDeepPowerDownEnabled>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d004      	beq.n	8002252 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff25 	bl	800209c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff5a 	bl	8002110 <LL_ADC_IsInternalRegulatorEnabled>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d115      	bne.n	800228e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff3e 	bl	80020e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800226c:	4b87      	ldr	r3, [pc, #540]	; (800248c <HAL_ADC_Init+0x290>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	4a87      	ldr	r2, [pc, #540]	; (8002490 <HAL_ADC_Init+0x294>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	3301      	adds	r3, #1
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002280:	e002      	b.n	8002288 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3b01      	subs	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f9      	bne.n	8002282 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff3c 	bl	8002110 <LL_ADC_IsInternalRegulatorEnabled>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10d      	bne.n	80022ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a2:	f043 0210 	orr.w	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff75 	bl	80021ae <LL_ADC_REG_IsConversionOngoing>
 80022c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 80cf 	bne.w	8002472 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 80cb 	bne.w	8002472 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022e4:	f043 0202 	orr.w	r2, r3, #2
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff35 	bl	8002160 <LL_ADC_IsEnabled>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d115      	bne.n	8002328 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022fc:	4865      	ldr	r0, [pc, #404]	; (8002494 <HAL_ADC_Init+0x298>)
 80022fe:	f7ff ff2f 	bl	8002160 <LL_ADC_IsEnabled>
 8002302:	4604      	mov	r4, r0
 8002304:	4864      	ldr	r0, [pc, #400]	; (8002498 <HAL_ADC_Init+0x29c>)
 8002306:	f7ff ff2b 	bl	8002160 <LL_ADC_IsEnabled>
 800230a:	4603      	mov	r3, r0
 800230c:	431c      	orrs	r4, r3
 800230e:	4863      	ldr	r0, [pc, #396]	; (800249c <HAL_ADC_Init+0x2a0>)
 8002310:	f7ff ff26 	bl	8002160 <LL_ADC_IsEnabled>
 8002314:	4603      	mov	r3, r0
 8002316:	4323      	orrs	r3, r4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4619      	mov	r1, r3
 8002322:	485f      	ldr	r0, [pc, #380]	; (80024a0 <HAL_ADC_Init+0x2a4>)
 8002324:	f7ff fd86 	bl	8001e34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7e5b      	ldrb	r3, [r3, #25]
 800232c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002332:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002338:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800233e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002346:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d106      	bne.n	8002364 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	3b01      	subs	r3, #1
 800235c:	045b      	lsls	r3, r3, #17
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	2b00      	cmp	r3, #0
 800236a:	d009      	beq.n	8002380 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_ADC_Init+0x2a8>)
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	69b9      	ldr	r1, [r7, #24]
 8002390:	430b      	orrs	r3, r1
 8002392:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff08 	bl	80021ae <LL_ADC_REG_IsConversionOngoing>
 800239e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff15 	bl	80021d4 <LL_ADC_INJ_IsConversionOngoing>
 80023aa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d13d      	bne.n	800242e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d13a      	bne.n	800242e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023bc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023c4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023d4:	f023 0302 	bic.w	r3, r3, #2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	69b9      	ldr	r1, [r7, #24]
 80023de:	430b      	orrs	r3, r1
 80023e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d118      	bne.n	800241e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023f6:	f023 0304 	bic.w	r3, r3, #4
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002402:	4311      	orrs	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800240e:	430a      	orrs	r2, r1
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	611a      	str	r2, [r3, #16]
 800241c:	e007      	b.n	800242e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0201 	bic.w	r2, r2, #1
 800242c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10c      	bne.n	8002450 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	f023 010f 	bic.w	r1, r3, #15
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
 800244e:	e007      	b.n	8002460 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 020f 	bic.w	r2, r2, #15
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f023 0303 	bic.w	r3, r3, #3
 8002468:	f043 0201 	orr.w	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	655a      	str	r2, [r3, #84]	; 0x54
 8002470:	e007      	b.n	8002482 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	f043 0210 	orr.w	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002482:	7ffb      	ldrb	r3, [r7, #31]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3724      	adds	r7, #36	; 0x24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}
 800248c:	20000000 	.word	0x20000000
 8002490:	053e2d63 	.word	0x053e2d63
 8002494:	50040000 	.word	0x50040000
 8002498:	50040100 	.word	0x50040100
 800249c:	50040200 	.word	0x50040200
 80024a0:	50040300 	.word	0x50040300
 80024a4:	fff0c007 	.word	0xfff0c007

080024a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024b0:	4857      	ldr	r0, [pc, #348]	; (8002610 <HAL_ADC_Start+0x168>)
 80024b2:	f7ff fdd7 	bl	8002064 <LL_ADC_GetMultimode>
 80024b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fe76 	bl	80021ae <LL_ADC_REG_IsConversionOngoing>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f040 809c 	bne.w	8002602 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_Start+0x30>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e097      	b.n	8002608 <HAL_ADC_Start+0x160>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fd71 	bl	8002fc8 <ADC_Enable>
 80024e6:	4603      	mov	r3, r0
 80024e8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f040 8083 	bne.w	80025f8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a42      	ldr	r2, [pc, #264]	; (8002614 <HAL_ADC_Start+0x16c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d002      	beq.n	8002516 <HAL_ADC_Start+0x6e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	e000      	b.n	8002518 <HAL_ADC_Start+0x70>
 8002516:	4b40      	ldr	r3, [pc, #256]	; (8002618 <HAL_ADC_Start+0x170>)
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	4293      	cmp	r3, r2
 800251e:	d002      	beq.n	8002526 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253e:	d106      	bne.n	800254e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	f023 0206 	bic.w	r2, r3, #6
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	659a      	str	r2, [r3, #88]	; 0x58
 800254c:	e002      	b.n	8002554 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	221c      	movs	r2, #28
 800255a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a2a      	ldr	r2, [pc, #168]	; (8002614 <HAL_ADC_Start+0x16c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d002      	beq.n	8002574 <HAL_ADC_Start+0xcc>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	e000      	b.n	8002576 <HAL_ADC_Start+0xce>
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_ADC_Start+0x170>)
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	4293      	cmp	r3, r2
 800257c:	d008      	beq.n	8002590 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b05      	cmp	r3, #5
 8002588:	d002      	beq.n	8002590 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2b09      	cmp	r3, #9
 800258e:	d114      	bne.n	80025ba <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fde7 	bl	8002186 <LL_ADC_REG_StartConversion>
 80025b8:	e025      	b.n	8002606 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_ADC_Start+0x16c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d002      	beq.n	80025d6 <HAL_ADC_Start+0x12e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	e000      	b.n	80025d8 <HAL_ADC_Start+0x130>
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_ADC_Start+0x170>)
 80025d8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00f      	beq.n	8002606 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
 80025f6:	e006      	b.n	8002606 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002600:	e001      	b.n	8002606 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002602:	2302      	movs	r3, #2
 8002604:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002606:	7dfb      	ldrb	r3, [r7, #23]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	50040300 	.word	0x50040300
 8002614:	50040100 	.word	0x50040100
 8002618:	50040000 	.word	0x50040000

0800261c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002626:	4866      	ldr	r0, [pc, #408]	; (80027c0 <HAL_ADC_PollForConversion+0x1a4>)
 8002628:	f7ff fd1c 	bl	8002064 <LL_ADC_GetMultimode>
 800262c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b08      	cmp	r3, #8
 8002634:	d102      	bne.n	800263c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002636:	2308      	movs	r3, #8
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e02a      	b.n	8002692 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d002      	beq.n	800264e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b09      	cmp	r3, #9
 800264c:	d111      	bne.n	8002672 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0a4      	b.n	80027b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800266c:	2304      	movs	r3, #4
 800266e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002670:	e00f      	b.n	8002692 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002672:	4853      	ldr	r0, [pc, #332]	; (80027c0 <HAL_ADC_PollForConversion+0x1a4>)
 8002674:	f7ff fd04 	bl	8002080 <LL_ADC_GetMultiDMATransfer>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e093      	b.n	80027b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800268e:	2304      	movs	r3, #4
 8002690:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002692:	f7ff fbc3 	bl	8001e1c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002698:	e021      	b.n	80026de <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a0:	d01d      	beq.n	80026de <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80026a2:	f7ff fbbb 	bl	8001e1c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <HAL_ADC_PollForConversion+0x9c>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d112      	bne.n	80026de <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10b      	bne.n	80026de <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f043 0204 	orr.w	r2, r3, #4
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e06b      	b.n	80027b6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0d6      	beq.n	800269a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fc22 	bl	8001f46 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01c      	beq.n	8002742 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7e5b      	ldrb	r3, [r3, #25]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d118      	bne.n	8002742 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b08      	cmp	r3, #8
 800271c:	d111      	bne.n	8002742 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1f      	ldr	r2, [pc, #124]	; (80027c4 <HAL_ADC_PollForConversion+0x1a8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d002      	beq.n	8002752 <HAL_ADC_PollForConversion+0x136>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	e000      	b.n	8002754 <HAL_ADC_PollForConversion+0x138>
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_ADC_PollForConversion+0x1ac>)
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	4293      	cmp	r3, r2
 800275a:	d008      	beq.n	800276e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b05      	cmp	r3, #5
 8002766:	d002      	beq.n	800276e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b09      	cmp	r3, #9
 800276c:	d104      	bne.n	8002778 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	e00c      	b.n	8002792 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <HAL_ADC_PollForConversion+0x1a8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d002      	beq.n	8002788 <HAL_ADC_PollForConversion+0x16c>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e000      	b.n	800278a <HAL_ADC_PollForConversion+0x16e>
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <HAL_ADC_PollForConversion+0x1ac>)
 800278a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d104      	bne.n	80027a2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2208      	movs	r2, #8
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e008      	b.n	80027b4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	220c      	movs	r2, #12
 80027b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	50040300 	.word	0x50040300
 80027c4:	50040100 	.word	0x50040100
 80027c8:	50040000 	.word	0x50040000

080027cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b0b6      	sub	sp, #216	; 0xd8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x22>
 8002806:	2302      	movs	r3, #2
 8002808:	e3c7      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x7b2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fcc9 	bl	80021ae <LL_ADC_REG_IsConversionOngoing>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 83a8 	bne.w	8002f74 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d824      	bhi.n	8002876 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	3b02      	subs	r3, #2
 8002832:	2b03      	cmp	r3, #3
 8002834:	d81b      	bhi.n	800286e <HAL_ADC_ConfigChannel+0x86>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <HAL_ADC_ConfigChannel+0x54>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	0800284d 	.word	0x0800284d
 8002840:	08002855 	.word	0x08002855
 8002844:	0800285d 	.word	0x0800285d
 8002848:	08002865 	.word	0x08002865
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	220c      	movs	r2, #12
 8002850:	605a      	str	r2, [r3, #4]
          break;
 8002852:	e011      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2212      	movs	r2, #18
 8002858:	605a      	str	r2, [r3, #4]
          break;
 800285a:	e00d      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2218      	movs	r2, #24
 8002860:	605a      	str	r2, [r3, #4]
          break;
 8002862:	e009      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286a:	605a      	str	r2, [r3, #4]
          break;
 800286c:	e004      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2206      	movs	r2, #6
 8002872:	605a      	str	r2, [r3, #4]
          break;
 8002874:	e000      	b.n	8002878 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002876:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	f7ff fb71 	bl	8001f6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fc8d 	bl	80021ae <LL_ADC_REG_IsConversionOngoing>
 8002894:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fc99 	bl	80021d4 <LL_ADC_INJ_IsConversionOngoing>
 80028a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 81a6 	bne.w	8002bfc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f040 81a1 	bne.w	8002bfc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6819      	ldr	r1, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f7ff fb7c 	bl	8001fc4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	08db      	lsrs	r3, r3, #3
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d00a      	beq.n	8002904 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6919      	ldr	r1, [r3, #16]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028fe:	f7ff facd 	bl	8001e9c <LL_ADC_SetOffset>
 8002902:	e17b      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff faea 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002910:	4603      	mov	r3, r0
 8002912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10a      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x148>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fadf 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	f003 021f 	and.w	r2, r3, #31
 800292e:	e01e      	b.n	800296e <HAL_ADC_ConfigChannel+0x186>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fad4 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800294e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002952:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800295e:	2320      	movs	r3, #32
 8002960:	e004      	b.n	800296c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x19e>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	e018      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x1d0>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800299a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800299e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e004      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80029ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d106      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff faa3 	bl	8001f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fa87 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x20e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fa7c 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	e01e      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x24c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fa71 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e004      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x264>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	e018      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x296>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e004      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d106      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fa40 	bl	8001f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2102      	movs	r1, #2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fa24 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x2d4>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2102      	movs	r1, #2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fa19 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 021f 	and.w	r2, r3, #31
 8002aba:	e01e      	b.n	8002afa <HAL_ADC_ConfigChannel+0x312>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fa0e 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e004      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x32a>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0e9b      	lsrs	r3, r3, #26
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	e016      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x358>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e004      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d106      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff f9df 	bl	8001f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2103      	movs	r1, #3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff f9c3 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x396>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2103      	movs	r1, #3
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff f9b8 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	0e9b      	lsrs	r3, r3, #26
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	e017      	b.n	8002bae <HAL_ADC_ConfigChannel+0x3c6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2103      	movs	r1, #3
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff f9ad 	bl	8001ee4 <LL_ADC_GetOffsetChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b98:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e003      	b.n	8002bac <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x3de>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0e9b      	lsrs	r3, r3, #26
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	e011      	b.n	8002bea <HAL_ADC_ConfigChannel+0x402>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002bde:	2320      	movs	r3, #32
 8002be0:	e003      	b.n	8002bea <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2103      	movs	r1, #3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f98a 	bl	8001f10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff faad 	bl	8002160 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f040 813f 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f7ff f9fe 	bl	800201c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a8e      	ldr	r2, [pc, #568]	; (8002e60 <HAL_ADC_ConfigChannel+0x678>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	f040 8130 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x46c>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0e9b      	lsrs	r3, r3, #26
 8002c42:	3301      	adds	r3, #1
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2b09      	cmp	r3, #9
 8002c4a:	bf94      	ite	ls
 8002c4c:	2301      	movls	r3, #1
 8002c4e:	2300      	movhi	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e019      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x4a0>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c64:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	e003      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	bf94      	ite	ls
 8002c82:	2301      	movls	r3, #1
 8002c84:	2300      	movhi	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d079      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x4c0>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	069b      	lsls	r3, r3, #26
 8002ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca6:	e015      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x4ec>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	e003      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	069b      	lsls	r3, r3, #26
 8002cd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x50c>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0e9b      	lsrs	r3, r3, #26
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2101      	movs	r1, #1
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	e017      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x53c>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	ea42 0103 	orr.w	r1, r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x562>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	051b      	lsls	r3, r3, #20
 8002d48:	e018      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x594>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002d62:	2320      	movs	r3, #32
 8002d64:	e003      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	e080      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x5b4>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	3301      	adds	r3, #1
 8002d94:	069b      	lsls	r3, r3, #26
 8002d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d9a:	e015      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x5e0>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e003      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	069b      	lsls	r3, r3, #26
 8002dc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x600>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0e9b      	lsrs	r3, r3, #26
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	e017      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x630>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	61fb      	str	r3, [r7, #28]
  return result;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e003      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	2101      	movs	r1, #1
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	ea42 0103 	orr.w	r1, r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10d      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x65c>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f003 021f 	and.w	r2, r3, #31
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b1e      	subs	r3, #30
 8002e3c:	051b      	lsls	r3, r3, #20
 8002e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e42:	e01d      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x698>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	613b      	str	r3, [r7, #16]
  return result;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d103      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	e005      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x684>
 8002e60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 021f 	and.w	r2, r3, #31
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	3b1e      	subs	r3, #30
 8002e7a:	051b      	lsls	r3, r3, #20
 8002e7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e80:	430b      	orrs	r3, r1
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	6892      	ldr	r2, [r2, #8]
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7ff f89c 	bl	8001fc4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b44      	ldr	r3, [pc, #272]	; (8002fa4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d07a      	beq.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e98:	4843      	ldr	r0, [pc, #268]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e9a:	f7fe fff1 	bl	8001e80 <LL_ADC_GetCommonPathInternalCh>
 8002e9e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a41      	ldr	r2, [pc, #260]	; (8002fac <HAL_ADC_ConfigChannel+0x7c4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d12c      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d126      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a3c      	ldr	r2, [pc, #240]	; (8002fb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0x6e4>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d15d      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4834      	ldr	r0, [pc, #208]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ed8:	f7fe ffbf 	bl	8001e5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002edc:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	4a36      	ldr	r2, [pc, #216]	; (8002fbc <HAL_ADC_ConfigChannel+0x7d4>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ef6:	e002      	b.n	8002efe <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f9      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f04:	e040      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d118      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x75a>
 8002f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d112      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d004      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x748>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d12d      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f38:	4619      	mov	r1, r3
 8002f3a:	481b      	ldr	r0, [pc, #108]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f3c:	f7fe ff8d 	bl	8001e5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f40:	e024      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d120      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11a      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d115      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	480e      	ldr	r0, [pc, #56]	; (8002fa8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f6e:	f7fe ff74 	bl	8001e5a <LL_ADC_SetCommonPathInternalCh>
 8002f72:	e00c      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	f043 0220 	orr.w	r2, r3, #32
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f86:	e002      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f88:	bf00      	nop
 8002f8a:	e000      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f96:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	37d8      	adds	r7, #216	; 0xd8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	80080000 	.word	0x80080000
 8002fa8:	50040300 	.word	0x50040300
 8002fac:	c7520000 	.word	0xc7520000
 8002fb0:	50040000 	.word	0x50040000
 8002fb4:	50040200 	.word	0x50040200
 8002fb8:	20000000 	.word	0x20000000
 8002fbc:	053e2d63 	.word	0x053e2d63
 8002fc0:	cb840000 	.word	0xcb840000
 8002fc4:	80000001 	.word	0x80000001

08002fc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff f8c3 	bl	8002160 <LL_ADC_IsEnabled>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d14d      	bne.n	800307c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	4b28      	ldr	r3, [pc, #160]	; (8003088 <ADC_Enable+0xc0>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e039      	b.n	800307e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff f892 	bl	8002138 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003014:	f7fe ff02 	bl	8001e1c <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800301a:	e028      	b.n	800306e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff f89d 	bl	8002160 <LL_ADC_IsEnabled>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d104      	bne.n	8003036 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff f881 	bl	8002138 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003036:	f7fe fef1 	bl	8001e1c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d914      	bls.n	800306e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d00d      	beq.n	800306e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	f043 0210 	orr.w	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e007      	b.n	800307e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b01      	cmp	r3, #1
 800307a:	d1cf      	bne.n	800301c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	8000003f 	.word	0x8000003f

0800308c <LL_ADC_IsEnabled>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <LL_ADC_IsEnabled+0x18>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <LL_ADC_IsEnabled+0x1a>
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d101      	bne.n	80030ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b09f      	sub	sp, #124	; 0x7c
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e093      	b.n	800321e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80030fe:	2300      	movs	r3, #0
 8003100:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003102:	2300      	movs	r3, #0
 8003104:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a47      	ldr	r2, [pc, #284]	; (8003228 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d102      	bne.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003110:	4b46      	ldr	r3, [pc, #280]	; (800322c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	e001      	b.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e072      	b.n	800321e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffb9 	bl	80030b2 <LL_ADC_REG_IsConversionOngoing>
 8003140:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ffb3 	bl	80030b2 <LL_ADC_REG_IsConversionOngoing>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d154      	bne.n	80031fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003154:	2b00      	cmp	r3, #0
 8003156:	d151      	bne.n	80031fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003158:	4b35      	ldr	r3, [pc, #212]	; (8003230 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800315a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d02c      	beq.n	80031be <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003176:	035b      	lsls	r3, r3, #13
 8003178:	430b      	orrs	r3, r1
 800317a:	431a      	orrs	r2, r3
 800317c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003180:	4829      	ldr	r0, [pc, #164]	; (8003228 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003182:	f7ff ff83 	bl	800308c <LL_ADC_IsEnabled>
 8003186:	4604      	mov	r4, r0
 8003188:	4828      	ldr	r0, [pc, #160]	; (800322c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800318a:	f7ff ff7f 	bl	800308c <LL_ADC_IsEnabled>
 800318e:	4603      	mov	r3, r0
 8003190:	431c      	orrs	r4, r3
 8003192:	4828      	ldr	r0, [pc, #160]	; (8003234 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003194:	f7ff ff7a 	bl	800308c <LL_ADC_IsEnabled>
 8003198:	4603      	mov	r3, r0
 800319a:	4323      	orrs	r3, r4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d137      	bne.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031a8:	f023 030f 	bic.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	6811      	ldr	r1, [r2, #0]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	6892      	ldr	r2, [r2, #8]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	431a      	orrs	r2, r3
 80031b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031bc:	e028      	b.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031ca:	4817      	ldr	r0, [pc, #92]	; (8003228 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031cc:	f7ff ff5e 	bl	800308c <LL_ADC_IsEnabled>
 80031d0:	4604      	mov	r4, r0
 80031d2:	4816      	ldr	r0, [pc, #88]	; (800322c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031d4:	f7ff ff5a 	bl	800308c <LL_ADC_IsEnabled>
 80031d8:	4603      	mov	r3, r0
 80031da:	431c      	orrs	r4, r3
 80031dc:	4815      	ldr	r0, [pc, #84]	; (8003234 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80031de:	f7ff ff55 	bl	800308c <LL_ADC_IsEnabled>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4323      	orrs	r3, r4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d112      	bne.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031f2:	f023 030f 	bic.w	r3, r3, #15
 80031f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031fa:	e009      	b.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800320e:	e000      	b.n	8003212 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003210:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800321a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800321e:	4618      	mov	r0, r3
 8003220:	377c      	adds	r7, #124	; 0x7c
 8003222:	46bd      	mov	sp, r7
 8003224:	bd90      	pop	{r4, r7, pc}
 8003226:	bf00      	nop
 8003228:	50040000 	.word	0x50040000
 800322c:	50040100 	.word	0x50040100
 8003230:	50040300 	.word	0x50040300
 8003234:	50040200 	.word	0x50040200

08003238 <__NVIC_SetPriorityGrouping>:
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003254:	4013      	ands	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326a:	4a04      	ldr	r2, [pc, #16]	; (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	60d3      	str	r3, [r2, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_GetPriorityGrouping>:
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <__NVIC_GetPriorityGrouping+0x18>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	0a1b      	lsrs	r3, r3, #8
 800328a:	f003 0307 	and.w	r3, r3, #7
}
 800328e:	4618      	mov	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <__NVIC_EnableIRQ>:
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	db0b      	blt.n	80032c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <__NVIC_EnableIRQ+0x38>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2001      	movs	r0, #1
 80032be:	fa00 f202 	lsl.w	r2, r0, r2
 80032c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	e000e100 	.word	0xe000e100

080032d8 <__NVIC_SetPriority>:
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	db0a      	blt.n	8003302 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	490c      	ldr	r1, [pc, #48]	; (8003324 <__NVIC_SetPriority+0x4c>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	0112      	lsls	r2, r2, #4
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	440b      	add	r3, r1
 80032fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003300:	e00a      	b.n	8003318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4908      	ldr	r1, [pc, #32]	; (8003328 <__NVIC_SetPriority+0x50>)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	3b04      	subs	r3, #4
 8003310:	0112      	lsls	r2, r2, #4
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	440b      	add	r3, r1
 8003316:	761a      	strb	r2, [r3, #24]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000e100 	.word	0xe000e100
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <NVIC_EncodePriority>:
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f1c3 0307 	rsb	r3, r3, #7
 8003346:	2b04      	cmp	r3, #4
 8003348:	bf28      	it	cs
 800334a:	2304      	movcs	r3, #4
 800334c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3304      	adds	r3, #4
 8003352:	2b06      	cmp	r3, #6
 8003354:	d902      	bls.n	800335c <NVIC_EncodePriority+0x30>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3b03      	subs	r3, #3
 800335a:	e000      	b.n	800335e <NVIC_EncodePriority+0x32>
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	401a      	ands	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003374:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	43d9      	mvns	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003384:	4313      	orrs	r3, r2
}
 8003386:	4618      	mov	r0, r3
 8003388:	3724      	adds	r7, #36	; 0x24
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff4c 	bl	8003238 <__NVIC_SetPriorityGrouping>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033ba:	f7ff ff61 	bl	8003280 <__NVIC_GetPriorityGrouping>
 80033be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	6978      	ldr	r0, [r7, #20]
 80033c6:	f7ff ffb1 	bl	800332c <NVIC_EncodePriority>
 80033ca:	4602      	mov	r2, r0
 80033cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff80 	bl	80032d8 <__NVIC_SetPriority>
}
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff54 	bl	800329c <__NVIC_EnableIRQ>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800340a:	e17f      	b.n	800370c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2101      	movs	r1, #1
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	fa01 f303 	lsl.w	r3, r1, r3
 8003418:	4013      	ands	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8171 	beq.w	8003706 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d00b      	beq.n	8003444 <HAL_GPIO_Init+0x48>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d007      	beq.n	8003444 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003438:	2b11      	cmp	r3, #17
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b12      	cmp	r3, #18
 8003442:	d130      	bne.n	80034a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800347a:	2201      	movs	r2, #1
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f003 0201 	and.w	r2, r3, #1
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d118      	bne.n	80034e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80034b8:	2201      	movs	r2, #1
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	08db      	lsrs	r3, r3, #3
 80034ce:	f003 0201 	and.w	r2, r3, #1
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x128>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b12      	cmp	r3, #18
 8003522:	d123      	bne.n	800356c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	220f      	movs	r2, #15
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	08da      	lsrs	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3208      	adds	r2, #8
 8003566:	6939      	ldr	r1, [r7, #16]
 8003568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0203 	and.w	r2, r3, #3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80ac 	beq.w	8003706 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ae:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_GPIO_Init+0x330>)
 80035b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b2:	4a5e      	ldr	r2, [pc, #376]	; (800372c <HAL_GPIO_Init+0x330>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6613      	str	r3, [r2, #96]	; 0x60
 80035ba:	4b5c      	ldr	r3, [pc, #368]	; (800372c <HAL_GPIO_Init+0x330>)
 80035bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035c6:	4a5a      	ldr	r2, [pc, #360]	; (8003730 <HAL_GPIO_Init+0x334>)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	089b      	lsrs	r3, r3, #2
 80035cc:	3302      	adds	r3, #2
 80035ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	220f      	movs	r2, #15
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035f0:	d025      	beq.n	800363e <HAL_GPIO_Init+0x242>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4f      	ldr	r2, [pc, #316]	; (8003734 <HAL_GPIO_Init+0x338>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01f      	beq.n	800363a <HAL_GPIO_Init+0x23e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4e      	ldr	r2, [pc, #312]	; (8003738 <HAL_GPIO_Init+0x33c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d019      	beq.n	8003636 <HAL_GPIO_Init+0x23a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4d      	ldr	r2, [pc, #308]	; (800373c <HAL_GPIO_Init+0x340>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_GPIO_Init+0x236>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4c      	ldr	r2, [pc, #304]	; (8003740 <HAL_GPIO_Init+0x344>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00d      	beq.n	800362e <HAL_GPIO_Init+0x232>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4b      	ldr	r2, [pc, #300]	; (8003744 <HAL_GPIO_Init+0x348>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <HAL_GPIO_Init+0x22e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4a      	ldr	r2, [pc, #296]	; (8003748 <HAL_GPIO_Init+0x34c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_GPIO_Init+0x22a>
 8003622:	2306      	movs	r3, #6
 8003624:	e00c      	b.n	8003640 <HAL_GPIO_Init+0x244>
 8003626:	2307      	movs	r3, #7
 8003628:	e00a      	b.n	8003640 <HAL_GPIO_Init+0x244>
 800362a:	2305      	movs	r3, #5
 800362c:	e008      	b.n	8003640 <HAL_GPIO_Init+0x244>
 800362e:	2304      	movs	r3, #4
 8003630:	e006      	b.n	8003640 <HAL_GPIO_Init+0x244>
 8003632:	2303      	movs	r3, #3
 8003634:	e004      	b.n	8003640 <HAL_GPIO_Init+0x244>
 8003636:	2302      	movs	r3, #2
 8003638:	e002      	b.n	8003640 <HAL_GPIO_Init+0x244>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_GPIO_Init+0x244>
 800363e:	2300      	movs	r3, #0
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	f002 0203 	and.w	r2, r2, #3
 8003646:	0092      	lsls	r2, r2, #2
 8003648:	4093      	lsls	r3, r2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003650:	4937      	ldr	r1, [pc, #220]	; (8003730 <HAL_GPIO_Init+0x334>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	3302      	adds	r3, #2
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800365e:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_GPIO_Init+0x350>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	43db      	mvns	r3, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003682:	4a32      	ldr	r2, [pc, #200]	; (800374c <HAL_GPIO_Init+0x350>)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003688:	4b30      	ldr	r3, [pc, #192]	; (800374c <HAL_GPIO_Init+0x350>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	43db      	mvns	r3, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036ac:	4a27      	ldr	r2, [pc, #156]	; (800374c <HAL_GPIO_Init+0x350>)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036b2:	4b26      	ldr	r3, [pc, #152]	; (800374c <HAL_GPIO_Init+0x350>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	43db      	mvns	r3, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d6:	4a1d      	ldr	r2, [pc, #116]	; (800374c <HAL_GPIO_Init+0x350>)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036dc:	4b1b      	ldr	r3, [pc, #108]	; (800374c <HAL_GPIO_Init+0x350>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003700:	4a12      	ldr	r2, [pc, #72]	; (800374c <HAL_GPIO_Init+0x350>)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3301      	adds	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	f47f ae78 	bne.w	800340c <HAL_GPIO_Init+0x10>
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	40010000 	.word	0x40010000
 8003734:	48000400 	.word	0x48000400
 8003738:	48000800 	.word	0x48000800
 800373c:	48000c00 	.word	0x48000c00
 8003740:	48001000 	.word	0x48001000
 8003744:	48001400 	.word	0x48001400
 8003748:	48001800 	.word	0x48001800
 800374c:	40010400 	.word	0x40010400

08003750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]
 800375c:	4613      	mov	r3, r2
 800375e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003760:	787b      	ldrb	r3, [r7, #1]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003766:	887a      	ldrh	r2, [r7, #2]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800376c:	e002      	b.n	8003774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003792:	887a      	ldrh	r2, [r7, #2]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4013      	ands	r3, r2
 8003798:	041a      	lsls	r2, r3, #16
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	43d9      	mvns	r1, r3
 800379e:	887b      	ldrh	r3, [r7, #2]
 80037a0:	400b      	ands	r3, r1
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	619a      	str	r2, [r3, #24]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <HAL_PWREx_GetVoltageRange+0x18>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40007000 	.word	0x40007000

080037d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037de:	d130      	bne.n	8003842 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ec:	d038      	beq.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037f6:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2232      	movs	r2, #50	; 0x32
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0c9b      	lsrs	r3, r3, #18
 8003810:	3301      	adds	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003814:	e002      	b.n	800381c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3b01      	subs	r3, #1
 800381a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003828:	d102      	bne.n	8003830 <HAL_PWREx_ControlVoltageScaling+0x60>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f2      	bne.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003830:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383c:	d110      	bne.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e00f      	b.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384e:	d007      	beq.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003858:	4a05      	ldr	r2, [pc, #20]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800385e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40007000 	.word	0x40007000
 8003874:	20000000 	.word	0x20000000
 8003878:	431bde83 	.word	0x431bde83

0800387c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e3d4      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800388e:	4ba1      	ldr	r3, [pc, #644]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003898:	4b9e      	ldr	r3, [pc, #632]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80e4 	beq.w	8003a78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_RCC_OscConfig+0x4a>
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b0c      	cmp	r3, #12
 80038ba:	f040 808b 	bne.w	80039d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	f040 8087 	bne.w	80039d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038c6:	4b93      	ldr	r3, [pc, #588]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_RCC_OscConfig+0x62>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e3ac      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1a      	ldr	r2, [r3, #32]
 80038e2:	4b8c      	ldr	r3, [pc, #560]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <HAL_RCC_OscConfig+0x7c>
 80038ee:	4b89      	ldr	r3, [pc, #548]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f6:	e005      	b.n	8003904 <HAL_RCC_OscConfig+0x88>
 80038f8:	4b86      	ldr	r3, [pc, #536]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 80038fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003904:	4293      	cmp	r3, r2
 8003906:	d223      	bcs.n	8003950 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fd5d 	bl	80043cc <RCC_SetFlashLatencyFromMSIRange>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e38d      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800391c:	4b7d      	ldr	r3, [pc, #500]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a7c      	ldr	r2, [pc, #496]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003922:	f043 0308 	orr.w	r3, r3, #8
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	4b7a      	ldr	r3, [pc, #488]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4977      	ldr	r1, [pc, #476]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393a:	4b76      	ldr	r3, [pc, #472]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	4972      	ldr	r1, [pc, #456]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
 800394e:	e025      	b.n	800399c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003950:	4b70      	ldr	r3, [pc, #448]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a6f      	ldr	r2, [pc, #444]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003956:	f043 0308 	orr.w	r3, r3, #8
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	496a      	ldr	r1, [pc, #424]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800396e:	4b69      	ldr	r3, [pc, #420]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	4965      	ldr	r1, [pc, #404]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fd1d 	bl	80043cc <RCC_SetFlashLatencyFromMSIRange>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e34d      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800399c:	f000 fc36 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b5c      	ldr	r3, [pc, #368]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	495a      	ldr	r1, [pc, #360]	; (8003b18 <HAL_RCC_OscConfig+0x29c>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
 80039b8:	4a58      	ldr	r2, [pc, #352]	; (8003b1c <HAL_RCC_OscConfig+0x2a0>)
 80039ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039bc:	4b58      	ldr	r3, [pc, #352]	; (8003b20 <HAL_RCC_OscConfig+0x2a4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe f8d9 	bl	8001b78 <HAL_InitTick>
 80039c6:	4603      	mov	r3, r0
 80039c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d052      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	e331      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d032      	beq.n	8003a42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039dc:	4b4d      	ldr	r3, [pc, #308]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a4c      	ldr	r2, [pc, #304]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039e8:	f7fe fa18 	bl	8001e1c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f0:	f7fe fa14 	bl	8001e1c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e31a      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a02:	4b44      	ldr	r3, [pc, #272]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a0e:	4b41      	ldr	r3, [pc, #260]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a40      	ldr	r2, [pc, #256]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003a14:	f043 0308 	orr.w	r3, r3, #8
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b3e      	ldr	r3, [pc, #248]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	493b      	ldr	r1, [pc, #236]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a2c:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	4936      	ldr	r1, [pc, #216]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
 8003a40:	e01a      	b.n	8003a78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a42:	4b34      	ldr	r3, [pc, #208]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a33      	ldr	r2, [pc, #204]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a4e:	f7fe f9e5 	bl	8001e1c <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a56:	f7fe f9e1 	bl	8001e1c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e2e7      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a68:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f0      	bne.n	8003a56 <HAL_RCC_OscConfig+0x1da>
 8003a74:	e000      	b.n	8003a78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d074      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0x21a>
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b0c      	cmp	r3, #12
 8003a8e:	d10e      	bne.n	8003aae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d10b      	bne.n	8003aae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a96:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d064      	beq.n	8003b6c <HAL_RCC_OscConfig+0x2f0>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d160      	bne.n	8003b6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e2c4      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x24a>
 8003ab8:	4b16      	ldr	r3, [pc, #88]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e01d      	b.n	8003b02 <HAL_RCC_OscConfig+0x286>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ace:	d10c      	bne.n	8003aea <HAL_RCC_OscConfig+0x26e>
 8003ad0:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	e00b      	b.n	8003b02 <HAL_RCC_OscConfig+0x286>
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a06      	ldr	r2, [pc, #24]	; (8003b14 <HAL_RCC_OscConfig+0x298>)
 8003afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d01c      	beq.n	8003b44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fe f987 	bl	8001e1c <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b10:	e011      	b.n	8003b36 <HAL_RCC_OscConfig+0x2ba>
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	08009ce0 	.word	0x08009ce0
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fe f97a 	bl	8001e1c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e280      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b36:	4baf      	ldr	r3, [pc, #700]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x2a8>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe f96a 	bl	8001e1c <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe f966 	bl	8001e1c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e26c      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b5e:	4ba5      	ldr	r3, [pc, #660]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x2d0>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d060      	beq.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_OscConfig+0x310>
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b0c      	cmp	r3, #12
 8003b84:	d119      	bne.n	8003bba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d116      	bne.n	8003bba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b8c:	4b99      	ldr	r3, [pc, #612]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x328>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e249      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba4:	4b93      	ldr	r3, [pc, #588]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	061b      	lsls	r3, r3, #24
 8003bb2:	4990      	ldr	r1, [pc, #576]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb8:	e040      	b.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d023      	beq.n	8003c0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc2:	4b8c      	ldr	r3, [pc, #560]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a8b      	ldr	r2, [pc, #556]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fe f925 	bl	8001e1c <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd6:	f7fe f921 	bl	8001e1c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e227      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be8:	4b82      	ldr	r3, [pc, #520]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf4:	4b7f      	ldr	r3, [pc, #508]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	061b      	lsls	r3, r3, #24
 8003c02:	497c      	ldr	r1, [pc, #496]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
 8003c08:	e018      	b.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c0a:	4b7a      	ldr	r3, [pc, #488]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a79      	ldr	r2, [pc, #484]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f7fe f901 	bl	8001e1c <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c1e:	f7fe f8fd 	bl	8001e1c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e203      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c30:	4b70      	ldr	r3, [pc, #448]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d03c      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01c      	beq.n	8003c8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c50:	4b68      	ldr	r3, [pc, #416]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c56:	4a67      	ldr	r2, [pc, #412]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fe f8dc 	bl	8001e1c <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c68:	f7fe f8d8 	bl	8001e1c <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e1de      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c7a:	4b5e      	ldr	r3, [pc, #376]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ef      	beq.n	8003c68 <HAL_RCC_OscConfig+0x3ec>
 8003c88:	e01b      	b.n	8003cc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c8a:	4b5a      	ldr	r3, [pc, #360]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c90:	4a58      	ldr	r2, [pc, #352]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fe f8bf 	bl	8001e1c <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca2:	f7fe f8bb 	bl	8001e1c <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e1c1      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cb4:	4b4f      	ldr	r3, [pc, #316]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1ef      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 80a6 	beq.w	8003e1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cd4:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10d      	bne.n	8003cfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce0:	4b44      	ldr	r3, [pc, #272]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	4a43      	ldr	r2, [pc, #268]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cea:	6593      	str	r3, [r2, #88]	; 0x58
 8003cec:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfc:	4b3e      	ldr	r3, [pc, #248]	; (8003df8 <HAL_RCC_OscConfig+0x57c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d118      	bne.n	8003d3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d08:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <HAL_RCC_OscConfig+0x57c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3a      	ldr	r2, [pc, #232]	; (8003df8 <HAL_RCC_OscConfig+0x57c>)
 8003d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d14:	f7fe f882 	bl	8001e1c <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1c:	f7fe f87e 	bl	8001e1c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e184      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2e:	4b32      	ldr	r3, [pc, #200]	; (8003df8 <HAL_RCC_OscConfig+0x57c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d108      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4d8>
 8003d42:	4b2c      	ldr	r3, [pc, #176]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	4a2a      	ldr	r2, [pc, #168]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d52:	e024      	b.n	8003d9e <HAL_RCC_OscConfig+0x522>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b05      	cmp	r3, #5
 8003d5a:	d110      	bne.n	8003d7e <HAL_RCC_OscConfig+0x502>
 8003d5c:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	4a24      	ldr	r2, [pc, #144]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003d64:	f043 0304 	orr.w	r3, r3, #4
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d6c:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	4a20      	ldr	r2, [pc, #128]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d7c:	e00f      	b.n	8003d9e <HAL_RCC_OscConfig+0x522>
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d8e:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003d96:	f023 0304 	bic.w	r3, r3, #4
 8003d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da6:	f7fe f839 	bl	8001e1c <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fe f835 	bl	8001e1c <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e139      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_OscConfig+0x578>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0ed      	beq.n	8003dae <HAL_RCC_OscConfig+0x532>
 8003dd2:	e01a      	b.n	8003e0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fe f822 	bl	8001e1c <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dda:	e00f      	b.n	8003dfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ddc:	f7fe f81e 	bl	8001e1c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d906      	bls.n	8003dfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e122      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dfc:	4b90      	ldr	r3, [pc, #576]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e8      	bne.n	8003ddc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0a:	7ffb      	ldrb	r3, [r7, #31]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b8b      	ldr	r3, [pc, #556]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	4a8a      	ldr	r2, [pc, #552]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8108 	beq.w	8004036 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	f040 80d0 	bne.w	8003fd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e30:	4b83      	ldr	r3, [pc, #524]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 0203 	and.w	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d130      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d127      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d11f      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e70:	2a07      	cmp	r2, #7
 8003e72:	bf14      	ite	ne
 8003e74:	2201      	movne	r2, #1
 8003e76:	2200      	moveq	r2, #0
 8003e78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d113      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d109      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d06e      	beq.n	8003f84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b0c      	cmp	r3, #12
 8003eaa:	d069      	beq.n	8003f80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003eac:	4b64      	ldr	r3, [pc, #400]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003eb8:	4b61      	ldr	r3, [pc, #388]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0b7      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b5d      	ldr	r3, [pc, #372]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a5c      	ldr	r2, [pc, #368]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ed4:	f7fd ffa2 	bl	8001e1c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fd ff9e 	bl	8001e1c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0a4      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eee:	4b54      	ldr	r3, [pc, #336]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003efa:	4b51      	ldr	r3, [pc, #324]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	4b51      	ldr	r3, [pc, #324]	; (8004044 <HAL_RCC_OscConfig+0x7c8>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f0a:	3a01      	subs	r2, #1
 8003f0c:	0112      	lsls	r2, r2, #4
 8003f0e:	4311      	orrs	r1, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f14:	0212      	lsls	r2, r2, #8
 8003f16:	4311      	orrs	r1, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f1c:	0852      	lsrs	r2, r2, #1
 8003f1e:	3a01      	subs	r2, #1
 8003f20:	0552      	lsls	r2, r2, #21
 8003f22:	4311      	orrs	r1, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f28:	0852      	lsrs	r2, r2, #1
 8003f2a:	3a01      	subs	r2, #1
 8003f2c:	0652      	lsls	r2, r2, #25
 8003f2e:	4311      	orrs	r1, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f34:	0912      	lsrs	r2, r2, #4
 8003f36:	0452      	lsls	r2, r2, #17
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	4941      	ldr	r1, [pc, #260]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f40:	4b3f      	ldr	r3, [pc, #252]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a3e      	ldr	r2, [pc, #248]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f4c:	4b3c      	ldr	r3, [pc, #240]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4a3b      	ldr	r2, [pc, #236]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f58:	f7fd ff60 	bl	8001e1c <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f60:	f7fd ff5c 	bl	8001e1c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e062      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f72:	4b33      	ldr	r3, [pc, #204]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f7e:	e05a      	b.n	8004036 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e059      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f84:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d152      	bne.n	8004036 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f90:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a2a      	ldr	r2, [pc, #168]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f9c:	4b28      	ldr	r3, [pc, #160]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a27      	ldr	r2, [pc, #156]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fa8:	f7fd ff38 	bl	8001e1c <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd ff34 	bl	8001e1c <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e03a      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x734>
 8003fce:	e032      	b.n	8004036 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b0c      	cmp	r3, #12
 8003fd4:	d02d      	beq.n	8004032 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a19      	ldr	r2, [pc, #100]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003fdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fe0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003fe2:	4b17      	ldr	r3, [pc, #92]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d105      	bne.n	8003ffa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003fee:	4b14      	ldr	r3, [pc, #80]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	4a13      	ldr	r2, [pc, #76]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003ff4:	f023 0303 	bic.w	r3, r3, #3
 8003ff8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4a10      	ldr	r2, [pc, #64]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8004000:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004008:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400a:	f7fd ff07 	bl	8001e1c <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004012:	f7fd ff03 	bl	8001e1c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e009      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_RCC_OscConfig+0x7c4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f0      	bne.n	8004012 <HAL_RCC_OscConfig+0x796>
 8004030:	e001      	b.n	8004036 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000
 8004044:	f99d808c 	.word	0xf99d808c

08004048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0c8      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800405c:	4b66      	ldr	r3, [pc, #408]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d910      	bls.n	800408c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b63      	ldr	r3, [pc, #396]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 0207 	bic.w	r2, r3, #7
 8004072:	4961      	ldr	r1, [pc, #388]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b5f      	ldr	r3, [pc, #380]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0b0      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d04c      	beq.n	8004132 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b03      	cmp	r3, #3
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a0:	4b56      	ldr	r3, [pc, #344]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d121      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e09e      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b8:	4b50      	ldr	r3, [pc, #320]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d115      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e092      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d0:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e086      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e0:	4b46      	ldr	r3, [pc, #280]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e07e      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040f0:	4b42      	ldr	r3, [pc, #264]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 0203 	bic.w	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	493f      	ldr	r1, [pc, #252]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004102:	f7fd fe8b 	bl	8001e1c <HAL_GetTick>
 8004106:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004108:	e00a      	b.n	8004120 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410a:	f7fd fe87 	bl	8001e1c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e066      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004120:	4b36      	ldr	r3, [pc, #216]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 020c 	and.w	r2, r3, #12
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	429a      	cmp	r2, r3
 8004130:	d1eb      	bne.n	800410a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413e:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	492c      	ldr	r1, [pc, #176]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004150:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d210      	bcs.n	8004180 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b26      	ldr	r3, [pc, #152]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 0207 	bic.w	r2, r3, #7
 8004166:	4924      	ldr	r1, [pc, #144]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e036      	b.n	80041ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4918      	ldr	r1, [pc, #96]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4910      	ldr	r1, [pc, #64]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041be:	f000 f825 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80041c2:	4602      	mov	r2, r0
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_RCC_ClockConfig+0x1b4>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	490c      	ldr	r1, [pc, #48]	; (8004200 <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	5ccb      	ldrb	r3, [r1, r3]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	fa22 f303 	lsr.w	r3, r2, r3
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041de:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd fcc8 	bl	8001b78 <HAL_InitTick>
 80041e8:	4603      	mov	r3, r0
 80041ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80041ec:	7afb      	ldrb	r3, [r7, #11]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40022000 	.word	0x40022000
 80041fc:	40021000 	.word	0x40021000
 8004200:	08009ce0 	.word	0x08009ce0
 8004204:	20000000 	.word	0x20000000
 8004208:	20000004 	.word	0x20000004

0800420c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421a:	4b3e      	ldr	r3, [pc, #248]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004224:	4b3b      	ldr	r3, [pc, #236]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x34>
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d121      	bne.n	800427e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d11e      	bne.n	800427e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004240:	4b34      	ldr	r3, [pc, #208]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800424c:	4b31      	ldr	r3, [pc, #196]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800424e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e005      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800425c:	4b2d      	ldr	r3, [pc, #180]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004268:	4a2b      	ldr	r2, [pc, #172]	; (8004318 <HAL_RCC_GetSysClockFreq+0x10c>)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004270:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10d      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800427c:	e00a      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d102      	bne.n	800428a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004284:	4b25      	ldr	r3, [pc, #148]	; (800431c <HAL_RCC_GetSysClockFreq+0x110>)
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e004      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d101      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004290:	4b23      	ldr	r3, [pc, #140]	; (8004320 <HAL_RCC_GetSysClockFreq+0x114>)
 8004292:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d134      	bne.n	8004304 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800429a:	4b1e      	ldr	r3, [pc, #120]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d003      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d003      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0xac>
 80042b0:	e005      	b.n	80042be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042b2:	4b1a      	ldr	r3, [pc, #104]	; (800431c <HAL_RCC_GetSysClockFreq+0x110>)
 80042b4:	617b      	str	r3, [r7, #20]
      break;
 80042b6:	e005      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_RCC_GetSysClockFreq+0x114>)
 80042ba:	617b      	str	r3, [r7, #20]
      break;
 80042bc:	e002      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	617b      	str	r3, [r7, #20]
      break;
 80042c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042c4:	4b13      	ldr	r3, [pc, #76]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	3301      	adds	r3, #1
 80042d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042d2:	4b10      	ldr	r3, [pc, #64]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	fb02 f203 	mul.w	r2, r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	0e5b      	lsrs	r3, r3, #25
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	3301      	adds	r3, #1
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004304:	69bb      	ldr	r3, [r7, #24]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3724      	adds	r7, #36	; 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	08009cf8 	.word	0x08009cf8
 800431c:	00f42400 	.word	0x00f42400
 8004320:	007a1200 	.word	0x007a1200

08004324 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <HAL_RCC_GetHCLKFreq+0x14>)
 800432a:	681b      	ldr	r3, [r3, #0]
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000000 	.word	0x20000000

0800433c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004340:	f7ff fff0 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	0adb      	lsrs	r3, r3, #11
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4904      	ldr	r1, [pc, #16]	; (8004364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000
 8004364:	08009cf0 	.word	0x08009cf0

08004368 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	220f      	movs	r2, #15
 8004376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004378:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_RCC_GetClockConfig+0x5c>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 0203 	and.w	r2, r3, #3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCC_GetClockConfig+0x5c>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	08db      	lsrs	r3, r3, #3
 80043a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <HAL_RCC_GetClockConfig+0x60>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0207 	and.w	r2, r3, #7
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	601a      	str	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40022000 	.word	0x40022000

080043cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043d8:	4b2a      	ldr	r3, [pc, #168]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043e4:	f7ff f9e6 	bl	80037b4 <HAL_PWREx_GetVoltageRange>
 80043e8:	6178      	str	r0, [r7, #20]
 80043ea:	e014      	b.n	8004416 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	4b25      	ldr	r3, [pc, #148]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	4a24      	ldr	r2, [pc, #144]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f6:	6593      	str	r3, [r2, #88]	; 0x58
 80043f8:	4b22      	ldr	r3, [pc, #136]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004404:	f7ff f9d6 	bl	80037b4 <HAL_PWREx_GetVoltageRange>
 8004408:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441c:	d10b      	bne.n	8004436 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b80      	cmp	r3, #128	; 0x80
 8004422:	d919      	bls.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2ba0      	cmp	r3, #160	; 0xa0
 8004428:	d902      	bls.n	8004430 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800442a:	2302      	movs	r3, #2
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	e013      	b.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004430:	2301      	movs	r3, #1
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	e010      	b.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d902      	bls.n	8004442 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800443c:	2303      	movs	r3, #3
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	e00a      	b.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d102      	bne.n	800444e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004448:	2302      	movs	r3, #2
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	e004      	b.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b70      	cmp	r3, #112	; 0x70
 8004452:	d101      	bne.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004454:	2301      	movs	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 0207 	bic.w	r2, r3, #7
 8004460:	4909      	ldr	r1, [pc, #36]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	429a      	cmp	r2, r3
 8004474:	d001      	beq.n	800447a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000
 8004488:	40022000 	.word	0x40022000

0800448c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004494:	2300      	movs	r3, #0
 8004496:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004498:	2300      	movs	r3, #0
 800449a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d041      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044b0:	d02a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044b6:	d824      	bhi.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044bc:	d008      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044c2:	d81e      	bhi.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044cc:	d010      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044ce:	e018      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044d0:	4b86      	ldr	r3, [pc, #536]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a85      	ldr	r2, [pc, #532]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044dc:	e015      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3304      	adds	r3, #4
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fabb 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044ee:	e00c      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3320      	adds	r3, #32
 80044f4:	2100      	movs	r1, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fba6 	bl	8004c48 <RCCEx_PLLSAI2_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004500:	e003      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	74fb      	strb	r3, [r7, #19]
      break;
 8004506:	e000      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004510:	4b76      	ldr	r3, [pc, #472]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451e:	4973      	ldr	r1, [pc, #460]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004526:	e001      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004528:	7cfb      	ldrb	r3, [r7, #19]
 800452a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d041      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800453c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004540:	d02a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004542:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004546:	d824      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800454c:	d008      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800454e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004552:	d81e      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800455c:	d010      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800455e:	e018      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004560:	4b62      	ldr	r3, [pc, #392]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4a61      	ldr	r2, [pc, #388]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800456c:	e015      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fa73 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800457e:	e00c      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3320      	adds	r3, #32
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fb5e 	bl	8004c48 <RCCEx_PLLSAI2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004590:	e003      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	74fb      	strb	r3, [r7, #19]
      break;
 8004596:	e000      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800459a:	7cfb      	ldrb	r3, [r7, #19]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045a0:	4b52      	ldr	r3, [pc, #328]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ae:	494f      	ldr	r1, [pc, #316]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045b6:	e001      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80a0 	beq.w	800470a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045ce:	4b47      	ldr	r3, [pc, #284]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045de:	2300      	movs	r3, #0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00d      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e4:	4b41      	ldr	r3, [pc, #260]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	4a40      	ldr	r2, [pc, #256]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ee:	6593      	str	r3, [r2, #88]	; 0x58
 80045f0:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045fc:	2301      	movs	r3, #1
 80045fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004600:	4b3b      	ldr	r3, [pc, #236]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a3a      	ldr	r2, [pc, #232]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800460c:	f7fd fc06 	bl	8001e1c <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004612:	e009      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004614:	f7fd fc02 	bl	8001e1c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d902      	bls.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	74fb      	strb	r3, [r7, #19]
        break;
 8004626:	e005      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004628:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0ef      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d15c      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800463a:	4b2c      	ldr	r3, [pc, #176]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004644:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01f      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	429a      	cmp	r2, r3
 8004656:	d019      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004658:	4b24      	ldr	r3, [pc, #144]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004662:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004664:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	4a20      	ldr	r2, [pc, #128]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004684:	4a19      	ldr	r2, [pc, #100]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d016      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7fd fbc1 	bl	8001e1c <HAL_GetTick>
 800469a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800469c:	e00b      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fd fbbd 	bl	8001e1c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d902      	bls.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	74fb      	strb	r3, [r7, #19]
            break;
 80046b4:	e006      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b6:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0ec      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10c      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046da:	4904      	ldr	r1, [pc, #16]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046e2:	e009      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	74bb      	strb	r3, [r7, #18]
 80046e8:	e006      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f8:	7c7b      	ldrb	r3, [r7, #17]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fe:	4b9e      	ldr	r3, [pc, #632]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004702:	4a9d      	ldr	r2, [pc, #628]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004708:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004716:	4b98      	ldr	r3, [pc, #608]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f023 0203 	bic.w	r2, r3, #3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	4994      	ldr	r1, [pc, #592]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004738:	4b8f      	ldr	r3, [pc, #572]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f023 020c 	bic.w	r2, r3, #12
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	498c      	ldr	r1, [pc, #560]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800475a:	4b87      	ldr	r3, [pc, #540]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	4983      	ldr	r1, [pc, #524]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800477c:	4b7e      	ldr	r3, [pc, #504]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	497b      	ldr	r1, [pc, #492]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800479e:	4b76      	ldr	r3, [pc, #472]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ac:	4972      	ldr	r1, [pc, #456]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047c0:	4b6d      	ldr	r3, [pc, #436]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ce:	496a      	ldr	r1, [pc, #424]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047e2:	4b65      	ldr	r3, [pc, #404]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f0:	4961      	ldr	r1, [pc, #388]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004804:	4b5c      	ldr	r3, [pc, #368]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004812:	4959      	ldr	r1, [pc, #356]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004826:	4b54      	ldr	r3, [pc, #336]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	4950      	ldr	r1, [pc, #320]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004848:	4b4b      	ldr	r3, [pc, #300]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	4948      	ldr	r1, [pc, #288]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800486a:	4b43      	ldr	r3, [pc, #268]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004878:	493f      	ldr	r1, [pc, #252]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d028      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800488c:	4b3a      	ldr	r3, [pc, #232]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489a:	4937      	ldr	r1, [pc, #220]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048aa:	d106      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ac:	4b32      	ldr	r3, [pc, #200]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4a31      	ldr	r2, [pc, #196]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048b6:	60d3      	str	r3, [r2, #12]
 80048b8:	e011      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048c2:	d10c      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3304      	adds	r3, #4
 80048c8:	2101      	movs	r1, #1
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 f8c8 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d028      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048ea:	4b23      	ldr	r3, [pc, #140]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	491f      	ldr	r1, [pc, #124]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004908:	d106      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004914:	60d3      	str	r3, [r2, #12]
 8004916:	e011      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004920:	d10c      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3304      	adds	r3, #4
 8004926:	2101      	movs	r1, #1
 8004928:	4618      	mov	r0, r3
 800492a:	f000 f899 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02b      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004956:	4908      	ldr	r1, [pc, #32]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004966:	d109      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4a02      	ldr	r2, [pc, #8]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004972:	60d3      	str	r3, [r2, #12]
 8004974:	e014      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004980:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004984:	d10c      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3304      	adds	r3, #4
 800498a:	2101      	movs	r1, #1
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f867 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d02f      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049ac:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ba:	4928      	ldr	r1, [pc, #160]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ca:	d10d      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	2102      	movs	r1, #2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f844 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d014      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	74bb      	strb	r3, [r7, #18]
 80049e6:	e011      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3320      	adds	r3, #32
 80049f6:	2102      	movs	r1, #2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 f925 	bl	8004c48 <RCCEx_PLLSAI2_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a18:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a26:	490d      	ldr	r1, [pc, #52]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a3a:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a4a:	4904      	ldr	r1, [pc, #16]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a52:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000

08004a60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a6e:	4b75      	ldr	r3, [pc, #468]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d018      	beq.n	8004aac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a7a:	4b72      	ldr	r3, [pc, #456]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f003 0203 	and.w	r2, r3, #3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d10d      	bne.n	8004aa6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a92:	4b6c      	ldr	r3, [pc, #432]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	091b      	lsrs	r3, r3, #4
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
       ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d047      	beq.n	8004b36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
 8004aaa:	e044      	b.n	8004b36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d018      	beq.n	8004ae6 <RCCEx_PLLSAI1_Config+0x86>
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d825      	bhi.n	8004b04 <RCCEx_PLLSAI1_Config+0xa4>
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d002      	beq.n	8004ac2 <RCCEx_PLLSAI1_Config+0x62>
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d009      	beq.n	8004ad4 <RCCEx_PLLSAI1_Config+0x74>
 8004ac0:	e020      	b.n	8004b04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ac2:	4b60      	ldr	r3, [pc, #384]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d11d      	bne.n	8004b0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad2:	e01a      	b.n	8004b0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ad4:	4b5b      	ldr	r3, [pc, #364]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d116      	bne.n	8004b0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae4:	e013      	b.n	8004b0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ae6:	4b57      	ldr	r3, [pc, #348]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10f      	bne.n	8004b12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004af2:	4b54      	ldr	r3, [pc, #336]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b02:	e006      	b.n	8004b12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
      break;
 8004b08:	e004      	b.n	8004b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b0a:	bf00      	nop
 8004b0c:	e002      	b.n	8004b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b0e:	bf00      	nop
 8004b10:	e000      	b.n	8004b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b12:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10d      	bne.n	8004b36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b1a:	4b4a      	ldr	r3, [pc, #296]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	4944      	ldr	r1, [pc, #272]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d17d      	bne.n	8004c38 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b3c:	4b41      	ldr	r3, [pc, #260]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a40      	ldr	r2, [pc, #256]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b48:	f7fd f968 	bl	8001e1c <HAL_GetTick>
 8004b4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b4e:	e009      	b.n	8004b64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b50:	f7fd f964 	bl	8001e1c <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d902      	bls.n	8004b64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	73fb      	strb	r3, [r7, #15]
        break;
 8004b62:	e005      	b.n	8004b70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b64:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ef      	bne.n	8004b50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d160      	bne.n	8004c38 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d111      	bne.n	8004ba0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b7c:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6892      	ldr	r2, [r2, #8]
 8004b8c:	0211      	lsls	r1, r2, #8
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68d2      	ldr	r2, [r2, #12]
 8004b92:	0912      	lsrs	r2, r2, #4
 8004b94:	0452      	lsls	r2, r2, #17
 8004b96:	430a      	orrs	r2, r1
 8004b98:	492a      	ldr	r1, [pc, #168]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	610b      	str	r3, [r1, #16]
 8004b9e:	e027      	b.n	8004bf0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d112      	bne.n	8004bcc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6892      	ldr	r2, [r2, #8]
 8004bb6:	0211      	lsls	r1, r2, #8
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6912      	ldr	r2, [r2, #16]
 8004bbc:	0852      	lsrs	r2, r2, #1
 8004bbe:	3a01      	subs	r2, #1
 8004bc0:	0552      	lsls	r2, r2, #21
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	491f      	ldr	r1, [pc, #124]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	610b      	str	r3, [r1, #16]
 8004bca:	e011      	b.n	8004bf0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6892      	ldr	r2, [r2, #8]
 8004bdc:	0211      	lsls	r1, r2, #8
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6952      	ldr	r2, [r2, #20]
 8004be2:	0852      	lsrs	r2, r2, #1
 8004be4:	3a01      	subs	r2, #1
 8004be6:	0652      	lsls	r2, r2, #25
 8004be8:	430a      	orrs	r2, r1
 8004bea:	4916      	ldr	r1, [pc, #88]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bf0:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a13      	ldr	r2, [pc, #76]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfc:	f7fd f90e 	bl	8001e1c <HAL_GetTick>
 8004c00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c02:	e009      	b.n	8004c18 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c04:	f7fd f90a 	bl	8001e1c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d902      	bls.n	8004c18 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	73fb      	strb	r3, [r7, #15]
          break;
 8004c16:	e005      	b.n	8004c24 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0ef      	beq.n	8004c04 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	4904      	ldr	r1, [pc, #16]	; (8004c44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000

08004c48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c56:	4b6a      	ldr	r3, [pc, #424]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d018      	beq.n	8004c94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c62:	4b67      	ldr	r3, [pc, #412]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f003 0203 	and.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d10d      	bne.n	8004c8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
       ||
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c7a:	4b61      	ldr	r3, [pc, #388]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	091b      	lsrs	r3, r3, #4
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
       ||
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d047      	beq.n	8004d1e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
 8004c92:	e044      	b.n	8004d1e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d018      	beq.n	8004cce <RCCEx_PLLSAI2_Config+0x86>
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d825      	bhi.n	8004cec <RCCEx_PLLSAI2_Config+0xa4>
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d002      	beq.n	8004caa <RCCEx_PLLSAI2_Config+0x62>
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d009      	beq.n	8004cbc <RCCEx_PLLSAI2_Config+0x74>
 8004ca8:	e020      	b.n	8004cec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004caa:	4b55      	ldr	r3, [pc, #340]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d11d      	bne.n	8004cf2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cba:	e01a      	b.n	8004cf2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cbc:	4b50      	ldr	r3, [pc, #320]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d116      	bne.n	8004cf6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ccc:	e013      	b.n	8004cf6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cce:	4b4c      	ldr	r3, [pc, #304]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10f      	bne.n	8004cfa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cda:	4b49      	ldr	r3, [pc, #292]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cea:	e006      	b.n	8004cfa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf0:	e004      	b.n	8004cfc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10d      	bne.n	8004d1e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d02:	4b3f      	ldr	r3, [pc, #252]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6819      	ldr	r1, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	430b      	orrs	r3, r1
 8004d18:	4939      	ldr	r1, [pc, #228]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d167      	bne.n	8004df4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d24:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a35      	ldr	r2, [pc, #212]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d30:	f7fd f874 	bl	8001e1c <HAL_GetTick>
 8004d34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d36:	e009      	b.n	8004d4c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d38:	f7fd f870 	bl	8001e1c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d902      	bls.n	8004d4c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	73fb      	strb	r3, [r7, #15]
        break;
 8004d4a:	e005      	b.n	8004d58 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d4c:	4b2c      	ldr	r3, [pc, #176]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ef      	bne.n	8004d38 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d14a      	bne.n	8004df4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d111      	bne.n	8004d88 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d64:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6892      	ldr	r2, [r2, #8]
 8004d74:	0211      	lsls	r1, r2, #8
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68d2      	ldr	r2, [r2, #12]
 8004d7a:	0912      	lsrs	r2, r2, #4
 8004d7c:	0452      	lsls	r2, r2, #17
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	491f      	ldr	r1, [pc, #124]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	614b      	str	r3, [r1, #20]
 8004d86:	e011      	b.n	8004dac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6892      	ldr	r2, [r2, #8]
 8004d98:	0211      	lsls	r1, r2, #8
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6912      	ldr	r2, [r2, #16]
 8004d9e:	0852      	lsrs	r2, r2, #1
 8004da0:	3a01      	subs	r2, #1
 8004da2:	0652      	lsls	r2, r2, #25
 8004da4:	430a      	orrs	r2, r1
 8004da6:	4916      	ldr	r1, [pc, #88]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004dac:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fd f830 	bl	8001e1c <HAL_GetTick>
 8004dbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dbe:	e009      	b.n	8004dd4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dc0:	f7fd f82c 	bl	8001e1c <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d902      	bls.n	8004dd4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	73fb      	strb	r3, [r7, #15]
          break;
 8004dd2:	e005      	b.n	8004de0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0ef      	beq.n	8004dc0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	4904      	ldr	r1, [pc, #16]	; (8004e00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40021000 	.word	0x40021000

08004e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e049      	b.n	8004eaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fc fe36 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f000 fdc2 	bl	80059cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d001      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e04f      	b.n	8004f6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a23      	ldr	r2, [pc, #140]	; (8004f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01d      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0x76>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef6:	d018      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0x76>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1f      	ldr	r2, [pc, #124]	; (8004f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0x76>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1e      	ldr	r2, [pc, #120]	; (8004f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0x76>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1c      	ldr	r2, [pc, #112]	; (8004f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0x76>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1b      	ldr	r2, [pc, #108]	; (8004f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0x76>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d115      	bne.n	8004f56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b06      	cmp	r3, #6
 8004f3a:	d015      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xb4>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f42:	d011      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f54:	e008      	b.n	8004f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e000      	b.n	8004f6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40013400 	.word	0x40013400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	00010007 	.word	0x00010007

08004f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e049      	b.n	800503a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f841 	bl	8005042 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f000 fcfa 	bl	80059cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d109      	bne.n	800507c <HAL_TIM_PWM_Start+0x24>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	bf14      	ite	ne
 8005074:	2301      	movne	r3, #1
 8005076:	2300      	moveq	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e03c      	b.n	80050f6 <HAL_TIM_PWM_Start+0x9e>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b04      	cmp	r3, #4
 8005080:	d109      	bne.n	8005096 <HAL_TIM_PWM_Start+0x3e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	bf14      	ite	ne
 800508e:	2301      	movne	r3, #1
 8005090:	2300      	moveq	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	e02f      	b.n	80050f6 <HAL_TIM_PWM_Start+0x9e>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d109      	bne.n	80050b0 <HAL_TIM_PWM_Start+0x58>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	bf14      	ite	ne
 80050a8:	2301      	movne	r3, #1
 80050aa:	2300      	moveq	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	e022      	b.n	80050f6 <HAL_TIM_PWM_Start+0x9e>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b0c      	cmp	r3, #12
 80050b4:	d109      	bne.n	80050ca <HAL_TIM_PWM_Start+0x72>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b01      	cmp	r3, #1
 80050c0:	bf14      	ite	ne
 80050c2:	2301      	movne	r3, #1
 80050c4:	2300      	moveq	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	e015      	b.n	80050f6 <HAL_TIM_PWM_Start+0x9e>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b10      	cmp	r3, #16
 80050ce:	d109      	bne.n	80050e4 <HAL_TIM_PWM_Start+0x8c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	e008      	b.n	80050f6 <HAL_TIM_PWM_Start+0x9e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	bf14      	ite	ne
 80050f0:	2301      	movne	r3, #1
 80050f2:	2300      	moveq	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e09c      	b.n	8005238 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <HAL_TIM_PWM_Start+0xb6>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800510c:	e023      	b.n	8005156 <HAL_TIM_PWM_Start+0xfe>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b04      	cmp	r3, #4
 8005112:	d104      	bne.n	800511e <HAL_TIM_PWM_Start+0xc6>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800511c:	e01b      	b.n	8005156 <HAL_TIM_PWM_Start+0xfe>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d104      	bne.n	800512e <HAL_TIM_PWM_Start+0xd6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800512c:	e013      	b.n	8005156 <HAL_TIM_PWM_Start+0xfe>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b0c      	cmp	r3, #12
 8005132:	d104      	bne.n	800513e <HAL_TIM_PWM_Start+0xe6>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800513c:	e00b      	b.n	8005156 <HAL_TIM_PWM_Start+0xfe>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b10      	cmp	r3, #16
 8005142:	d104      	bne.n	800514e <HAL_TIM_PWM_Start+0xf6>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800514c:	e003      	b.n	8005156 <HAL_TIM_PWM_Start+0xfe>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2202      	movs	r2, #2
 8005152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2201      	movs	r2, #1
 800515c:	6839      	ldr	r1, [r7, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f001 f83e 	bl	80061e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a35      	ldr	r2, [pc, #212]	; (8005240 <HAL_TIM_PWM_Start+0x1e8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_TIM_PWM_Start+0x13e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a34      	ldr	r2, [pc, #208]	; (8005244 <HAL_TIM_PWM_Start+0x1ec>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_TIM_PWM_Start+0x13e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a32      	ldr	r2, [pc, #200]	; (8005248 <HAL_TIM_PWM_Start+0x1f0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_TIM_PWM_Start+0x13e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a31      	ldr	r2, [pc, #196]	; (800524c <HAL_TIM_PWM_Start+0x1f4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_TIM_PWM_Start+0x13e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a2f      	ldr	r2, [pc, #188]	; (8005250 <HAL_TIM_PWM_Start+0x1f8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d101      	bne.n	800519a <HAL_TIM_PWM_Start+0x142>
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <HAL_TIM_PWM_Start+0x144>
 800519a:	2300      	movs	r3, #0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a22      	ldr	r2, [pc, #136]	; (8005240 <HAL_TIM_PWM_Start+0x1e8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d01d      	beq.n	80051f6 <HAL_TIM_PWM_Start+0x19e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c2:	d018      	beq.n	80051f6 <HAL_TIM_PWM_Start+0x19e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a22      	ldr	r2, [pc, #136]	; (8005254 <HAL_TIM_PWM_Start+0x1fc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_TIM_PWM_Start+0x19e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a21      	ldr	r2, [pc, #132]	; (8005258 <HAL_TIM_PWM_Start+0x200>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00e      	beq.n	80051f6 <HAL_TIM_PWM_Start+0x19e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1f      	ldr	r2, [pc, #124]	; (800525c <HAL_TIM_PWM_Start+0x204>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_TIM_PWM_Start+0x19e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a17      	ldr	r2, [pc, #92]	; (8005244 <HAL_TIM_PWM_Start+0x1ec>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_TIM_PWM_Start+0x19e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a15      	ldr	r2, [pc, #84]	; (8005248 <HAL_TIM_PWM_Start+0x1f0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d115      	bne.n	8005222 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	4b18      	ldr	r3, [pc, #96]	; (8005260 <HAL_TIM_PWM_Start+0x208>)
 80051fe:	4013      	ands	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b06      	cmp	r3, #6
 8005206:	d015      	beq.n	8005234 <HAL_TIM_PWM_Start+0x1dc>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520e:	d011      	beq.n	8005234 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005220:	e008      	b.n	8005234 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e000      	b.n	8005236 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005234:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40013400 	.word	0x40013400
 8005248:	40014000 	.word	0x40014000
 800524c:	40014400 	.word	0x40014400
 8005250:	40014800 	.word	0x40014800
 8005254:	40000400 	.word	0x40000400
 8005258:	40000800 	.word	0x40000800
 800525c:	40000c00 	.word	0x40000c00
 8005260:	00010007 	.word	0x00010007

08005264 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2200      	movs	r2, #0
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f000 ffb2 	bl	80061e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a3e      	ldr	r2, [pc, #248]	; (800537c <HAL_TIM_PWM_Stop+0x118>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d013      	beq.n	80052ae <HAL_TIM_PWM_Stop+0x4a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a3d      	ldr	r2, [pc, #244]	; (8005380 <HAL_TIM_PWM_Stop+0x11c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00e      	beq.n	80052ae <HAL_TIM_PWM_Stop+0x4a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a3b      	ldr	r2, [pc, #236]	; (8005384 <HAL_TIM_PWM_Stop+0x120>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_TIM_PWM_Stop+0x4a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a3a      	ldr	r2, [pc, #232]	; (8005388 <HAL_TIM_PWM_Stop+0x124>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIM_PWM_Stop+0x4a>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a38      	ldr	r2, [pc, #224]	; (800538c <HAL_TIM_PWM_Stop+0x128>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_PWM_Stop+0x4e>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <HAL_TIM_PWM_Stop+0x50>
 80052b2:	2300      	movs	r3, #0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d017      	beq.n	80052e8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6a1a      	ldr	r2, [r3, #32]
 80052be:	f241 1311 	movw	r3, #4369	; 0x1111
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10f      	bne.n	80052e8 <HAL_TIM_PWM_Stop+0x84>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6a1a      	ldr	r2, [r3, #32]
 80052ce:	f240 4344 	movw	r3, #1092	; 0x444
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d107      	bne.n	80052e8 <HAL_TIM_PWM_Stop+0x84>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6a1a      	ldr	r2, [r3, #32]
 80052ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10f      	bne.n	8005318 <HAL_TIM_PWM_Stop+0xb4>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	f240 4344 	movw	r3, #1092	; 0x444
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d107      	bne.n	8005318 <HAL_TIM_PWM_Stop+0xb4>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0201 	bic.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d104      	bne.n	8005328 <HAL_TIM_PWM_Stop+0xc4>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005326:	e023      	b.n	8005370 <HAL_TIM_PWM_Stop+0x10c>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b04      	cmp	r3, #4
 800532c:	d104      	bne.n	8005338 <HAL_TIM_PWM_Stop+0xd4>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005336:	e01b      	b.n	8005370 <HAL_TIM_PWM_Stop+0x10c>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b08      	cmp	r3, #8
 800533c:	d104      	bne.n	8005348 <HAL_TIM_PWM_Stop+0xe4>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005346:	e013      	b.n	8005370 <HAL_TIM_PWM_Stop+0x10c>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b0c      	cmp	r3, #12
 800534c:	d104      	bne.n	8005358 <HAL_TIM_PWM_Stop+0xf4>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005356:	e00b      	b.n	8005370 <HAL_TIM_PWM_Stop+0x10c>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b10      	cmp	r3, #16
 800535c:	d104      	bne.n	8005368 <HAL_TIM_PWM_Stop+0x104>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005366:	e003      	b.n	8005370 <HAL_TIM_PWM_Stop+0x10c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40013400 	.word	0x40013400
 8005384:	40014000 	.word	0x40014000
 8005388:	40014400 	.word	0x40014400
 800538c:	40014800 	.word	0x40014800

08005390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0202 	mvn.w	r2, #2
 80053bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fadc 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 face 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fadf 	bl	80059a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b04      	cmp	r3, #4
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0204 	mvn.w	r2, #4
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fab2 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 faa4 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fab5 	bl	80059a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b08      	cmp	r3, #8
 800544c:	d122      	bne.n	8005494 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b08      	cmp	r3, #8
 800545a:	d11b      	bne.n	8005494 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0208 	mvn.w	r2, #8
 8005464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2204      	movs	r2, #4
 800546a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa88 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
 8005480:	e005      	b.n	800548e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa7a 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fa8b 	bl	80059a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d122      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d11b      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0210 	mvn.w	r2, #16
 80054b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2208      	movs	r2, #8
 80054be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fa5e 	bl	8005990 <HAL_TIM_IC_CaptureCallback>
 80054d4:	e005      	b.n	80054e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fa50 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fa61 	bl	80059a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d10e      	bne.n	8005514 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d107      	bne.n	8005514 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0201 	mvn.w	r2, #1
 800550c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc f9f2 	bl	80018f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551e:	2b80      	cmp	r3, #128	; 0x80
 8005520:	d10e      	bne.n	8005540 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552c:	2b80      	cmp	r3, #128	; 0x80
 800552e:	d107      	bne.n	8005540 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 ff08 	bl	8006350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554e:	d10e      	bne.n	800556e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555a:	2b80      	cmp	r3, #128	; 0x80
 800555c:	d107      	bne.n	800556e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fefb 	bl	8006364 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d10e      	bne.n	800559a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005586:	2b40      	cmp	r3, #64	; 0x40
 8005588:	d107      	bne.n	800559a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fa0f 	bl	80059b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f003 0320 	and.w	r3, r3, #32
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	d10e      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d107      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f06f 0220 	mvn.w	r2, #32
 80055be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 febb 	bl	800633c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e0fd      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b14      	cmp	r3, #20
 80055f6:	f200 80f0 	bhi.w	80057da <HAL_TIM_PWM_ConfigChannel+0x20a>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005655 	.word	0x08005655
 8005604:	080057db 	.word	0x080057db
 8005608:	080057db 	.word	0x080057db
 800560c:	080057db 	.word	0x080057db
 8005610:	08005695 	.word	0x08005695
 8005614:	080057db 	.word	0x080057db
 8005618:	080057db 	.word	0x080057db
 800561c:	080057db 	.word	0x080057db
 8005620:	080056d7 	.word	0x080056d7
 8005624:	080057db 	.word	0x080057db
 8005628:	080057db 	.word	0x080057db
 800562c:	080057db 	.word	0x080057db
 8005630:	08005717 	.word	0x08005717
 8005634:	080057db 	.word	0x080057db
 8005638:	080057db 	.word	0x080057db
 800563c:	080057db 	.word	0x080057db
 8005640:	08005759 	.word	0x08005759
 8005644:	080057db 	.word	0x080057db
 8005648:	080057db 	.word	0x080057db
 800564c:	080057db 	.word	0x080057db
 8005650:	08005799 	.word	0x08005799
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fa50 	bl	8005b00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0208 	orr.w	r2, r2, #8
 800566e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0204 	bic.w	r2, r2, #4
 800567e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6999      	ldr	r1, [r3, #24]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	619a      	str	r2, [r3, #24]
      break;
 8005692:	e0a3      	b.n	80057dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fac0 	bl	8005c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6999      	ldr	r1, [r3, #24]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	021a      	lsls	r2, r3, #8
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	619a      	str	r2, [r3, #24]
      break;
 80056d4:	e082      	b.n	80057dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fb29 	bl	8005d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0208 	orr.w	r2, r2, #8
 80056f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69da      	ldr	r2, [r3, #28]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0204 	bic.w	r2, r2, #4
 8005700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69d9      	ldr	r1, [r3, #28]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	61da      	str	r2, [r3, #28]
      break;
 8005714:	e062      	b.n	80057dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fb91 	bl	8005e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69d9      	ldr	r1, [r3, #28]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	021a      	lsls	r2, r3, #8
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	61da      	str	r2, [r3, #28]
      break;
 8005756:	e041      	b.n	80057dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fbda 	bl	8005f18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0208 	orr.w	r2, r2, #8
 8005772:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0204 	bic.w	r2, r2, #4
 8005782:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005796:	e021      	b.n	80057dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fc1e 	bl	8005fe0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	021a      	lsls	r2, r3, #8
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057d8:	e000      	b.n	80057dc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80057da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop

080057f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIM_ConfigClockSource+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e0b5      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x184>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800582a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005832:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005844:	d03e      	beq.n	80058c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584a:	f200 8087 	bhi.w	800595c <HAL_TIM_ConfigClockSource+0x16c>
 800584e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005852:	f000 8085 	beq.w	8005960 <HAL_TIM_ConfigClockSource+0x170>
 8005856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585a:	d87f      	bhi.n	800595c <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b70      	cmp	r3, #112	; 0x70
 800585e:	d01a      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0xa6>
 8005860:	2b70      	cmp	r3, #112	; 0x70
 8005862:	d87b      	bhi.n	800595c <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b60      	cmp	r3, #96	; 0x60
 8005866:	d050      	beq.n	800590a <HAL_TIM_ConfigClockSource+0x11a>
 8005868:	2b60      	cmp	r3, #96	; 0x60
 800586a:	d877      	bhi.n	800595c <HAL_TIM_ConfigClockSource+0x16c>
 800586c:	2b50      	cmp	r3, #80	; 0x50
 800586e:	d03c      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0xfa>
 8005870:	2b50      	cmp	r3, #80	; 0x50
 8005872:	d873      	bhi.n	800595c <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d058      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x13a>
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d86f      	bhi.n	800595c <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b30      	cmp	r3, #48	; 0x30
 800587e:	d064      	beq.n	800594a <HAL_TIM_ConfigClockSource+0x15a>
 8005880:	2b30      	cmp	r3, #48	; 0x30
 8005882:	d86b      	bhi.n	800595c <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b20      	cmp	r3, #32
 8005886:	d060      	beq.n	800594a <HAL_TIM_ConfigClockSource+0x15a>
 8005888:	2b20      	cmp	r3, #32
 800588a:	d867      	bhi.n	800595c <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d05c      	beq.n	800594a <HAL_TIM_ConfigClockSource+0x15a>
 8005890:	2b10      	cmp	r3, #16
 8005892:	d05a      	beq.n	800594a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005894:	e062      	b.n	800595c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6899      	ldr	r1, [r3, #8]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f000 fc7b 	bl	80061a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	609a      	str	r2, [r3, #8]
      break;
 80058c2:	e04e      	b.n	8005962 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	6899      	ldr	r1, [r3, #8]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f000 fc64 	bl	80061a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058e6:	609a      	str	r2, [r3, #8]
      break;
 80058e8:	e03b      	b.n	8005962 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	6859      	ldr	r1, [r3, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f000 fbd8 	bl	80060ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2150      	movs	r1, #80	; 0x50
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fc31 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005908:	e02b      	b.n	8005962 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	6859      	ldr	r1, [r3, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	461a      	mov	r2, r3
 8005918:	f000 fbf7 	bl	800610a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2160      	movs	r1, #96	; 0x60
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fc21 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005928:	e01b      	b.n	8005962 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6859      	ldr	r1, [r3, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	461a      	mov	r2, r3
 8005938:	f000 fbb8 	bl	80060ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2140      	movs	r1, #64	; 0x40
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fc11 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005948:	e00b      	b.n	8005962 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f000 fc08 	bl	800616a <TIM_ITRx_SetConfig>
        break;
 800595a:	e002      	b.n	8005962 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800595c:	bf00      	nop
 800595e:	e000      	b.n	8005962 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005960:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a40      	ldr	r2, [pc, #256]	; (8005ae0 <TIM_Base_SetConfig+0x114>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ea:	d00f      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a3d      	ldr	r2, [pc, #244]	; (8005ae4 <TIM_Base_SetConfig+0x118>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3c      	ldr	r2, [pc, #240]	; (8005ae8 <TIM_Base_SetConfig+0x11c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3b      	ldr	r2, [pc, #236]	; (8005aec <TIM_Base_SetConfig+0x120>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a3a      	ldr	r2, [pc, #232]	; (8005af0 <TIM_Base_SetConfig+0x124>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d108      	bne.n	8005a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2f      	ldr	r2, [pc, #188]	; (8005ae0 <TIM_Base_SetConfig+0x114>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01f      	beq.n	8005a66 <TIM_Base_SetConfig+0x9a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2c:	d01b      	beq.n	8005a66 <TIM_Base_SetConfig+0x9a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a2c      	ldr	r2, [pc, #176]	; (8005ae4 <TIM_Base_SetConfig+0x118>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d017      	beq.n	8005a66 <TIM_Base_SetConfig+0x9a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2b      	ldr	r2, [pc, #172]	; (8005ae8 <TIM_Base_SetConfig+0x11c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d013      	beq.n	8005a66 <TIM_Base_SetConfig+0x9a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <TIM_Base_SetConfig+0x120>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00f      	beq.n	8005a66 <TIM_Base_SetConfig+0x9a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a29      	ldr	r2, [pc, #164]	; (8005af0 <TIM_Base_SetConfig+0x124>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00b      	beq.n	8005a66 <TIM_Base_SetConfig+0x9a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a28      	ldr	r2, [pc, #160]	; (8005af4 <TIM_Base_SetConfig+0x128>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d007      	beq.n	8005a66 <TIM_Base_SetConfig+0x9a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a27      	ldr	r2, [pc, #156]	; (8005af8 <TIM_Base_SetConfig+0x12c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d003      	beq.n	8005a66 <TIM_Base_SetConfig+0x9a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a26      	ldr	r2, [pc, #152]	; (8005afc <TIM_Base_SetConfig+0x130>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d108      	bne.n	8005a78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <TIM_Base_SetConfig+0x114>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00f      	beq.n	8005ac4 <TIM_Base_SetConfig+0xf8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a12      	ldr	r2, [pc, #72]	; (8005af0 <TIM_Base_SetConfig+0x124>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_Base_SetConfig+0xf8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a11      	ldr	r2, [pc, #68]	; (8005af4 <TIM_Base_SetConfig+0x128>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_Base_SetConfig+0xf8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a10      	ldr	r2, [pc, #64]	; (8005af8 <TIM_Base_SetConfig+0x12c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_Base_SetConfig+0xf8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0f      	ldr	r2, [pc, #60]	; (8005afc <TIM_Base_SetConfig+0x130>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d103      	bne.n	8005acc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	615a      	str	r2, [r3, #20]
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
 8005af0:	40013400 	.word	0x40013400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40014400 	.word	0x40014400
 8005afc:	40014800 	.word	0x40014800

08005b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f023 0201 	bic.w	r2, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f023 0302 	bic.w	r3, r3, #2
 8005b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a2c      	ldr	r2, [pc, #176]	; (8005c0c <TIM_OC1_SetConfig+0x10c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00f      	beq.n	8005b80 <TIM_OC1_SetConfig+0x80>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a2b      	ldr	r2, [pc, #172]	; (8005c10 <TIM_OC1_SetConfig+0x110>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_OC1_SetConfig+0x80>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a2a      	ldr	r2, [pc, #168]	; (8005c14 <TIM_OC1_SetConfig+0x114>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_OC1_SetConfig+0x80>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a29      	ldr	r2, [pc, #164]	; (8005c18 <TIM_OC1_SetConfig+0x118>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_OC1_SetConfig+0x80>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a28      	ldr	r2, [pc, #160]	; (8005c1c <TIM_OC1_SetConfig+0x11c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d10c      	bne.n	8005b9a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f023 0308 	bic.w	r3, r3, #8
 8005b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f023 0304 	bic.w	r3, r3, #4
 8005b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <TIM_OC1_SetConfig+0x10c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00f      	beq.n	8005bc2 <TIM_OC1_SetConfig+0xc2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a1a      	ldr	r2, [pc, #104]	; (8005c10 <TIM_OC1_SetConfig+0x110>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00b      	beq.n	8005bc2 <TIM_OC1_SetConfig+0xc2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a19      	ldr	r2, [pc, #100]	; (8005c14 <TIM_OC1_SetConfig+0x114>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d007      	beq.n	8005bc2 <TIM_OC1_SetConfig+0xc2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <TIM_OC1_SetConfig+0x118>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <TIM_OC1_SetConfig+0xc2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a17      	ldr	r2, [pc, #92]	; (8005c1c <TIM_OC1_SetConfig+0x11c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d111      	bne.n	8005be6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	621a      	str	r2, [r3, #32]
}
 8005c00:	bf00      	nop
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	40013400 	.word	0x40013400
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40014400 	.word	0x40014400
 8005c1c:	40014800 	.word	0x40014800

08005c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f023 0210 	bic.w	r2, r3, #16
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0320 	bic.w	r3, r3, #32
 8005c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a28      	ldr	r2, [pc, #160]	; (8005d20 <TIM_OC2_SetConfig+0x100>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC2_SetConfig+0x6c>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a27      	ldr	r2, [pc, #156]	; (8005d24 <TIM_OC2_SetConfig+0x104>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d10d      	bne.n	8005ca8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	011b      	lsls	r3, r3, #4
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a1d      	ldr	r2, [pc, #116]	; (8005d20 <TIM_OC2_SetConfig+0x100>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00f      	beq.n	8005cd0 <TIM_OC2_SetConfig+0xb0>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a1c      	ldr	r2, [pc, #112]	; (8005d24 <TIM_OC2_SetConfig+0x104>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00b      	beq.n	8005cd0 <TIM_OC2_SetConfig+0xb0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a1b      	ldr	r2, [pc, #108]	; (8005d28 <TIM_OC2_SetConfig+0x108>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d007      	beq.n	8005cd0 <TIM_OC2_SetConfig+0xb0>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a1a      	ldr	r2, [pc, #104]	; (8005d2c <TIM_OC2_SetConfig+0x10c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_OC2_SetConfig+0xb0>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a19      	ldr	r2, [pc, #100]	; (8005d30 <TIM_OC2_SetConfig+0x110>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d113      	bne.n	8005cf8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40012c00 	.word	0x40012c00
 8005d24:	40013400 	.word	0x40013400
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	40014400 	.word	0x40014400
 8005d30:	40014800 	.word	0x40014800

08005d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a27      	ldr	r2, [pc, #156]	; (8005e30 <TIM_OC3_SetConfig+0xfc>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_OC3_SetConfig+0x6a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a26      	ldr	r2, [pc, #152]	; (8005e34 <TIM_OC3_SetConfig+0x100>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d10d      	bne.n	8005dba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a1c      	ldr	r2, [pc, #112]	; (8005e30 <TIM_OC3_SetConfig+0xfc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00f      	beq.n	8005de2 <TIM_OC3_SetConfig+0xae>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a1b      	ldr	r2, [pc, #108]	; (8005e34 <TIM_OC3_SetConfig+0x100>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00b      	beq.n	8005de2 <TIM_OC3_SetConfig+0xae>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <TIM_OC3_SetConfig+0x104>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <TIM_OC3_SetConfig+0xae>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <TIM_OC3_SetConfig+0x108>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_OC3_SetConfig+0xae>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a18      	ldr	r2, [pc, #96]	; (8005e40 <TIM_OC3_SetConfig+0x10c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d113      	bne.n	8005e0a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	621a      	str	r2, [r3, #32]
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	031b      	lsls	r3, r3, #12
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a18      	ldr	r2, [pc, #96]	; (8005f04 <TIM_OC4_SetConfig+0xc0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00f      	beq.n	8005ec8 <TIM_OC4_SetConfig+0x84>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a17      	ldr	r2, [pc, #92]	; (8005f08 <TIM_OC4_SetConfig+0xc4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00b      	beq.n	8005ec8 <TIM_OC4_SetConfig+0x84>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a16      	ldr	r2, [pc, #88]	; (8005f0c <TIM_OC4_SetConfig+0xc8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d007      	beq.n	8005ec8 <TIM_OC4_SetConfig+0x84>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a15      	ldr	r2, [pc, #84]	; (8005f10 <TIM_OC4_SetConfig+0xcc>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <TIM_OC4_SetConfig+0x84>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <TIM_OC4_SetConfig+0xd0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d109      	bne.n	8005edc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	019b      	lsls	r3, r3, #6
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40013400 	.word	0x40013400
 8005f0c:	40014000 	.word	0x40014000
 8005f10:	40014400 	.word	0x40014400
 8005f14:	40014800 	.word	0x40014800

08005f18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	041b      	lsls	r3, r3, #16
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <TIM_OC5_SetConfig+0xb4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00f      	beq.n	8005f92 <TIM_OC5_SetConfig+0x7a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a16      	ldr	r2, [pc, #88]	; (8005fd0 <TIM_OC5_SetConfig+0xb8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00b      	beq.n	8005f92 <TIM_OC5_SetConfig+0x7a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a15      	ldr	r2, [pc, #84]	; (8005fd4 <TIM_OC5_SetConfig+0xbc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d007      	beq.n	8005f92 <TIM_OC5_SetConfig+0x7a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a14      	ldr	r2, [pc, #80]	; (8005fd8 <TIM_OC5_SetConfig+0xc0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_OC5_SetConfig+0x7a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <TIM_OC5_SetConfig+0xc4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d109      	bne.n	8005fa6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	621a      	str	r2, [r3, #32]
}
 8005fc0:	bf00      	nop
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40013400 	.word	0x40013400
 8005fd4:	40014000 	.word	0x40014000
 8005fd8:	40014400 	.word	0x40014400
 8005fdc:	40014800 	.word	0x40014800

08005fe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800600e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	051b      	lsls	r3, r3, #20
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	4313      	orrs	r3, r2
 8006032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a18      	ldr	r2, [pc, #96]	; (8006098 <TIM_OC6_SetConfig+0xb8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00f      	beq.n	800605c <TIM_OC6_SetConfig+0x7c>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a17      	ldr	r2, [pc, #92]	; (800609c <TIM_OC6_SetConfig+0xbc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00b      	beq.n	800605c <TIM_OC6_SetConfig+0x7c>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a16      	ldr	r2, [pc, #88]	; (80060a0 <TIM_OC6_SetConfig+0xc0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d007      	beq.n	800605c <TIM_OC6_SetConfig+0x7c>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a15      	ldr	r2, [pc, #84]	; (80060a4 <TIM_OC6_SetConfig+0xc4>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_OC6_SetConfig+0x7c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <TIM_OC6_SetConfig+0xc8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d109      	bne.n	8006070 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006062:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	029b      	lsls	r3, r3, #10
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	621a      	str	r2, [r3, #32]
}
 800608a:	bf00      	nop
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	40012c00 	.word	0x40012c00
 800609c:	40013400 	.word	0x40013400
 80060a0:	40014000 	.word	0x40014000
 80060a4:	40014400 	.word	0x40014400
 80060a8:	40014800 	.word	0x40014800

080060ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f023 0201 	bic.w	r2, r3, #1
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f023 030a 	bic.w	r3, r3, #10
 80060e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800610a:	b480      	push	{r7}
 800610c:	b087      	sub	sp, #28
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f023 0210 	bic.w	r2, r3, #16
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	031b      	lsls	r3, r3, #12
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	4313      	orrs	r3, r2
 800613e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006146:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006180:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	f043 0307 	orr.w	r3, r3, #7
 800618c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	609a      	str	r2, [r3, #8]
}
 8006194:	bf00      	nop
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	021a      	lsls	r2, r3, #8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	609a      	str	r2, [r3, #8]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	2201      	movs	r2, #1
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1a      	ldr	r2, [r3, #32]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	43db      	mvns	r3, r3
 8006202:	401a      	ands	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a1a      	ldr	r2, [r3, #32]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	fa01 f303 	lsl.w	r3, r1, r3
 8006218:	431a      	orrs	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	621a      	str	r2, [r3, #32]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006240:	2302      	movs	r3, #2
 8006242:	e068      	b.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2e      	ldr	r2, [pc, #184]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d004      	beq.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a2d      	ldr	r2, [pc, #180]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d108      	bne.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800627e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1e      	ldr	r2, [pc, #120]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01d      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b6:	d018      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1b      	ldr	r2, [pc, #108]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1a      	ldr	r2, [pc, #104]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a18      	ldr	r2, [pc, #96]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a13      	ldr	r2, [pc, #76]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a14      	ldr	r2, [pc, #80]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d10c      	bne.n	8006304 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40013400 	.word	0x40013400
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800
 8006334:	40000c00 	.word	0x40000c00
 8006338:	40014000 	.word	0x40014000

0800633c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006378:	b480      	push	{r7}
 800637a:	b08b      	sub	sp, #44	; 0x2c
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	fa93 f3a3 	rbit	r3, r3
 8006392:	613b      	str	r3, [r7, #16]
  return result;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800639e:	2320      	movs	r3, #32
 80063a0:	e003      	b.n	80063aa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	fab3 f383 	clz	r3, r3
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	2103      	movs	r1, #3
 80063ae:	fa01 f303 	lsl.w	r3, r1, r3
 80063b2:	43db      	mvns	r3, r3
 80063b4:	401a      	ands	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	fa93 f3a3 	rbit	r3, r3
 80063c0:	61fb      	str	r3, [r7, #28]
  return result;
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80063cc:	2320      	movs	r3, #32
 80063ce:	e003      	b.n	80063d8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	fab3 f383 	clz	r3, r3
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	fa01 f303 	lsl.w	r3, r1, r3
 80063e0:	431a      	orrs	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	601a      	str	r2, [r3, #0]
}
 80063e6:	bf00      	nop
 80063e8:	372c      	adds	r7, #44	; 0x2c
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	60f8      	str	r0, [r7, #12]
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	43db      	mvns	r3, r3
 8006406:	401a      	ands	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	fb01 f303 	mul.w	r3, r1, r3
 8006410:	431a      	orrs	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	605a      	str	r2, [r3, #4]
}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006422:	b480      	push	{r7}
 8006424:	b08b      	sub	sp, #44	; 0x2c
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	fa93 f3a3 	rbit	r3, r3
 800643c:	613b      	str	r3, [r7, #16]
  return result;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006448:	2320      	movs	r3, #32
 800644a:	e003      	b.n	8006454 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	fab3 f383 	clz	r3, r3
 8006452:	b2db      	uxtb	r3, r3
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	2103      	movs	r1, #3
 8006458:	fa01 f303 	lsl.w	r3, r1, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	fa93 f3a3 	rbit	r3, r3
 800646a:	61fb      	str	r3, [r7, #28]
  return result;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006476:	2320      	movs	r3, #32
 8006478:	e003      	b.n	8006482 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	fab3 f383 	clz	r3, r3
 8006480:	b2db      	uxtb	r3, r3
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	fa01 f303 	lsl.w	r3, r1, r3
 800648a:	431a      	orrs	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006490:	bf00      	nop
 8006492:	372c      	adds	r7, #44	; 0x2c
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800649c:	b480      	push	{r7}
 800649e:	b08b      	sub	sp, #44	; 0x2c
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	fa93 f3a3 	rbit	r3, r3
 80064b6:	613b      	str	r3, [r7, #16]
  return result;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80064c2:	2320      	movs	r3, #32
 80064c4:	e003      	b.n	80064ce <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	fab3 f383 	clz	r3, r3
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	2103      	movs	r1, #3
 80064d2:	fa01 f303 	lsl.w	r3, r1, r3
 80064d6:	43db      	mvns	r3, r3
 80064d8:	401a      	ands	r2, r3
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	fa93 f3a3 	rbit	r3, r3
 80064e4:	61fb      	str	r3, [r7, #28]
  return result;
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80064f0:	2320      	movs	r3, #32
 80064f2:	e003      	b.n	80064fc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	fab3 f383 	clz	r3, r3
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	fa01 f303 	lsl.w	r3, r1, r3
 8006504:	431a      	orrs	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	60da      	str	r2, [r3, #12]
}
 800650a:	bf00      	nop
 800650c:	372c      	adds	r7, #44	; 0x2c
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006516:	b480      	push	{r7}
 8006518:	b08b      	sub	sp, #44	; 0x2c
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	fa93 f3a3 	rbit	r3, r3
 8006530:	613b      	str	r3, [r7, #16]
  return result;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800653c:	2320      	movs	r3, #32
 800653e:	e003      	b.n	8006548 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	fab3 f383 	clz	r3, r3
 8006546:	b2db      	uxtb	r3, r3
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	210f      	movs	r1, #15
 800654c:	fa01 f303 	lsl.w	r3, r1, r3
 8006550:	43db      	mvns	r3, r3
 8006552:	401a      	ands	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	fa93 f3a3 	rbit	r3, r3
 800655e:	61fb      	str	r3, [r7, #28]
  return result;
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800656a:	2320      	movs	r3, #32
 800656c:	e003      	b.n	8006576 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	fab3 f383 	clz	r3, r3
 8006574:	b2db      	uxtb	r3, r3
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	fa01 f303 	lsl.w	r3, r1, r3
 800657e:	431a      	orrs	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006584:	bf00      	nop
 8006586:	372c      	adds	r7, #44	; 0x2c
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006590:	b480      	push	{r7}
 8006592:	b08b      	sub	sp, #44	; 0x2c
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	fa93 f3a3 	rbit	r3, r3
 80065ac:	613b      	str	r3, [r7, #16]
  return result;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80065b8:	2320      	movs	r3, #32
 80065ba:	e003      	b.n	80065c4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	fab3 f383 	clz	r3, r3
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	210f      	movs	r1, #15
 80065c8:	fa01 f303 	lsl.w	r3, r1, r3
 80065cc:	43db      	mvns	r3, r3
 80065ce:	401a      	ands	r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	fa93 f3a3 	rbit	r3, r3
 80065dc:	61fb      	str	r3, [r7, #28]
  return result;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80065e8:	2320      	movs	r3, #32
 80065ea:	e003      	b.n	80065f4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	fab3 f383 	clz	r3, r3
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	fa01 f303 	lsl.w	r3, r1, r3
 80065fc:	431a      	orrs	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006602:	bf00      	nop
 8006604:	372c      	adds	r7, #44	; 0x2c
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b088      	sub	sp, #32
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	fa93 f3a3 	rbit	r3, r3
 8006624:	60fb      	str	r3, [r7, #12]
  return result;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <LL_GPIO_Init+0x26>
    return 32U;
 8006630:	2320      	movs	r3, #32
 8006632:	e003      	b.n	800663c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	fab3 f383 	clz	r3, r3
 800663a:	b2db      	uxtb	r3, r3
 800663c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800663e:	e048      	b.n	80066d2 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	2101      	movs	r1, #1
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	fa01 f303 	lsl.w	r3, r1, r3
 800664c:	4013      	ands	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d03a      	beq.n	80066cc <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d003      	beq.n	8006666 <LL_GPIO_Init+0x58>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d10e      	bne.n	8006684 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	461a      	mov	r2, r3
 800666c:	69b9      	ldr	r1, [r7, #24]
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff fed7 	bl	8006422 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	6819      	ldr	r1, [r3, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	461a      	mov	r2, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff feb7 	bl	80063f2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	461a      	mov	r2, r3
 800668a:	69b9      	ldr	r1, [r7, #24]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff ff05 	bl	800649c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d111      	bne.n	80066be <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2bff      	cmp	r3, #255	; 0xff
 800669e:	d807      	bhi.n	80066b0 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	461a      	mov	r2, r3
 80066a6:	69b9      	ldr	r1, [r7, #24]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff ff34 	bl	8006516 <LL_GPIO_SetAFPin_0_7>
 80066ae:	e006      	b.n	80066be <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	461a      	mov	r2, r3
 80066b6:	69b9      	ldr	r1, [r7, #24]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff ff69 	bl	8006590 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	461a      	mov	r2, r3
 80066c4:	69b9      	ldr	r1, [r7, #24]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff fe56 	bl	8006378 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	3301      	adds	r3, #1
 80066d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1af      	bne.n	8006640 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
	...

080066ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80066f0:	4b07      	ldr	r3, [pc, #28]	; (8006710 <LL_RCC_HSI_IsReady+0x24>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fc:	d101      	bne.n	8006702 <LL_RCC_HSI_IsReady+0x16>
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <LL_RCC_HSI_IsReady+0x18>
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40021000 	.word	0x40021000

08006714 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8006718:	4b07      	ldr	r3, [pc, #28]	; (8006738 <LL_RCC_LSE_IsReady+0x24>)
 800671a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	d101      	bne.n	800672a <LL_RCC_LSE_IsReady+0x16>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <LL_RCC_LSE_IsReady+0x18>
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40021000 	.word	0x40021000

0800673c <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8006740:	4b06      	ldr	r3, [pc, #24]	; (800675c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b08      	cmp	r3, #8
 800674a:	d101      	bne.n	8006750 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	40021000 	.word	0x40021000

08006760 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006764:	4b04      	ldr	r3, [pc, #16]	; (8006778 <LL_RCC_MSI_GetRange+0x18>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800676c:	4618      	mov	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40021000 	.word	0x40021000

0800677c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006780:	4b04      	ldr	r3, [pc, #16]	; (8006794 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8006782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006786:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800678a:	4618      	mov	r0, r3
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	40021000 	.word	0x40021000

08006798 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800679c:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <LL_RCC_GetSysClkSource+0x18>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 030c 	and.w	r3, r3, #12
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40021000 	.word	0x40021000

080067b4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80067b8:	4b04      	ldr	r3, [pc, #16]	; (80067cc <LL_RCC_GetAHBPrescaler+0x18>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40021000 	.word	0x40021000

080067d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80067d4:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80067dc:	4618      	mov	r0, r3
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40021000 	.word	0x40021000

080067ec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80067f0:	4b04      	ldr	r3, [pc, #16]	; (8006804 <LL_RCC_GetAPB2Prescaler+0x18>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	40021000 	.word	0x40021000

08006808 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8006810:	4b06      	ldr	r3, [pc, #24]	; (800682c <LL_RCC_GetUSARTClockSource+0x24>)
 8006812:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	401a      	ands	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	041b      	lsls	r3, r3, #16
 800681e:	4313      	orrs	r3, r2
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	40021000 	.word	0x40021000

08006830 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8006838:	4b06      	ldr	r3, [pc, #24]	; (8006854 <LL_RCC_GetUARTClockSource+0x24>)
 800683a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	401a      	ands	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	041b      	lsls	r3, r3, #16
 8006846:	4313      	orrs	r3, r2
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	40021000 	.word	0x40021000

08006858 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800685c:	4b04      	ldr	r3, [pc, #16]	; (8006870 <LL_RCC_PLL_GetMainSource+0x18>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f003 0303 	and.w	r3, r3, #3
}
 8006864:	4618      	mov	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40021000 	.word	0x40021000

08006874 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006878:	4b04      	ldr	r3, [pc, #16]	; (800688c <LL_RCC_PLL_GetN+0x18>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	0a1b      	lsrs	r3, r3, #8
 800687e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006882:	4618      	mov	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	40021000 	.word	0x40021000

08006890 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006894:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <LL_RCC_PLL_GetR+0x18>)
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800689c:	4618      	mov	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40021000 	.word	0x40021000

080068ac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <LL_RCC_PLL_GetDivider+0x18>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40021000 	.word	0x40021000

080068c8 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d137      	bne.n	800694a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff ff94 	bl	8006808 <LL_RCC_GetUSARTClockSource>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	f200 80b3 	bhi.w	8006a52 <LL_RCC_GetUSARTClockFreq+0x18a>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006933 	.word	0x08006933
 80068f8:	08006905 	.word	0x08006905
 80068fc:	0800690d 	.word	0x0800690d
 8006900:	0800691f 	.word	0x0800691f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006904:	f000 f95c 	bl	8006bc0 <RCC_GetSystemClockFreq>
 8006908:	60f8      	str	r0, [r7, #12]
        break;
 800690a:	e0b5      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800690c:	f7ff feee 	bl	80066ec <LL_RCC_HSI_IsReady>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 809f 	beq.w	8006a56 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8006918:	4b5a      	ldr	r3, [pc, #360]	; (8006a84 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800691a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800691c:	e09b      	b.n	8006a56 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800691e:	f7ff fef9 	bl	8006714 <LL_RCC_LSE_IsReady>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8098 	beq.w	8006a5a <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800692a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006930:	e093      	b.n	8006a5a <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006932:	f000 f945 	bl	8006bc0 <RCC_GetSystemClockFreq>
 8006936:	4603      	mov	r3, r0
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f9d1 	bl	8006ce0 <RCC_GetHCLKClockFreq>
 800693e:	4603      	mov	r3, r0
 8006940:	4618      	mov	r0, r3
 8006942:	f000 f9f7 	bl	8006d34 <RCC_GetPCLK2ClockFreq>
 8006946:	60f8      	str	r0, [r7, #12]
        break;
 8006948:	e096      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b0c      	cmp	r3, #12
 800694e:	d146      	bne.n	80069de <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff ff59 	bl	8006808 <LL_RCC_GetUSARTClockSource>
 8006956:	4603      	mov	r3, r0
 8006958:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800695c:	2b0c      	cmp	r3, #12
 800695e:	d87e      	bhi.n	8006a5e <LL_RCC_GetUSARTClockFreq+0x196>
 8006960:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	080069c7 	.word	0x080069c7
 800696c:	08006a5f 	.word	0x08006a5f
 8006970:	08006a5f 	.word	0x08006a5f
 8006974:	08006a5f 	.word	0x08006a5f
 8006978:	0800699d 	.word	0x0800699d
 800697c:	08006a5f 	.word	0x08006a5f
 8006980:	08006a5f 	.word	0x08006a5f
 8006984:	08006a5f 	.word	0x08006a5f
 8006988:	080069a5 	.word	0x080069a5
 800698c:	08006a5f 	.word	0x08006a5f
 8006990:	08006a5f 	.word	0x08006a5f
 8006994:	08006a5f 	.word	0x08006a5f
 8006998:	080069b5 	.word	0x080069b5
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800699c:	f000 f910 	bl	8006bc0 <RCC_GetSystemClockFreq>
 80069a0:	60f8      	str	r0, [r7, #12]
        break;
 80069a2:	e069      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80069a4:	f7ff fea2 	bl	80066ec <LL_RCC_HSI_IsReady>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d059      	beq.n	8006a62 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80069ae:	4b35      	ldr	r3, [pc, #212]	; (8006a84 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80069b0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80069b2:	e056      	b.n	8006a62 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80069b4:	f7ff feae 	bl	8006714 <LL_RCC_LSE_IsReady>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d053      	beq.n	8006a66 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80069be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069c2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80069c4:	e04f      	b.n	8006a66 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80069c6:	f000 f8fb 	bl	8006bc0 <RCC_GetSystemClockFreq>
 80069ca:	4603      	mov	r3, r0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 f987 	bl	8006ce0 <RCC_GetHCLKClockFreq>
 80069d2:	4603      	mov	r3, r0
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 f999 	bl	8006d0c <RCC_GetPCLK1ClockFreq>
 80069da:	60f8      	str	r0, [r7, #12]
        break;
 80069dc:	e04c      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b30      	cmp	r3, #48	; 0x30
 80069e2:	d142      	bne.n	8006a6a <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ff0f 	bl	8006808 <LL_RCC_GetUSARTClockSource>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80069f0:	d01a      	beq.n	8006a28 <LL_RCC_GetUSARTClockFreq+0x160>
 80069f2:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80069f6:	d83a      	bhi.n	8006a6e <LL_RCC_GetUSARTClockFreq+0x1a6>
 80069f8:	4a23      	ldr	r2, [pc, #140]	; (8006a88 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00c      	beq.n	8006a18 <LL_RCC_GetUSARTClockFreq+0x150>
 80069fe:	4a22      	ldr	r2, [pc, #136]	; (8006a88 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d834      	bhi.n	8006a6e <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006a04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a08:	d017      	beq.n	8006a3a <LL_RCC_GetUSARTClockFreq+0x172>
 8006a0a:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d12e      	bne.n	8006a6e <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8006a10:	f000 f8d6 	bl	8006bc0 <RCC_GetSystemClockFreq>
 8006a14:	60f8      	str	r0, [r7, #12]
          break;
 8006a16:	e02f      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8006a18:	f7ff fe68 	bl	80066ec <LL_RCC_HSI_IsReady>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d027      	beq.n	8006a72 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 8006a22:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006a24:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006a26:	e024      	b.n	8006a72 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8006a28:	f7ff fe74 	bl	8006714 <LL_RCC_LSE_IsReady>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d021      	beq.n	8006a76 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 8006a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a36:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006a38:	e01d      	b.n	8006a76 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006a3a:	f000 f8c1 	bl	8006bc0 <RCC_GetSystemClockFreq>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 f94d 	bl	8006ce0 <RCC_GetHCLKClockFreq>
 8006a46:	4603      	mov	r3, r0
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 f95f 	bl	8006d0c <RCC_GetPCLK1ClockFreq>
 8006a4e:	60f8      	str	r0, [r7, #12]
          break;
 8006a50:	e012      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006a52:	bf00      	nop
 8006a54:	e010      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006a56:	bf00      	nop
 8006a58:	e00e      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006a5a:	bf00      	nop
 8006a5c:	e00c      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006a5e:	bf00      	nop
 8006a60:	e00a      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006a62:	bf00      	nop
 8006a64:	e008      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 8006a66:	bf00      	nop
 8006a68:	e006      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 8006a6a:	bf00      	nop
 8006a6c:	e004      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006a6e:	bf00      	nop
 8006a70:	e002      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006a72:	bf00      	nop
 8006a74:	e000      	b.n	8006a78 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006a76:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006a78:	68fb      	ldr	r3, [r7, #12]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	00f42400 	.word	0x00f42400
 8006a88:	00300020 	.word	0x00300020
 8006a8c:	00300010 	.word	0x00300010

08006a90 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8006aa0:	d136      	bne.n	8006b10 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fec4 	bl	8006830 <LL_RCC_GetUARTClockSource>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006aae:	d01a      	beq.n	8006ae6 <LL_RCC_GetUARTClockFreq+0x56>
 8006ab0:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006ab4:	d82e      	bhi.n	8006b14 <LL_RCC_GetUARTClockFreq+0x84>
 8006ab6:	4a3d      	ldr	r2, [pc, #244]	; (8006bac <LL_RCC_GetUARTClockFreq+0x11c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00c      	beq.n	8006ad6 <LL_RCC_GetUARTClockFreq+0x46>
 8006abc:	4a3b      	ldr	r2, [pc, #236]	; (8006bac <LL_RCC_GetUARTClockFreq+0x11c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d828      	bhi.n	8006b14 <LL_RCC_GetUARTClockFreq+0x84>
 8006ac2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ac6:	d017      	beq.n	8006af8 <LL_RCC_GetUARTClockFreq+0x68>
 8006ac8:	4a39      	ldr	r2, [pc, #228]	; (8006bb0 <LL_RCC_GetUARTClockFreq+0x120>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d122      	bne.n	8006b14 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006ace:	f000 f877 	bl	8006bc0 <RCC_GetSystemClockFreq>
 8006ad2:	60f8      	str	r0, [r7, #12]
        break;
 8006ad4:	e023      	b.n	8006b1e <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006ad6:	f7ff fe09 	bl	80066ec <LL_RCC_HSI_IsReady>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01b      	beq.n	8006b18 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8006ae0:	4b34      	ldr	r3, [pc, #208]	; (8006bb4 <LL_RCC_GetUARTClockFreq+0x124>)
 8006ae2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006ae4:	e018      	b.n	8006b18 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006ae6:	f7ff fe15 	bl	8006714 <LL_RCC_LSE_IsReady>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d015      	beq.n	8006b1c <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8006af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006af4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006af6:	e011      	b.n	8006b1c <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006af8:	f000 f862 	bl	8006bc0 <RCC_GetSystemClockFreq>
 8006afc:	4603      	mov	r3, r0
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 f8ee 	bl	8006ce0 <RCC_GetHCLKClockFreq>
 8006b04:	4603      	mov	r3, r0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f900 	bl	8006d0c <RCC_GetPCLK1ClockFreq>
 8006b0c:	60f8      	str	r0, [r7, #12]
        break;
 8006b0e:	e006      	b.n	8006b1e <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 8006b10:	bf00      	nop
 8006b12:	e004      	b.n	8006b1e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006b14:	bf00      	nop
 8006b16:	e002      	b.n	8006b1e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006b18:	bf00      	nop
 8006b1a:	e000      	b.n	8006b1e <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 8006b1c:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b24:	d136      	bne.n	8006b94 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff fe82 	bl	8006830 <LL_RCC_GetUARTClockSource>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006b32:	d01a      	beq.n	8006b6a <LL_RCC_GetUARTClockFreq+0xda>
 8006b34:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8006b38:	d82e      	bhi.n	8006b98 <LL_RCC_GetUARTClockFreq+0x108>
 8006b3a:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <LL_RCC_GetUARTClockFreq+0x128>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00c      	beq.n	8006b5a <LL_RCC_GetUARTClockFreq+0xca>
 8006b40:	4a1d      	ldr	r2, [pc, #116]	; (8006bb8 <LL_RCC_GetUARTClockFreq+0x128>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d828      	bhi.n	8006b98 <LL_RCC_GetUARTClockFreq+0x108>
 8006b46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b4a:	d017      	beq.n	8006b7c <LL_RCC_GetUARTClockFreq+0xec>
 8006b4c:	4a1b      	ldr	r2, [pc, #108]	; (8006bbc <LL_RCC_GetUARTClockFreq+0x12c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d122      	bne.n	8006b98 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8006b52:	f000 f835 	bl	8006bc0 <RCC_GetSystemClockFreq>
 8006b56:	60f8      	str	r0, [r7, #12]
        break;
 8006b58:	e023      	b.n	8006ba2 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006b5a:	f7ff fdc7 	bl	80066ec <LL_RCC_HSI_IsReady>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01b      	beq.n	8006b9c <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 8006b64:	4b13      	ldr	r3, [pc, #76]	; (8006bb4 <LL_RCC_GetUARTClockFreq+0x124>)
 8006b66:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006b68:	e018      	b.n	8006b9c <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006b6a:	f7ff fdd3 	bl	8006714 <LL_RCC_LSE_IsReady>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d015      	beq.n	8006ba0 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8006b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b78:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006b7a:	e011      	b.n	8006ba0 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006b7c:	f000 f820 	bl	8006bc0 <RCC_GetSystemClockFreq>
 8006b80:	4603      	mov	r3, r0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 f8ac 	bl	8006ce0 <RCC_GetHCLKClockFreq>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 f8be 	bl	8006d0c <RCC_GetPCLK1ClockFreq>
 8006b90:	60f8      	str	r0, [r7, #12]
        break;
 8006b92:	e006      	b.n	8006ba2 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8006b94:	bf00      	nop
 8006b96:	e004      	b.n	8006ba2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006b98:	bf00      	nop
 8006b9a:	e002      	b.n	8006ba2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006b9c:	bf00      	nop
 8006b9e:	e000      	b.n	8006ba2 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006ba0:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	00c00080 	.word	0x00c00080
 8006bb0:	00c00040 	.word	0x00c00040
 8006bb4:	00f42400 	.word	0x00f42400
 8006bb8:	03000200 	.word	0x03000200
 8006bbc:	03000100 	.word	0x03000100

08006bc0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006bc6:	f7ff fde7 	bl	8006798 <LL_RCC_GetSysClkSource>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b0c      	cmp	r3, #12
 8006bce:	d851      	bhi.n	8006c74 <RCC_GetSystemClockFreq+0xb4>
 8006bd0:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <RCC_GetSystemClockFreq+0x18>)
 8006bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd6:	bf00      	nop
 8006bd8:	08006c0d 	.word	0x08006c0d
 8006bdc:	08006c75 	.word	0x08006c75
 8006be0:	08006c75 	.word	0x08006c75
 8006be4:	08006c75 	.word	0x08006c75
 8006be8:	08006c61 	.word	0x08006c61
 8006bec:	08006c75 	.word	0x08006c75
 8006bf0:	08006c75 	.word	0x08006c75
 8006bf4:	08006c75 	.word	0x08006c75
 8006bf8:	08006c67 	.word	0x08006c67
 8006bfc:	08006c75 	.word	0x08006c75
 8006c00:	08006c75 	.word	0x08006c75
 8006c04:	08006c75 	.word	0x08006c75
 8006c08:	08006c6d 	.word	0x08006c6d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006c0c:	f7ff fd96 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d111      	bne.n	8006c3a <RCC_GetSystemClockFreq+0x7a>
 8006c16:	f7ff fd91 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d004      	beq.n	8006c2a <RCC_GetSystemClockFreq+0x6a>
 8006c20:	f7ff fd9e 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006c24:	4603      	mov	r3, r0
 8006c26:	0a1b      	lsrs	r3, r3, #8
 8006c28:	e003      	b.n	8006c32 <RCC_GetSystemClockFreq+0x72>
 8006c2a:	f7ff fda7 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <RCC_GetSystemClockFreq+0x114>)
 8006c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c38:	e010      	b.n	8006c5c <RCC_GetSystemClockFreq+0x9c>
 8006c3a:	f7ff fd7f 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <RCC_GetSystemClockFreq+0x8e>
 8006c44:	f7ff fd8c 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	091b      	lsrs	r3, r3, #4
 8006c4c:	e003      	b.n	8006c56 <RCC_GetSystemClockFreq+0x96>
 8006c4e:	f7ff fd95 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006c52:	4603      	mov	r3, r0
 8006c54:	091b      	lsrs	r3, r3, #4
 8006c56:	4a1f      	ldr	r2, [pc, #124]	; (8006cd4 <RCC_GetSystemClockFreq+0x114>)
 8006c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c5c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006c5e:	e033      	b.n	8006cc8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006c60:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <RCC_GetSystemClockFreq+0x118>)
 8006c62:	607b      	str	r3, [r7, #4]
      break;
 8006c64:	e030      	b.n	8006cc8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006c66:	4b1d      	ldr	r3, [pc, #116]	; (8006cdc <RCC_GetSystemClockFreq+0x11c>)
 8006c68:	607b      	str	r3, [r7, #4]
      break;
 8006c6a:	e02d      	b.n	8006cc8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006c6c:	f000 f876 	bl	8006d5c <RCC_PLL_GetFreqDomain_SYS>
 8006c70:	6078      	str	r0, [r7, #4]
      break;
 8006c72:	e029      	b.n	8006cc8 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006c74:	f7ff fd62 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d111      	bne.n	8006ca2 <RCC_GetSystemClockFreq+0xe2>
 8006c7e:	f7ff fd5d 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <RCC_GetSystemClockFreq+0xd2>
 8006c88:	f7ff fd6a 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	e003      	b.n	8006c9a <RCC_GetSystemClockFreq+0xda>
 8006c92:	f7ff fd73 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006c96:	4603      	mov	r3, r0
 8006c98:	0a1b      	lsrs	r3, r3, #8
 8006c9a:	4a0e      	ldr	r2, [pc, #56]	; (8006cd4 <RCC_GetSystemClockFreq+0x114>)
 8006c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca0:	e010      	b.n	8006cc4 <RCC_GetSystemClockFreq+0x104>
 8006ca2:	f7ff fd4b 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d004      	beq.n	8006cb6 <RCC_GetSystemClockFreq+0xf6>
 8006cac:	f7ff fd58 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	e003      	b.n	8006cbe <RCC_GetSystemClockFreq+0xfe>
 8006cb6:	f7ff fd61 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	091b      	lsrs	r3, r3, #4
 8006cbe:	4a05      	ldr	r2, [pc, #20]	; (8006cd4 <RCC_GetSystemClockFreq+0x114>)
 8006cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006cc6:	bf00      	nop
  }

  return frequency;
 8006cc8:	687b      	ldr	r3, [r7, #4]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	08009cf8 	.word	0x08009cf8
 8006cd8:	00f42400 	.word	0x00f42400
 8006cdc:	007a1200 	.word	0x007a1200

08006ce0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006ce8:	f7ff fd64 	bl	80067b4 <LL_RCC_GetAHBPrescaler>
 8006cec:	4603      	mov	r3, r0
 8006cee:	091b      	lsrs	r3, r3, #4
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	4a04      	ldr	r2, [pc, #16]	; (8006d08 <RCC_GetHCLKClockFreq+0x28>)
 8006cf6:	5cd3      	ldrb	r3, [r2, r3]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	40d3      	lsrs	r3, r2
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	08009ce0 	.word	0x08009ce0

08006d0c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006d14:	f7ff fd5c 	bl	80067d0 <LL_RCC_GetAPB1Prescaler>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	0a1b      	lsrs	r3, r3, #8
 8006d1c:	4a04      	ldr	r2, [pc, #16]	; (8006d30 <RCC_GetPCLK1ClockFreq+0x24>)
 8006d1e:	5cd3      	ldrb	r3, [r2, r3]
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	40d3      	lsrs	r3, r2
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	08009cf0 	.word	0x08009cf0

08006d34 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006d3c:	f7ff fd56 	bl	80067ec <LL_RCC_GetAPB2Prescaler>
 8006d40:	4603      	mov	r3, r0
 8006d42:	0adb      	lsrs	r3, r3, #11
 8006d44:	4a04      	ldr	r2, [pc, #16]	; (8006d58 <RCC_GetPCLK2ClockFreq+0x24>)
 8006d46:	5cd3      	ldrb	r3, [r2, r3]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	40d3      	lsrs	r3, r2
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	08009cf0 	.word	0x08009cf0

08006d5c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006d5c:	b590      	push	{r4, r7, lr}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006d62:	f7ff fd79 	bl	8006858 <LL_RCC_PLL_GetMainSource>
 8006d66:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d036      	beq.n	8006ddc <RCC_PLL_GetFreqDomain_SYS+0x80>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d836      	bhi.n	8006de2 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d003      	beq.n	8006d82 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d02a      	beq.n	8006dd6 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8006d80:	e02f      	b.n	8006de2 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006d82:	f7ff fcdb 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d111      	bne.n	8006db0 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006d8c:	f7ff fcd6 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006d96:	f7ff fce3 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	0a1b      	lsrs	r3, r3, #8
 8006d9e:	e003      	b.n	8006da8 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8006da0:	f7ff fcec 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006da4:	4603      	mov	r3, r0
 8006da6:	0a1b      	lsrs	r3, r3, #8
 8006da8:	4a2f      	ldr	r2, [pc, #188]	; (8006e68 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dae:	e010      	b.n	8006dd2 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8006db0:	f7ff fcc4 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8006dba:	f7ff fcd1 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	091b      	lsrs	r3, r3, #4
 8006dc2:	e003      	b.n	8006dcc <RCC_PLL_GetFreqDomain_SYS+0x70>
 8006dc4:	f7ff fcda 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	091b      	lsrs	r3, r3, #4
 8006dcc:	4a26      	ldr	r2, [pc, #152]	; (8006e68 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006dd4:	e02f      	b.n	8006e36 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006dd6:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8006dd8:	607b      	str	r3, [r7, #4]
      break;
 8006dda:	e02c      	b.n	8006e36 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006ddc:	4b24      	ldr	r3, [pc, #144]	; (8006e70 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8006dde:	607b      	str	r3, [r7, #4]
      break;
 8006de0:	e029      	b.n	8006e36 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006de2:	f7ff fcab 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d111      	bne.n	8006e10 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8006dec:	f7ff fca6 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d004      	beq.n	8006e00 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8006df6:	f7ff fcb3 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	e003      	b.n	8006e08 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8006e00:	f7ff fcbc 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006e04:	4603      	mov	r3, r0
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e0e:	e010      	b.n	8006e32 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8006e10:	f7ff fc94 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8006e1a:	f7ff fca1 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	091b      	lsrs	r3, r3, #4
 8006e22:	e003      	b.n	8006e2c <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8006e24:	f7ff fcaa 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	091b      	lsrs	r3, r3, #4
 8006e2c:	4a0e      	ldr	r2, [pc, #56]	; (8006e68 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e32:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006e34:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006e36:	f7ff fd39 	bl	80068ac <LL_RCC_PLL_GetDivider>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	3301      	adds	r3, #1
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	fbb2 f4f3 	udiv	r4, r2, r3
 8006e46:	f7ff fd15 	bl	8006874 <LL_RCC_PLL_GetN>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	fb03 f404 	mul.w	r4, r3, r4
 8006e50:	f7ff fd1e 	bl	8006890 <LL_RCC_PLL_GetR>
 8006e54:	4603      	mov	r3, r0
 8006e56:	0e5b      	lsrs	r3, r3, #25
 8006e58:	3301      	adds	r3, #1
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd90      	pop	{r4, r7, pc}
 8006e68:	08009cf8 	.word	0x08009cf8
 8006e6c:	00f42400 	.word	0x00f42400
 8006e70:	007a1200 	.word	0x007a1200

08006e74 <LL_USART_IsEnabled>:
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d101      	bne.n	8006e8c <LL_USART_IsEnabled+0x18>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <LL_USART_IsEnabled+0x1a>
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <LL_USART_SetStopBitsLength>:
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	605a      	str	r2, [r3, #4]
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <LL_USART_SetHWFlowCtrl>:
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	609a      	str	r2, [r3, #8]
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <LL_USART_SetBaudRate>:
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b087      	sub	sp, #28
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]
 8006ef2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006efa:	d11a      	bne.n	8006f32 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	005a      	lsls	r2, r3, #1
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	085b      	lsrs	r3, r3, #1
 8006f04:	441a      	add	r2, r3
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006f16:	4013      	ands	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	60da      	str	r2, [r3, #12]
}
 8006f30:	e00a      	b.n	8006f48 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	085a      	lsrs	r2, r3, #1
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	441a      	add	r2, r3
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	60da      	str	r2, [r3, #12]
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff ff84 	bl	8006e74 <LL_USART_IsEnabled>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d15b      	bne.n	800702a <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4b2f      	ldr	r3, [pc, #188]	; (8007034 <LL_USART_Init+0xe0>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	6851      	ldr	r1, [r2, #4]
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	68d2      	ldr	r2, [r2, #12]
 8006f82:	4311      	orrs	r1, r2
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	6912      	ldr	r2, [r2, #16]
 8006f88:	4311      	orrs	r1, r2
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	6992      	ldr	r2, [r2, #24]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff ff7c 	bl	8006e9a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff ff89 	bl	8006ec0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a21      	ldr	r2, [pc, #132]	; (8007038 <LL_USART_Init+0xe4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d104      	bne.n	8006fc0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006fb6:	2003      	movs	r0, #3
 8006fb8:	f7ff fc86 	bl	80068c8 <LL_RCC_GetUSARTClockFreq>
 8006fbc:	60b8      	str	r0, [r7, #8]
 8006fbe:	e023      	b.n	8007008 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a1e      	ldr	r2, [pc, #120]	; (800703c <LL_USART_Init+0xe8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d104      	bne.n	8006fd2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006fc8:	200c      	movs	r0, #12
 8006fca:	f7ff fc7d 	bl	80068c8 <LL_RCC_GetUSARTClockFreq>
 8006fce:	60b8      	str	r0, [r7, #8]
 8006fd0:	e01a      	b.n	8007008 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a1a      	ldr	r2, [pc, #104]	; (8007040 <LL_USART_Init+0xec>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d104      	bne.n	8006fe4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8006fda:	2030      	movs	r0, #48	; 0x30
 8006fdc:	f7ff fc74 	bl	80068c8 <LL_RCC_GetUSARTClockFreq>
 8006fe0:	60b8      	str	r0, [r7, #8]
 8006fe2:	e011      	b.n	8007008 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a17      	ldr	r2, [pc, #92]	; (8007044 <LL_USART_Init+0xf0>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d104      	bne.n	8006ff6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8006fec:	20c0      	movs	r0, #192	; 0xc0
 8006fee:	f7ff fd4f 	bl	8006a90 <LL_RCC_GetUARTClockFreq>
 8006ff2:	60b8      	str	r0, [r7, #8]
 8006ff4:	e008      	b.n	8007008 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a13      	ldr	r2, [pc, #76]	; (8007048 <LL_USART_Init+0xf4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d104      	bne.n	8007008 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8006ffe:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007002:	f7ff fd45 	bl	8006a90 <LL_RCC_GetUARTClockFreq>
 8007006:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00d      	beq.n	800702a <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d009      	beq.n	800702a <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff ff5e 	bl	8006ee6 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	efff69f3 	.word	0xefff69f3
 8007038:	40013800 	.word	0x40013800
 800703c:	40004400 	.word	0x40004400
 8007040:	40004800 	.word	0x40004800
 8007044:	40004c00 	.word	0x40004c00
 8007048:	40005000 	.word	0x40005000

0800704c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800705a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800705e:	2b84      	cmp	r3, #132	; 0x84
 8007060:	d005      	beq.n	800706e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007062:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4413      	add	r3, r2
 800706a:	3303      	adds	r3, #3
 800706c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800706e:	68fb      	ldr	r3, [r7, #12]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007080:	f000 ffac 	bl	8007fdc <vTaskStartScheduler>
  
  return osOK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	bd80      	pop	{r7, pc}

0800708a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800708a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800708c:	b089      	sub	sp, #36	; 0x24
 800708e:	af04      	add	r7, sp, #16
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d020      	beq.n	80070de <osThreadCreate+0x54>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01c      	beq.n	80070de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685c      	ldr	r4, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681d      	ldr	r5, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691e      	ldr	r6, [r3, #16]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff ffc8 	bl	800704c <makeFreeRtosPriority>
 80070bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070c6:	9202      	str	r2, [sp, #8]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	9100      	str	r1, [sp, #0]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	4632      	mov	r2, r6
 80070d0:	4629      	mov	r1, r5
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fdba 	bl	8007c4c <xTaskCreateStatic>
 80070d8:	4603      	mov	r3, r0
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	e01c      	b.n	8007118 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685c      	ldr	r4, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070ea:	b29e      	uxth	r6, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff ffaa 	bl	800704c <makeFreeRtosPriority>
 80070f8:	4602      	mov	r2, r0
 80070fa:	f107 030c 	add.w	r3, r7, #12
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	9200      	str	r2, [sp, #0]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	4632      	mov	r2, r6
 8007106:	4629      	mov	r1, r5
 8007108:	4620      	mov	r0, r4
 800710a:	f000 fdfc 	bl	8007d06 <xTaskCreate>
 800710e:	4603      	mov	r3, r0
 8007110:	2b01      	cmp	r3, #1
 8007112:	d001      	beq.n	8007118 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007114:	2300      	movs	r3, #0
 8007116:	e000      	b.n	800711a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007118:	68fb      	ldr	r3, [r7, #12]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007122 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <osDelay+0x16>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	e000      	b.n	800713a <osDelay+0x18>
 8007138:	2301      	movs	r3, #1
 800713a:	4618      	mov	r0, r3
 800713c:	f000 ff1a 	bl	8007f74 <vTaskDelay>
  
  return osOK;
 8007140:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f103 0208 	add.w	r2, r3, #8
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007162:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f103 0208 	add.w	r2, r3, #8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f103 0208 	add.w	r2, r3, #8
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	601a      	str	r2, [r3, #0]
}
 80071e0:	bf00      	nop
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007202:	d103      	bne.n	800720c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	e00c      	b.n	8007226 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3308      	adds	r3, #8
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	e002      	b.n	800721a <vListInsert+0x2e>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	429a      	cmp	r2, r3
 8007224:	d2f6      	bcs.n	8007214 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	601a      	str	r2, [r3, #0]
}
 8007252:	bf00      	nop
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6892      	ldr	r2, [r2, #8]
 8007274:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6852      	ldr	r2, [r2, #4]
 800727e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	429a      	cmp	r2, r3
 8007288:	d103      	bne.n	8007292 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	1e5a      	subs	r2, r3, #1
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072da:	bf00      	nop
 80072dc:	e7fe      	b.n	80072dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072de:	f001 fcb1 	bl	8008c44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072ee:	fb01 f303 	mul.w	r3, r1, r3
 80072f2:	441a      	add	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730e:	3b01      	subs	r3, #1
 8007310:	68f9      	ldr	r1, [r7, #12]
 8007312:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007314:	fb01 f303 	mul.w	r3, r1, r3
 8007318:	441a      	add	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	22ff      	movs	r2, #255	; 0xff
 8007322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	22ff      	movs	r2, #255	; 0xff
 800732a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d114      	bne.n	800735e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01a      	beq.n	8007372 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3310      	adds	r3, #16
 8007340:	4618      	mov	r0, r3
 8007342:	f001 f88d 	bl	8008460 <xTaskRemoveFromEventList>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d012      	beq.n	8007372 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800734c:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <xQueueGenericReset+0xcc>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	e009      	b.n	8007372 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3310      	adds	r3, #16
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fef1 	bl	800714a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3324      	adds	r3, #36	; 0x24
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff feec 	bl	800714a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007372:	f001 fc97 	bl	8008ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007376:	2301      	movs	r3, #1
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	e000ed04 	.word	0xe000ed04

08007384 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08a      	sub	sp, #40	; 0x28
 8007388:	af02      	add	r7, sp, #8
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10a      	bne.n	80073ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	613b      	str	r3, [r7, #16]
}
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	fb02 f303 	mul.w	r3, r2, r3
 80073b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	3348      	adds	r3, #72	; 0x48
 80073bc:	4618      	mov	r0, r3
 80073be:	f001 fd63 	bl	8008e88 <pvPortMalloc>
 80073c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d011      	beq.n	80073ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	3348      	adds	r3, #72	; 0x48
 80073d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073dc:	79fa      	ldrb	r2, [r7, #7]
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	4613      	mov	r3, r2
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f805 	bl	80073f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073ee:	69bb      	ldr	r3, [r7, #24]
	}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3720      	adds	r7, #32
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d103      	bne.n	8007414 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	e002      	b.n	800741a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007426:	2101      	movs	r1, #1
 8007428:	69b8      	ldr	r0, [r7, #24]
 800742a:	f7ff ff43 	bl	80072b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08e      	sub	sp, #56	; 0x38
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007446:	2300      	movs	r3, #0
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <xQueueGenericSend+0x32>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d103      	bne.n	8007478 <xQueueGenericSend+0x40>
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <xQueueGenericSend+0x44>
 8007478:	2301      	movs	r3, #1
 800747a:	e000      	b.n	800747e <xQueueGenericSend+0x46>
 800747c:	2300      	movs	r3, #0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <xQueueGenericSend+0x60>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d103      	bne.n	80074a6 <xQueueGenericSend+0x6e>
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d101      	bne.n	80074aa <xQueueGenericSend+0x72>
 80074a6:	2301      	movs	r3, #1
 80074a8:	e000      	b.n	80074ac <xQueueGenericSend+0x74>
 80074aa:	2300      	movs	r3, #0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	623b      	str	r3, [r7, #32]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074c6:	f001 f987 	bl	80087d8 <xTaskGetSchedulerState>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d102      	bne.n	80074d6 <xQueueGenericSend+0x9e>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <xQueueGenericSend+0xa2>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <xQueueGenericSend+0xa4>
 80074da:	2300      	movs	r3, #0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	61fb      	str	r3, [r7, #28]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074f6:	f001 fba5 	bl	8008c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007502:	429a      	cmp	r2, r3
 8007504:	d302      	bcc.n	800750c <xQueueGenericSend+0xd4>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b02      	cmp	r3, #2
 800750a:	d129      	bne.n	8007560 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	68b9      	ldr	r1, [r7, #8]
 8007510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007512:	f000 fa8b 	bl	8007a2c <prvCopyDataToQueue>
 8007516:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2b00      	cmp	r3, #0
 800751e:	d010      	beq.n	8007542 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	3324      	adds	r3, #36	; 0x24
 8007524:	4618      	mov	r0, r3
 8007526:	f000 ff9b 	bl	8008460 <xTaskRemoveFromEventList>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d013      	beq.n	8007558 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007530:	4b3f      	ldr	r3, [pc, #252]	; (8007630 <xQueueGenericSend+0x1f8>)
 8007532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	e00a      	b.n	8007558 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007548:	4b39      	ldr	r3, [pc, #228]	; (8007630 <xQueueGenericSend+0x1f8>)
 800754a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007558:	f001 fba4 	bl	8008ca4 <vPortExitCritical>
				return pdPASS;
 800755c:	2301      	movs	r3, #1
 800755e:	e063      	b.n	8007628 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d103      	bne.n	800756e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007566:	f001 fb9d 	bl	8008ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800756a:	2300      	movs	r3, #0
 800756c:	e05c      	b.n	8007628 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800756e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007570:	2b00      	cmp	r3, #0
 8007572:	d106      	bne.n	8007582 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007574:	f107 0314 	add.w	r3, r7, #20
 8007578:	4618      	mov	r0, r3
 800757a:	f000 ffd3 	bl	8008524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800757e:	2301      	movs	r3, #1
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007582:	f001 fb8f 	bl	8008ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007586:	f000 fd89 	bl	800809c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800758a:	f001 fb5b 	bl	8008c44 <vPortEnterCritical>
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007594:	b25b      	sxtb	r3, r3
 8007596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800759a:	d103      	bne.n	80075a4 <xQueueGenericSend+0x16c>
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075aa:	b25b      	sxtb	r3, r3
 80075ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075b0:	d103      	bne.n	80075ba <xQueueGenericSend+0x182>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075ba:	f001 fb73 	bl	8008ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075be:	1d3a      	adds	r2, r7, #4
 80075c0:	f107 0314 	add.w	r3, r7, #20
 80075c4:	4611      	mov	r1, r2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 ffc2 	bl	8008550 <xTaskCheckForTimeOut>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d124      	bne.n	800761c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075d4:	f000 fb22 	bl	8007c1c <prvIsQueueFull>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d018      	beq.n	8007610 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	3310      	adds	r3, #16
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 ff16 	bl	8008418 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ee:	f000 faad 	bl	8007b4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075f2:	f000 fd61 	bl	80080b8 <xTaskResumeAll>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f47f af7c 	bne.w	80074f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <xQueueGenericSend+0x1f8>)
 8007600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	e772      	b.n	80074f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007612:	f000 fa9b 	bl	8007b4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007616:	f000 fd4f 	bl	80080b8 <xTaskResumeAll>
 800761a:	e76c      	b.n	80074f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800761c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800761e:	f000 fa95 	bl	8007b4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007622:	f000 fd49 	bl	80080b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007626:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007628:	4618      	mov	r0, r3
 800762a:	3738      	adds	r7, #56	; 0x38
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b090      	sub	sp, #64	; 0x40
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d103      	bne.n	8007670 <xQueueGenericSendFromISR+0x3c>
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <xQueueGenericSendFromISR+0x40>
 8007670:	2301      	movs	r3, #1
 8007672:	e000      	b.n	8007676 <xQueueGenericSendFromISR+0x42>
 8007674:	2300      	movs	r3, #0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10a      	bne.n	8007690 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d103      	bne.n	800769e <xQueueGenericSendFromISR+0x6a>
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <xQueueGenericSendFromISR+0x6e>
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <xQueueGenericSendFromISR+0x70>
 80076a2:	2300      	movs	r3, #0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	623b      	str	r3, [r7, #32]
}
 80076ba:	bf00      	nop
 80076bc:	e7fe      	b.n	80076bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076be:	f001 fba3 	bl	8008e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076c2:	f3ef 8211 	mrs	r2, BASEPRI
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	61fa      	str	r2, [r7, #28]
 80076d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d302      	bcc.n	80076f0 <xQueueGenericSendFromISR+0xbc>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d12f      	bne.n	8007750 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	68b9      	ldr	r1, [r7, #8]
 8007704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007706:	f000 f991 	bl	8007a2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800770a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800770e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007712:	d112      	bne.n	800773a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	2b00      	cmp	r3, #0
 800771a:	d016      	beq.n	800774a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	3324      	adds	r3, #36	; 0x24
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fe9d 	bl	8008460 <xTaskRemoveFromEventList>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00e      	beq.n	800774a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00b      	beq.n	800774a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	e007      	b.n	800774a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800773a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800773e:	3301      	adds	r3, #1
 8007740:	b2db      	uxtb	r3, r3
 8007742:	b25a      	sxtb	r2, r3
 8007744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800774a:	2301      	movs	r3, #1
 800774c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800774e:	e001      	b.n	8007754 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007750:	2300      	movs	r3, #0
 8007752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007756:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800775e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007762:	4618      	mov	r0, r3
 8007764:	3740      	adds	r7, #64	; 0x40
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08c      	sub	sp, #48	; 0x30
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007778:	2300      	movs	r3, #0
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <xQueueReceive+0x30>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	623b      	str	r3, [r7, #32]
}
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d103      	bne.n	80077aa <xQueueReceive+0x3e>
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <xQueueReceive+0x42>
 80077aa:	2301      	movs	r3, #1
 80077ac:	e000      	b.n	80077b0 <xQueueReceive+0x44>
 80077ae:	2300      	movs	r3, #0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <xQueueReceive+0x5e>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	61fb      	str	r3, [r7, #28]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077ca:	f001 f805 	bl	80087d8 <xTaskGetSchedulerState>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d102      	bne.n	80077da <xQueueReceive+0x6e>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <xQueueReceive+0x72>
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <xQueueReceive+0x74>
 80077de:	2300      	movs	r3, #0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <xQueueReceive+0x8e>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	61bb      	str	r3, [r7, #24]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077fa:	f001 fa23 	bl	8008c44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	2b00      	cmp	r3, #0
 8007808:	d01f      	beq.n	800784a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800780e:	f000 f977 	bl	8007b00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	1e5a      	subs	r2, r3, #1
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00f      	beq.n	8007842 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	3310      	adds	r3, #16
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fe1a 	bl	8008460 <xTaskRemoveFromEventList>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007832:	4b3d      	ldr	r3, [pc, #244]	; (8007928 <xQueueReceive+0x1bc>)
 8007834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007842:	f001 fa2f 	bl	8008ca4 <vPortExitCritical>
				return pdPASS;
 8007846:	2301      	movs	r3, #1
 8007848:	e069      	b.n	800791e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d103      	bne.n	8007858 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007850:	f001 fa28 	bl	8008ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007854:	2300      	movs	r3, #0
 8007856:	e062      	b.n	800791e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800785e:	f107 0310 	add.w	r3, r7, #16
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fe5e 	bl	8008524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800786c:	f001 fa1a 	bl	8008ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007870:	f000 fc14 	bl	800809c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007874:	f001 f9e6 	bl	8008c44 <vPortEnterCritical>
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800787e:	b25b      	sxtb	r3, r3
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007884:	d103      	bne.n	800788e <xQueueReceive+0x122>
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007894:	b25b      	sxtb	r3, r3
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800789a:	d103      	bne.n	80078a4 <xQueueReceive+0x138>
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078a4:	f001 f9fe 	bl	8008ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078a8:	1d3a      	adds	r2, r7, #4
 80078aa:	f107 0310 	add.w	r3, r7, #16
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fe4d 	bl	8008550 <xTaskCheckForTimeOut>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d123      	bne.n	8007904 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078be:	f000 f997 	bl	8007bf0 <prvIsQueueEmpty>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d017      	beq.n	80078f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	4611      	mov	r1, r2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fda1 	bl	8008418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d8:	f000 f938 	bl	8007b4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078dc:	f000 fbec 	bl	80080b8 <xTaskResumeAll>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d189      	bne.n	80077fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80078e6:	4b10      	ldr	r3, [pc, #64]	; (8007928 <xQueueReceive+0x1bc>)
 80078e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	e780      	b.n	80077fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078fa:	f000 f927 	bl	8007b4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078fe:	f000 fbdb 	bl	80080b8 <xTaskResumeAll>
 8007902:	e77a      	b.n	80077fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007906:	f000 f921 	bl	8007b4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800790a:	f000 fbd5 	bl	80080b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800790e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007910:	f000 f96e 	bl	8007bf0 <prvIsQueueEmpty>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	f43f af6f 	beq.w	80077fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800791c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800791e:	4618      	mov	r0, r3
 8007920:	3730      	adds	r7, #48	; 0x30
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08e      	sub	sp, #56	; 0x38
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	623b      	str	r3, [r7, #32]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d103      	bne.n	8007966 <xQueueReceiveFromISR+0x3a>
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <xQueueReceiveFromISR+0x3e>
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <xQueueReceiveFromISR+0x40>
 800796a:	2300      	movs	r3, #0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	61fb      	str	r3, [r7, #28]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007986:	f001 fa3f 	bl	8008e08 <vPortValidateInterruptPriority>
	__asm volatile
 800798a:	f3ef 8211 	mrs	r2, BASEPRI
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	61ba      	str	r2, [r7, #24]
 80079a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80079a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d02f      	beq.n	8007a12 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079c0:	f000 f89e 	bl	8007b00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	1e5a      	subs	r2, r3, #1
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80079cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d4:	d112      	bne.n	80079fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d016      	beq.n	8007a0c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	3310      	adds	r3, #16
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 fd3c 	bl	8008460 <xTaskRemoveFromEventList>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00e      	beq.n	8007a0c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	e007      	b.n	8007a0c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80079fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a00:	3301      	adds	r3, #1
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	b25a      	sxtb	r2, r3
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a10:	e001      	b.n	8007a16 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f383 8811 	msr	BASEPRI, r3
}
 8007a20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3738      	adds	r7, #56	; 0x38
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10d      	bne.n	8007a66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d14d      	bne.n	8007aee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fedc 	bl	8008814 <xTaskPriorityDisinherit>
 8007a5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	609a      	str	r2, [r3, #8]
 8007a64:	e043      	b.n	8007aee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d119      	bne.n	8007aa0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6858      	ldr	r0, [r3, #4]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	461a      	mov	r2, r3
 8007a76:	68b9      	ldr	r1, [r7, #8]
 8007a78:	f001 fc1e 	bl	80092b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	441a      	add	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d32b      	bcc.n	8007aee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	605a      	str	r2, [r3, #4]
 8007a9e:	e026      	b.n	8007aee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	68d8      	ldr	r0, [r3, #12]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	f001 fc04 	bl	80092b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	425b      	negs	r3, r3
 8007aba:	441a      	add	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d207      	bcs.n	8007adc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad4:	425b      	negs	r3, r3
 8007ad6:	441a      	add	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d105      	bne.n	8007aee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007af6:	697b      	ldr	r3, [r7, #20]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d018      	beq.n	8007b44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	441a      	add	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d303      	bcc.n	8007b34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68d9      	ldr	r1, [r3, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6838      	ldr	r0, [r7, #0]
 8007b40:	f001 fbba 	bl	80092b8 <memcpy>
	}
}
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b54:	f001 f876 	bl	8008c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b60:	e011      	b.n	8007b86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d012      	beq.n	8007b90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3324      	adds	r3, #36	; 0x24
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fc76 	bl	8008460 <xTaskRemoveFromEventList>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b7a:	f000 fd4b 	bl	8008614 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	dce9      	bgt.n	8007b62 <prvUnlockQueue+0x16>
 8007b8e:	e000      	b.n	8007b92 <prvUnlockQueue+0x46>
					break;
 8007b90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	22ff      	movs	r2, #255	; 0xff
 8007b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b9a:	f001 f883 	bl	8008ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b9e:	f001 f851 	bl	8008c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ba8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007baa:	e011      	b.n	8007bd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d012      	beq.n	8007bda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3310      	adds	r3, #16
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fc51 	bl	8008460 <xTaskRemoveFromEventList>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007bc4:	f000 fd26 	bl	8008614 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dce9      	bgt.n	8007bac <prvUnlockQueue+0x60>
 8007bd8:	e000      	b.n	8007bdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007bda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	22ff      	movs	r2, #255	; 0xff
 8007be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007be4:	f001 f85e 	bl	8008ca4 <vPortExitCritical>
}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bf8:	f001 f824 	bl	8008c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d102      	bne.n	8007c0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c04:	2301      	movs	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e001      	b.n	8007c0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c0e:	f001 f849 	bl	8008ca4 <vPortExitCritical>

	return xReturn;
 8007c12:	68fb      	ldr	r3, [r7, #12]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c24:	f001 f80e 	bl	8008c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d102      	bne.n	8007c3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c34:	2301      	movs	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	e001      	b.n	8007c3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c3e:	f001 f831 	bl	8008ca4 <vPortExitCritical>

	return xReturn;
 8007c42:	68fb      	ldr	r3, [r7, #12]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08e      	sub	sp, #56	; 0x38
 8007c50:	af04      	add	r7, sp, #16
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	623b      	str	r3, [r7, #32]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <xTaskCreateStatic+0x46>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	61fb      	str	r3, [r7, #28]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c92:	2354      	movs	r3, #84	; 0x54
 8007c94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	2b54      	cmp	r3, #84	; 0x54
 8007c9a:	d00a      	beq.n	8007cb2 <xTaskCreateStatic+0x66>
	__asm volatile
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	61bb      	str	r3, [r7, #24]
}
 8007cae:	bf00      	nop
 8007cb0:	e7fe      	b.n	8007cb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01e      	beq.n	8007cf8 <xTaskCreateStatic+0xac>
 8007cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01b      	beq.n	8007cf8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	2202      	movs	r2, #2
 8007cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9303      	str	r3, [sp, #12]
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	9302      	str	r3, [sp, #8]
 8007cda:	f107 0314 	add.w	r3, r7, #20
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f850 	bl	8007d90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cf2:	f000 f8d5 	bl	8007ea0 <prvAddNewTaskToReadyList>
 8007cf6:	e001      	b.n	8007cfc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007cfc:	697b      	ldr	r3, [r7, #20]
	}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3728      	adds	r7, #40	; 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b08c      	sub	sp, #48	; 0x30
 8007d0a:	af04      	add	r7, sp, #16
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	603b      	str	r3, [r7, #0]
 8007d12:	4613      	mov	r3, r2
 8007d14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f001 f8b4 	bl	8008e88 <pvPortMalloc>
 8007d20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00e      	beq.n	8007d46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d28:	2054      	movs	r0, #84	; 0x54
 8007d2a:	f001 f8ad 	bl	8008e88 <pvPortMalloc>
 8007d2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8007d3c:	e005      	b.n	8007d4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d3e:	6978      	ldr	r0, [r7, #20]
 8007d40:	f001 f96e 	bl	8009020 <vPortFree>
 8007d44:	e001      	b.n	8007d4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d017      	beq.n	8007d80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d58:	88fa      	ldrh	r2, [r7, #6]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9303      	str	r3, [sp, #12]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	9302      	str	r3, [sp, #8]
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 f80e 	bl	8007d90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d74:	69f8      	ldr	r0, [r7, #28]
 8007d76:	f000 f893 	bl	8007ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	61bb      	str	r3, [r7, #24]
 8007d7e:	e002      	b.n	8007d86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d86:	69bb      	ldr	r3, [r7, #24]
	}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007da8:	3b01      	subs	r3, #1
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f023 0307 	bic.w	r3, r3, #7
 8007db6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	617b      	str	r3, [r7, #20]
}
 8007dd4:	bf00      	nop
 8007dd6:	e7fe      	b.n	8007dd6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01f      	beq.n	8007e1e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dde:	2300      	movs	r3, #0
 8007de0:	61fb      	str	r3, [r7, #28]
 8007de2:	e012      	b.n	8007e0a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	4413      	add	r3, r2
 8007dea:	7819      	ldrb	r1, [r3, #0]
 8007dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	4413      	add	r3, r2
 8007df2:	3334      	adds	r3, #52	; 0x34
 8007df4:	460a      	mov	r2, r1
 8007df6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d006      	beq.n	8007e12 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	3301      	adds	r3, #1
 8007e08:	61fb      	str	r3, [r7, #28]
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	2b0f      	cmp	r3, #15
 8007e0e:	d9e9      	bls.n	8007de4 <prvInitialiseNewTask+0x54>
 8007e10:	e000      	b.n	8007e14 <prvInitialiseNewTask+0x84>
			{
				break;
 8007e12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e1c:	e003      	b.n	8007e26 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e28:	2b06      	cmp	r3, #6
 8007e2a:	d901      	bls.n	8007e30 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e2c:	2306      	movs	r3, #6
 8007e2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e3a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3e:	2200      	movs	r2, #0
 8007e40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	3304      	adds	r3, #4
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff f99f 	bl	800718a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	3318      	adds	r3, #24
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff f99a 	bl	800718a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	f1c3 0207 	rsb	r2, r3, #7
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	2200      	movs	r2, #0
 8007e70:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	68f9      	ldr	r1, [r7, #12]
 8007e7e:	69b8      	ldr	r0, [r7, #24]
 8007e80:	f000 fdb4 	bl	80089ec <pxPortInitialiseStack>
 8007e84:	4602      	mov	r2, r0
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e96:	bf00      	nop
 8007e98:	3720      	adds	r7, #32
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ea8:	f000 fecc 	bl	8008c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007eac:	4b2a      	ldr	r3, [pc, #168]	; (8007f58 <prvAddNewTaskToReadyList+0xb8>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	4a29      	ldr	r2, [pc, #164]	; (8007f58 <prvAddNewTaskToReadyList+0xb8>)
 8007eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007eb6:	4b29      	ldr	r3, [pc, #164]	; (8007f5c <prvAddNewTaskToReadyList+0xbc>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d109      	bne.n	8007ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ebe:	4a27      	ldr	r2, [pc, #156]	; (8007f5c <prvAddNewTaskToReadyList+0xbc>)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ec4:	4b24      	ldr	r3, [pc, #144]	; (8007f58 <prvAddNewTaskToReadyList+0xb8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d110      	bne.n	8007eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ecc:	f000 fbc6 	bl	800865c <prvInitialiseTaskLists>
 8007ed0:	e00d      	b.n	8007eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ed2:	4b23      	ldr	r3, [pc, #140]	; (8007f60 <prvAddNewTaskToReadyList+0xc0>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007eda:	4b20      	ldr	r3, [pc, #128]	; (8007f5c <prvAddNewTaskToReadyList+0xbc>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d802      	bhi.n	8007eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ee8:	4a1c      	ldr	r2, [pc, #112]	; (8007f5c <prvAddNewTaskToReadyList+0xbc>)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007eee:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <prvAddNewTaskToReadyList+0xc4>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	4a1b      	ldr	r2, [pc, #108]	; (8007f64 <prvAddNewTaskToReadyList+0xc4>)
 8007ef6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	2201      	movs	r2, #1
 8007efe:	409a      	lsls	r2, r3
 8007f00:	4b19      	ldr	r3, [pc, #100]	; (8007f68 <prvAddNewTaskToReadyList+0xc8>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	4a18      	ldr	r2, [pc, #96]	; (8007f68 <prvAddNewTaskToReadyList+0xc8>)
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4a15      	ldr	r2, [pc, #84]	; (8007f6c <prvAddNewTaskToReadyList+0xcc>)
 8007f18:	441a      	add	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f7ff f93f 	bl	80071a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f26:	f000 febd 	bl	8008ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	; (8007f60 <prvAddNewTaskToReadyList+0xc0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00e      	beq.n	8007f50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f32:	4b0a      	ldr	r3, [pc, #40]	; (8007f5c <prvAddNewTaskToReadyList+0xbc>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d207      	bcs.n	8007f50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f40:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <prvAddNewTaskToReadyList+0xd0>)
 8007f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	200003f4 	.word	0x200003f4
 8007f5c:	200002f4 	.word	0x200002f4
 8007f60:	20000400 	.word	0x20000400
 8007f64:	20000410 	.word	0x20000410
 8007f68:	200003fc 	.word	0x200003fc
 8007f6c:	200002f8 	.word	0x200002f8
 8007f70:	e000ed04 	.word	0xe000ed04

08007f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d017      	beq.n	8007fb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f86:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <vTaskDelay+0x60>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <vTaskDelay+0x30>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	60bb      	str	r3, [r7, #8]
}
 8007fa0:	bf00      	nop
 8007fa2:	e7fe      	b.n	8007fa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fa4:	f000 f87a 	bl	800809c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fa8:	2100      	movs	r1, #0
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fcb8 	bl	8008920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fb0:	f000 f882 	bl	80080b8 <xTaskResumeAll>
 8007fb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d107      	bne.n	8007fcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007fbc:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <vTaskDelay+0x64>)
 8007fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fcc:	bf00      	nop
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	2000041c 	.word	0x2000041c
 8007fd8:	e000ed04 	.word	0xe000ed04

08007fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08a      	sub	sp, #40	; 0x28
 8007fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fea:	463a      	mov	r2, r7
 8007fec:	1d39      	adds	r1, r7, #4
 8007fee:	f107 0308 	add.w	r3, r7, #8
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7f8 fc42 	bl	800087c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	9202      	str	r2, [sp, #8]
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	2300      	movs	r3, #0
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	2300      	movs	r3, #0
 8008008:	460a      	mov	r2, r1
 800800a:	491e      	ldr	r1, [pc, #120]	; (8008084 <vTaskStartScheduler+0xa8>)
 800800c:	481e      	ldr	r0, [pc, #120]	; (8008088 <vTaskStartScheduler+0xac>)
 800800e:	f7ff fe1d 	bl	8007c4c <xTaskCreateStatic>
 8008012:	4603      	mov	r3, r0
 8008014:	4a1d      	ldr	r2, [pc, #116]	; (800808c <vTaskStartScheduler+0xb0>)
 8008016:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008018:	4b1c      	ldr	r3, [pc, #112]	; (800808c <vTaskStartScheduler+0xb0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008020:	2301      	movs	r3, #1
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	e001      	b.n	800802a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008026:	2300      	movs	r3, #0
 8008028:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d116      	bne.n	800805e <vTaskStartScheduler+0x82>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	613b      	str	r3, [r7, #16]
}
 8008042:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008044:	4b12      	ldr	r3, [pc, #72]	; (8008090 <vTaskStartScheduler+0xb4>)
 8008046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800804a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800804c:	4b11      	ldr	r3, [pc, #68]	; (8008094 <vTaskStartScheduler+0xb8>)
 800804e:	2201      	movs	r2, #1
 8008050:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008052:	4b11      	ldr	r3, [pc, #68]	; (8008098 <vTaskStartScheduler+0xbc>)
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008058:	f000 fd52 	bl	8008b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800805c:	e00e      	b.n	800807c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008064:	d10a      	bne.n	800807c <vTaskStartScheduler+0xa0>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	60fb      	str	r3, [r7, #12]
}
 8008078:	bf00      	nop
 800807a:	e7fe      	b.n	800807a <vTaskStartScheduler+0x9e>
}
 800807c:	bf00      	nop
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	08009cd8 	.word	0x08009cd8
 8008088:	0800862d 	.word	0x0800862d
 800808c:	20000418 	.word	0x20000418
 8008090:	20000414 	.word	0x20000414
 8008094:	20000400 	.word	0x20000400
 8008098:	200003f8 	.word	0x200003f8

0800809c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800809c:	b480      	push	{r7}
 800809e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080a0:	4b04      	ldr	r3, [pc, #16]	; (80080b4 <vTaskSuspendAll+0x18>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3301      	adds	r3, #1
 80080a6:	4a03      	ldr	r2, [pc, #12]	; (80080b4 <vTaskSuspendAll+0x18>)
 80080a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080aa:	bf00      	nop
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	2000041c 	.word	0x2000041c

080080b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080c6:	4b41      	ldr	r3, [pc, #260]	; (80081cc <xTaskResumeAll+0x114>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	603b      	str	r3, [r7, #0]
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080e4:	f000 fdae 	bl	8008c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080e8:	4b38      	ldr	r3, [pc, #224]	; (80081cc <xTaskResumeAll+0x114>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	4a37      	ldr	r2, [pc, #220]	; (80081cc <xTaskResumeAll+0x114>)
 80080f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f2:	4b36      	ldr	r3, [pc, #216]	; (80081cc <xTaskResumeAll+0x114>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d161      	bne.n	80081be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080fa:	4b35      	ldr	r3, [pc, #212]	; (80081d0 <xTaskResumeAll+0x118>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d05d      	beq.n	80081be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008102:	e02e      	b.n	8008162 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008104:	4b33      	ldr	r3, [pc, #204]	; (80081d4 <xTaskResumeAll+0x11c>)
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3318      	adds	r3, #24
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff f8a4 	bl	800725e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3304      	adds	r3, #4
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff f89f 	bl	800725e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	2201      	movs	r2, #1
 8008126:	409a      	lsls	r2, r3
 8008128:	4b2b      	ldr	r3, [pc, #172]	; (80081d8 <xTaskResumeAll+0x120>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4313      	orrs	r3, r2
 800812e:	4a2a      	ldr	r2, [pc, #168]	; (80081d8 <xTaskResumeAll+0x120>)
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4a27      	ldr	r2, [pc, #156]	; (80081dc <xTaskResumeAll+0x124>)
 8008140:	441a      	add	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3304      	adds	r3, #4
 8008146:	4619      	mov	r1, r3
 8008148:	4610      	mov	r0, r2
 800814a:	f7ff f82b 	bl	80071a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008152:	4b23      	ldr	r3, [pc, #140]	; (80081e0 <xTaskResumeAll+0x128>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	429a      	cmp	r2, r3
 800815a:	d302      	bcc.n	8008162 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800815c:	4b21      	ldr	r3, [pc, #132]	; (80081e4 <xTaskResumeAll+0x12c>)
 800815e:	2201      	movs	r2, #1
 8008160:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008162:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <xTaskResumeAll+0x11c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1cc      	bne.n	8008104 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008170:	f000 fb12 	bl	8008798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008174:	4b1c      	ldr	r3, [pc, #112]	; (80081e8 <xTaskResumeAll+0x130>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d010      	beq.n	80081a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008180:	f000 f836 	bl	80081f0 <xTaskIncrementTick>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800818a:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <xTaskResumeAll+0x12c>)
 800818c:	2201      	movs	r2, #1
 800818e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3b01      	subs	r3, #1
 8008194:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1f1      	bne.n	8008180 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800819c:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <xTaskResumeAll+0x130>)
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081a2:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <xTaskResumeAll+0x12c>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d009      	beq.n	80081be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081aa:	2301      	movs	r3, #1
 80081ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <xTaskResumeAll+0x134>)
 80081b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081be:	f000 fd71 	bl	8008ca4 <vPortExitCritical>

	return xAlreadyYielded;
 80081c2:	68bb      	ldr	r3, [r7, #8]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	2000041c 	.word	0x2000041c
 80081d0:	200003f4 	.word	0x200003f4
 80081d4:	200003b4 	.word	0x200003b4
 80081d8:	200003fc 	.word	0x200003fc
 80081dc:	200002f8 	.word	0x200002f8
 80081e0:	200002f4 	.word	0x200002f4
 80081e4:	20000408 	.word	0x20000408
 80081e8:	20000404 	.word	0x20000404
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081fa:	4b4e      	ldr	r3, [pc, #312]	; (8008334 <xTaskIncrementTick+0x144>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f040 808e 	bne.w	8008320 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008204:	4b4c      	ldr	r3, [pc, #304]	; (8008338 <xTaskIncrementTick+0x148>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3301      	adds	r3, #1
 800820a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800820c:	4a4a      	ldr	r2, [pc, #296]	; (8008338 <xTaskIncrementTick+0x148>)
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d120      	bne.n	800825a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008218:	4b48      	ldr	r3, [pc, #288]	; (800833c <xTaskIncrementTick+0x14c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00a      	beq.n	8008238 <xTaskIncrementTick+0x48>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	603b      	str	r3, [r7, #0]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <xTaskIncrementTick+0x46>
 8008238:	4b40      	ldr	r3, [pc, #256]	; (800833c <xTaskIncrementTick+0x14c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	4b40      	ldr	r3, [pc, #256]	; (8008340 <xTaskIncrementTick+0x150>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a3e      	ldr	r2, [pc, #248]	; (800833c <xTaskIncrementTick+0x14c>)
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	4a3e      	ldr	r2, [pc, #248]	; (8008340 <xTaskIncrementTick+0x150>)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	4b3d      	ldr	r3, [pc, #244]	; (8008344 <xTaskIncrementTick+0x154>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3301      	adds	r3, #1
 8008252:	4a3c      	ldr	r2, [pc, #240]	; (8008344 <xTaskIncrementTick+0x154>)
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	f000 fa9f 	bl	8008798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800825a:	4b3b      	ldr	r3, [pc, #236]	; (8008348 <xTaskIncrementTick+0x158>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	429a      	cmp	r2, r3
 8008262:	d348      	bcc.n	80082f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008264:	4b35      	ldr	r3, [pc, #212]	; (800833c <xTaskIncrementTick+0x14c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d104      	bne.n	8008278 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800826e:	4b36      	ldr	r3, [pc, #216]	; (8008348 <xTaskIncrementTick+0x158>)
 8008270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008274:	601a      	str	r2, [r3, #0]
					break;
 8008276:	e03e      	b.n	80082f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008278:	4b30      	ldr	r3, [pc, #192]	; (800833c <xTaskIncrementTick+0x14c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d203      	bcs.n	8008298 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008290:	4a2d      	ldr	r2, [pc, #180]	; (8008348 <xTaskIncrementTick+0x158>)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008296:	e02e      	b.n	80082f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	3304      	adds	r3, #4
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe ffde 	bl	800725e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d004      	beq.n	80082b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	3318      	adds	r3, #24
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe ffd5 	bl	800725e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	2201      	movs	r2, #1
 80082ba:	409a      	lsls	r2, r3
 80082bc:	4b23      	ldr	r3, [pc, #140]	; (800834c <xTaskIncrementTick+0x15c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	4a22      	ldr	r2, [pc, #136]	; (800834c <xTaskIncrementTick+0x15c>)
 80082c4:	6013      	str	r3, [r2, #0]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ca:	4613      	mov	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4a1f      	ldr	r2, [pc, #124]	; (8008350 <xTaskIncrementTick+0x160>)
 80082d4:	441a      	add	r2, r3
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	3304      	adds	r3, #4
 80082da:	4619      	mov	r1, r3
 80082dc:	4610      	mov	r0, r2
 80082de:	f7fe ff61 	bl	80071a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e6:	4b1b      	ldr	r3, [pc, #108]	; (8008354 <xTaskIncrementTick+0x164>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d3b9      	bcc.n	8008264 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80082f0:	2301      	movs	r3, #1
 80082f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082f4:	e7b6      	b.n	8008264 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082f6:	4b17      	ldr	r3, [pc, #92]	; (8008354 <xTaskIncrementTick+0x164>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	4914      	ldr	r1, [pc, #80]	; (8008350 <xTaskIncrementTick+0x160>)
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d901      	bls.n	8008312 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800830e:	2301      	movs	r3, #1
 8008310:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008312:	4b11      	ldr	r3, [pc, #68]	; (8008358 <xTaskIncrementTick+0x168>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d007      	beq.n	800832a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800831a:	2301      	movs	r3, #1
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	e004      	b.n	800832a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008320:	4b0e      	ldr	r3, [pc, #56]	; (800835c <xTaskIncrementTick+0x16c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3301      	adds	r3, #1
 8008326:	4a0d      	ldr	r2, [pc, #52]	; (800835c <xTaskIncrementTick+0x16c>)
 8008328:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800832a:	697b      	ldr	r3, [r7, #20]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	2000041c 	.word	0x2000041c
 8008338:	200003f8 	.word	0x200003f8
 800833c:	200003ac 	.word	0x200003ac
 8008340:	200003b0 	.word	0x200003b0
 8008344:	2000040c 	.word	0x2000040c
 8008348:	20000414 	.word	0x20000414
 800834c:	200003fc 	.word	0x200003fc
 8008350:	200002f8 	.word	0x200002f8
 8008354:	200002f4 	.word	0x200002f4
 8008358:	20000408 	.word	0x20000408
 800835c:	20000404 	.word	0x20000404

08008360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008366:	4b27      	ldr	r3, [pc, #156]	; (8008404 <vTaskSwitchContext+0xa4>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800836e:	4b26      	ldr	r3, [pc, #152]	; (8008408 <vTaskSwitchContext+0xa8>)
 8008370:	2201      	movs	r2, #1
 8008372:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008374:	e03f      	b.n	80083f6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008376:	4b24      	ldr	r3, [pc, #144]	; (8008408 <vTaskSwitchContext+0xa8>)
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800837c:	4b23      	ldr	r3, [pc, #140]	; (800840c <vTaskSwitchContext+0xac>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	fab3 f383 	clz	r3, r3
 8008388:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800838a:	7afb      	ldrb	r3, [r7, #11]
 800838c:	f1c3 031f 	rsb	r3, r3, #31
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	491f      	ldr	r1, [pc, #124]	; (8008410 <vTaskSwitchContext+0xb0>)
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	440b      	add	r3, r1
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	607b      	str	r3, [r7, #4]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <vTaskSwitchContext+0x5a>
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4a12      	ldr	r2, [pc, #72]	; (8008410 <vTaskSwitchContext+0xb0>)
 80083c8:	4413      	add	r3, r2
 80083ca:	613b      	str	r3, [r7, #16]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	685a      	ldr	r2, [r3, #4]
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	605a      	str	r2, [r3, #4]
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	3308      	adds	r3, #8
 80083de:	429a      	cmp	r2, r3
 80083e0:	d104      	bne.n	80083ec <vTaskSwitchContext+0x8c>
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	605a      	str	r2, [r3, #4]
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	4a08      	ldr	r2, [pc, #32]	; (8008414 <vTaskSwitchContext+0xb4>)
 80083f4:	6013      	str	r3, [r2, #0]
}
 80083f6:	bf00      	nop
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	2000041c 	.word	0x2000041c
 8008408:	20000408 	.word	0x20000408
 800840c:	200003fc 	.word	0x200003fc
 8008410:	200002f8 	.word	0x200002f8
 8008414:	200002f4 	.word	0x200002f4

08008418 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10a      	bne.n	800843e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	60fb      	str	r3, [r7, #12]
}
 800843a:	bf00      	nop
 800843c:	e7fe      	b.n	800843c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <vTaskPlaceOnEventList+0x44>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3318      	adds	r3, #24
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7fe fed0 	bl	80071ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800844c:	2101      	movs	r1, #1
 800844e:	6838      	ldr	r0, [r7, #0]
 8008450:	f000 fa66 	bl	8008920 <prvAddCurrentTaskToDelayedList>
}
 8008454:	bf00      	nop
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	200002f4 	.word	0x200002f4

08008460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10a      	bne.n	800848c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	60fb      	str	r3, [r7, #12]
}
 8008488:	bf00      	nop
 800848a:	e7fe      	b.n	800848a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	3318      	adds	r3, #24
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe fee4 	bl	800725e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008496:	4b1d      	ldr	r3, [pc, #116]	; (800850c <xTaskRemoveFromEventList+0xac>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d11c      	bne.n	80084d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	3304      	adds	r3, #4
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fedb 	bl	800725e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	2201      	movs	r2, #1
 80084ae:	409a      	lsls	r2, r3
 80084b0:	4b17      	ldr	r3, [pc, #92]	; (8008510 <xTaskRemoveFromEventList+0xb0>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	4a16      	ldr	r2, [pc, #88]	; (8008510 <xTaskRemoveFromEventList+0xb0>)
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a13      	ldr	r2, [pc, #76]	; (8008514 <xTaskRemoveFromEventList+0xb4>)
 80084c8:	441a      	add	r2, r3
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe fe67 	bl	80071a4 <vListInsertEnd>
 80084d6:	e005      	b.n	80084e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	3318      	adds	r3, #24
 80084dc:	4619      	mov	r1, r3
 80084de:	480e      	ldr	r0, [pc, #56]	; (8008518 <xTaskRemoveFromEventList+0xb8>)
 80084e0:	f7fe fe60 	bl	80071a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4b0c      	ldr	r3, [pc, #48]	; (800851c <xTaskRemoveFromEventList+0xbc>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d905      	bls.n	80084fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084f2:	2301      	movs	r3, #1
 80084f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084f6:	4b0a      	ldr	r3, [pc, #40]	; (8008520 <xTaskRemoveFromEventList+0xc0>)
 80084f8:	2201      	movs	r2, #1
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	e001      	b.n	8008502 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80084fe:	2300      	movs	r3, #0
 8008500:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008502:	697b      	ldr	r3, [r7, #20]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	2000041c 	.word	0x2000041c
 8008510:	200003fc 	.word	0x200003fc
 8008514:	200002f8 	.word	0x200002f8
 8008518:	200003b4 	.word	0x200003b4
 800851c:	200002f4 	.word	0x200002f4
 8008520:	20000408 	.word	0x20000408

08008524 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800852c:	4b06      	ldr	r3, [pc, #24]	; (8008548 <vTaskInternalSetTimeOutState+0x24>)
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008534:	4b05      	ldr	r3, [pc, #20]	; (800854c <vTaskInternalSetTimeOutState+0x28>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	605a      	str	r2, [r3, #4]
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	2000040c 	.word	0x2000040c
 800854c:	200003f8 	.word	0x200003f8

08008550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10a      	bne.n	8008576 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	613b      	str	r3, [r7, #16]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	60fb      	str	r3, [r7, #12]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008592:	f000 fb57 	bl	8008c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008596:	4b1d      	ldr	r3, [pc, #116]	; (800860c <xTaskCheckForTimeOut+0xbc>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085ae:	d102      	bne.n	80085b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085b0:	2300      	movs	r3, #0
 80085b2:	61fb      	str	r3, [r7, #28]
 80085b4:	e023      	b.n	80085fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	4b15      	ldr	r3, [pc, #84]	; (8008610 <xTaskCheckForTimeOut+0xc0>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d007      	beq.n	80085d2 <xTaskCheckForTimeOut+0x82>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d302      	bcc.n	80085d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085cc:	2301      	movs	r3, #1
 80085ce:	61fb      	str	r3, [r7, #28]
 80085d0:	e015      	b.n	80085fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d20b      	bcs.n	80085f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	1ad2      	subs	r2, r2, r3
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7ff ff9b 	bl	8008524 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085ee:	2300      	movs	r3, #0
 80085f0:	61fb      	str	r3, [r7, #28]
 80085f2:	e004      	b.n	80085fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80085fa:	2301      	movs	r3, #1
 80085fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085fe:	f000 fb51 	bl	8008ca4 <vPortExitCritical>

	return xReturn;
 8008602:	69fb      	ldr	r3, [r7, #28]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3720      	adds	r7, #32
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	200003f8 	.word	0x200003f8
 8008610:	2000040c 	.word	0x2000040c

08008614 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008614:	b480      	push	{r7}
 8008616:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008618:	4b03      	ldr	r3, [pc, #12]	; (8008628 <vTaskMissedYield+0x14>)
 800861a:	2201      	movs	r2, #1
 800861c:	601a      	str	r2, [r3, #0]
}
 800861e:	bf00      	nop
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	20000408 	.word	0x20000408

0800862c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008634:	f000 f852 	bl	80086dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008638:	4b06      	ldr	r3, [pc, #24]	; (8008654 <prvIdleTask+0x28>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d9f9      	bls.n	8008634 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <prvIdleTask+0x2c>)
 8008642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008650:	e7f0      	b.n	8008634 <prvIdleTask+0x8>
 8008652:	bf00      	nop
 8008654:	200002f8 	.word	0x200002f8
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008662:	2300      	movs	r3, #0
 8008664:	607b      	str	r3, [r7, #4]
 8008666:	e00c      	b.n	8008682 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4a12      	ldr	r2, [pc, #72]	; (80086bc <prvInitialiseTaskLists+0x60>)
 8008674:	4413      	add	r3, r2
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe fd67 	bl	800714a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3301      	adds	r3, #1
 8008680:	607b      	str	r3, [r7, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b06      	cmp	r3, #6
 8008686:	d9ef      	bls.n	8008668 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008688:	480d      	ldr	r0, [pc, #52]	; (80086c0 <prvInitialiseTaskLists+0x64>)
 800868a:	f7fe fd5e 	bl	800714a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800868e:	480d      	ldr	r0, [pc, #52]	; (80086c4 <prvInitialiseTaskLists+0x68>)
 8008690:	f7fe fd5b 	bl	800714a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008694:	480c      	ldr	r0, [pc, #48]	; (80086c8 <prvInitialiseTaskLists+0x6c>)
 8008696:	f7fe fd58 	bl	800714a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800869a:	480c      	ldr	r0, [pc, #48]	; (80086cc <prvInitialiseTaskLists+0x70>)
 800869c:	f7fe fd55 	bl	800714a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086a0:	480b      	ldr	r0, [pc, #44]	; (80086d0 <prvInitialiseTaskLists+0x74>)
 80086a2:	f7fe fd52 	bl	800714a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086a6:	4b0b      	ldr	r3, [pc, #44]	; (80086d4 <prvInitialiseTaskLists+0x78>)
 80086a8:	4a05      	ldr	r2, [pc, #20]	; (80086c0 <prvInitialiseTaskLists+0x64>)
 80086aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086ac:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <prvInitialiseTaskLists+0x7c>)
 80086ae:	4a05      	ldr	r2, [pc, #20]	; (80086c4 <prvInitialiseTaskLists+0x68>)
 80086b0:	601a      	str	r2, [r3, #0]
}
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	200002f8 	.word	0x200002f8
 80086c0:	20000384 	.word	0x20000384
 80086c4:	20000398 	.word	0x20000398
 80086c8:	200003b4 	.word	0x200003b4
 80086cc:	200003c8 	.word	0x200003c8
 80086d0:	200003e0 	.word	0x200003e0
 80086d4:	200003ac 	.word	0x200003ac
 80086d8:	200003b0 	.word	0x200003b0

080086dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086e2:	e019      	b.n	8008718 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086e4:	f000 faae 	bl	8008c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e8:	4b10      	ldr	r3, [pc, #64]	; (800872c <prvCheckTasksWaitingTermination+0x50>)
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fe fdb2 	bl	800725e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086fa:	4b0d      	ldr	r3, [pc, #52]	; (8008730 <prvCheckTasksWaitingTermination+0x54>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3b01      	subs	r3, #1
 8008700:	4a0b      	ldr	r2, [pc, #44]	; (8008730 <prvCheckTasksWaitingTermination+0x54>)
 8008702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008704:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <prvCheckTasksWaitingTermination+0x58>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3b01      	subs	r3, #1
 800870a:	4a0a      	ldr	r2, [pc, #40]	; (8008734 <prvCheckTasksWaitingTermination+0x58>)
 800870c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800870e:	f000 fac9 	bl	8008ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f810 	bl	8008738 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008718:	4b06      	ldr	r3, [pc, #24]	; (8008734 <prvCheckTasksWaitingTermination+0x58>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1e1      	bne.n	80086e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	200003c8 	.word	0x200003c8
 8008730:	200003f4 	.word	0x200003f4
 8008734:	200003dc 	.word	0x200003dc

08008738 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008746:	2b00      	cmp	r3, #0
 8008748:	d108      	bne.n	800875c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874e:	4618      	mov	r0, r3
 8008750:	f000 fc66 	bl	8009020 <vPortFree>
				vPortFree( pxTCB );
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fc63 	bl	8009020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800875a:	e018      	b.n	800878e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008762:	2b01      	cmp	r3, #1
 8008764:	d103      	bne.n	800876e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fc5a 	bl	8009020 <vPortFree>
	}
 800876c:	e00f      	b.n	800878e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008774:	2b02      	cmp	r3, #2
 8008776:	d00a      	beq.n	800878e <prvDeleteTCB+0x56>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	60fb      	str	r3, [r7, #12]
}
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <prvDeleteTCB+0x54>
	}
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800879e:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <prvResetNextTaskUnblockTime+0x38>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d104      	bne.n	80087b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087a8:	4b0a      	ldr	r3, [pc, #40]	; (80087d4 <prvResetNextTaskUnblockTime+0x3c>)
 80087aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087b0:	e008      	b.n	80087c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b2:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <prvResetNextTaskUnblockTime+0x38>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	4a04      	ldr	r2, [pc, #16]	; (80087d4 <prvResetNextTaskUnblockTime+0x3c>)
 80087c2:	6013      	str	r3, [r2, #0]
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	200003ac 	.word	0x200003ac
 80087d4:	20000414 	.word	0x20000414

080087d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087de:	4b0b      	ldr	r3, [pc, #44]	; (800880c <xTaskGetSchedulerState+0x34>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d102      	bne.n	80087ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087e6:	2301      	movs	r3, #1
 80087e8:	607b      	str	r3, [r7, #4]
 80087ea:	e008      	b.n	80087fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ec:	4b08      	ldr	r3, [pc, #32]	; (8008810 <xTaskGetSchedulerState+0x38>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087f4:	2302      	movs	r3, #2
 80087f6:	607b      	str	r3, [r7, #4]
 80087f8:	e001      	b.n	80087fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087fa:	2300      	movs	r3, #0
 80087fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087fe:	687b      	ldr	r3, [r7, #4]
	}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	20000400 	.word	0x20000400
 8008810:	2000041c 	.word	0x2000041c

08008814 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008820:	2300      	movs	r3, #0
 8008822:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d06e      	beq.n	8008908 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800882a:	4b3a      	ldr	r3, [pc, #232]	; (8008914 <xTaskPriorityDisinherit+0x100>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	429a      	cmp	r2, r3
 8008832:	d00a      	beq.n	800884a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	60fb      	str	r3, [r7, #12]
}
 8008846:	bf00      	nop
 8008848:	e7fe      	b.n	8008848 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	60bb      	str	r3, [r7, #8]
}
 8008864:	bf00      	nop
 8008866:	e7fe      	b.n	8008866 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800886c:	1e5a      	subs	r2, r3, #1
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887a:	429a      	cmp	r2, r3
 800887c:	d044      	beq.n	8008908 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008882:	2b00      	cmp	r3, #0
 8008884:	d140      	bne.n	8008908 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	3304      	adds	r3, #4
 800888a:	4618      	mov	r0, r3
 800888c:	f7fe fce7 	bl	800725e <uxListRemove>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d115      	bne.n	80088c2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889a:	491f      	ldr	r1, [pc, #124]	; (8008918 <xTaskPriorityDisinherit+0x104>)
 800889c:	4613      	mov	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	440b      	add	r3, r1
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10a      	bne.n	80088c2 <xTaskPriorityDisinherit+0xae>
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	2201      	movs	r2, #1
 80088b2:	fa02 f303 	lsl.w	r3, r2, r3
 80088b6:	43da      	mvns	r2, r3
 80088b8:	4b18      	ldr	r3, [pc, #96]	; (800891c <xTaskPriorityDisinherit+0x108>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4013      	ands	r3, r2
 80088be:	4a17      	ldr	r2, [pc, #92]	; (800891c <xTaskPriorityDisinherit+0x108>)
 80088c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	f1c3 0207 	rsb	r2, r3, #7
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088da:	2201      	movs	r2, #1
 80088dc:	409a      	lsls	r2, r3
 80088de:	4b0f      	ldr	r3, [pc, #60]	; (800891c <xTaskPriorityDisinherit+0x108>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	4a0d      	ldr	r2, [pc, #52]	; (800891c <xTaskPriorityDisinherit+0x108>)
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4a08      	ldr	r2, [pc, #32]	; (8008918 <xTaskPriorityDisinherit+0x104>)
 80088f6:	441a      	add	r2, r3
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	f7fe fc50 	bl	80071a4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008904:	2301      	movs	r3, #1
 8008906:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008908:	697b      	ldr	r3, [r7, #20]
	}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	200002f4 	.word	0x200002f4
 8008918:	200002f8 	.word	0x200002f8
 800891c:	200003fc 	.word	0x200003fc

08008920 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800892a:	4b29      	ldr	r3, [pc, #164]	; (80089d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008930:	4b28      	ldr	r3, [pc, #160]	; (80089d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3304      	adds	r3, #4
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe fc91 	bl	800725e <uxListRemove>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10b      	bne.n	800895a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008942:	4b24      	ldr	r3, [pc, #144]	; (80089d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	2201      	movs	r2, #1
 800894a:	fa02 f303 	lsl.w	r3, r2, r3
 800894e:	43da      	mvns	r2, r3
 8008950:	4b21      	ldr	r3, [pc, #132]	; (80089d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4013      	ands	r3, r2
 8008956:	4a20      	ldr	r2, [pc, #128]	; (80089d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008958:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008960:	d10a      	bne.n	8008978 <prvAddCurrentTaskToDelayedList+0x58>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d007      	beq.n	8008978 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008968:	4b1a      	ldr	r3, [pc, #104]	; (80089d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3304      	adds	r3, #4
 800896e:	4619      	mov	r1, r3
 8008970:	481a      	ldr	r0, [pc, #104]	; (80089dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008972:	f7fe fc17 	bl	80071a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008976:	e026      	b.n	80089c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4413      	add	r3, r2
 800897e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008980:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	429a      	cmp	r2, r3
 800898e:	d209      	bcs.n	80089a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008990:	4b13      	ldr	r3, [pc, #76]	; (80089e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3304      	adds	r3, #4
 800899a:	4619      	mov	r1, r3
 800899c:	4610      	mov	r0, r2
 800899e:	f7fe fc25 	bl	80071ec <vListInsert>
}
 80089a2:	e010      	b.n	80089c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089a4:	4b0f      	ldr	r3, [pc, #60]	; (80089e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f7fe fc1b 	bl	80071ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089b6:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d202      	bcs.n	80089c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80089c0:	4a09      	ldr	r2, [pc, #36]	; (80089e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	6013      	str	r3, [r2, #0]
}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	200003f8 	.word	0x200003f8
 80089d4:	200002f4 	.word	0x200002f4
 80089d8:	200003fc 	.word	0x200003fc
 80089dc:	200003e0 	.word	0x200003e0
 80089e0:	200003b0 	.word	0x200003b0
 80089e4:	200003ac 	.word	0x200003ac
 80089e8:	20000414 	.word	0x20000414

080089ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3b04      	subs	r3, #4
 80089fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3b04      	subs	r3, #4
 8008a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f023 0201 	bic.w	r2, r3, #1
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3b04      	subs	r3, #4
 8008a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a1c:	4a0c      	ldr	r2, [pc, #48]	; (8008a50 <pxPortInitialiseStack+0x64>)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3b14      	subs	r3, #20
 8008a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3b04      	subs	r3, #4
 8008a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f06f 0202 	mvn.w	r2, #2
 8008a3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3b20      	subs	r3, #32
 8008a40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a42:	68fb      	ldr	r3, [r7, #12]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	08008a55 	.word	0x08008a55

08008a54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a5e:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <prvTaskExitError+0x54>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a66:	d00a      	beq.n	8008a7e <prvTaskExitError+0x2a>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	60fb      	str	r3, [r7, #12]
}
 8008a7a:	bf00      	nop
 8008a7c:	e7fe      	b.n	8008a7c <prvTaskExitError+0x28>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	60bb      	str	r3, [r7, #8]
}
 8008a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a92:	bf00      	nop
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0fc      	beq.n	8008a94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a9a:	bf00      	nop
 8008a9c:	bf00      	nop
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	2000000c 	.word	0x2000000c
 8008aac:	00000000 	.word	0x00000000

08008ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ab0:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <pxCurrentTCBConst2>)
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	6808      	ldr	r0, [r1, #0]
 8008ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	f380 8809 	msr	PSP, r0
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f04f 0000 	mov.w	r0, #0
 8008ac6:	f380 8811 	msr	BASEPRI, r0
 8008aca:	4770      	bx	lr
 8008acc:	f3af 8000 	nop.w

08008ad0 <pxCurrentTCBConst2>:
 8008ad0:	200002f4 	.word	0x200002f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop

08008ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ad8:	4808      	ldr	r0, [pc, #32]	; (8008afc <prvPortStartFirstTask+0x24>)
 8008ada:	6800      	ldr	r0, [r0, #0]
 8008adc:	6800      	ldr	r0, [r0, #0]
 8008ade:	f380 8808 	msr	MSP, r0
 8008ae2:	f04f 0000 	mov.w	r0, #0
 8008ae6:	f380 8814 	msr	CONTROL, r0
 8008aea:	b662      	cpsie	i
 8008aec:	b661      	cpsie	f
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	df00      	svc	0
 8008af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008afa:	bf00      	nop
 8008afc:	e000ed08 	.word	0xe000ed08

08008b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b06:	4b46      	ldr	r3, [pc, #280]	; (8008c20 <xPortStartScheduler+0x120>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a46      	ldr	r2, [pc, #280]	; (8008c24 <xPortStartScheduler+0x124>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d10a      	bne.n	8008b26 <xPortStartScheduler+0x26>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	613b      	str	r3, [r7, #16]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b26:	4b3e      	ldr	r3, [pc, #248]	; (8008c20 <xPortStartScheduler+0x120>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a3f      	ldr	r2, [pc, #252]	; (8008c28 <xPortStartScheduler+0x128>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d10a      	bne.n	8008b46 <xPortStartScheduler+0x46>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60fb      	str	r3, [r7, #12]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b46:	4b39      	ldr	r3, [pc, #228]	; (8008c2c <xPortStartScheduler+0x12c>)
 8008b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	22ff      	movs	r2, #255	; 0xff
 8008b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	4b31      	ldr	r3, [pc, #196]	; (8008c30 <xPortStartScheduler+0x130>)
 8008b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b6e:	4b31      	ldr	r3, [pc, #196]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b70:	2207      	movs	r2, #7
 8008b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b74:	e009      	b.n	8008b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b76:	4b2f      	ldr	r3, [pc, #188]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	4a2d      	ldr	r2, [pc, #180]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b92:	2b80      	cmp	r3, #128	; 0x80
 8008b94:	d0ef      	beq.n	8008b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b96:	4b27      	ldr	r3, [pc, #156]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f1c3 0307 	rsb	r3, r3, #7
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d00a      	beq.n	8008bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	60bb      	str	r3, [r7, #8]
}
 8008bb4:	bf00      	nop
 8008bb6:	e7fe      	b.n	8008bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bb8:	4b1e      	ldr	r3, [pc, #120]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	4a1d      	ldr	r2, [pc, #116]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bc2:	4b1c      	ldr	r3, [pc, #112]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bca:	4a1a      	ldr	r2, [pc, #104]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bd6:	4b18      	ldr	r3, [pc, #96]	; (8008c38 <xPortStartScheduler+0x138>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a17      	ldr	r2, [pc, #92]	; (8008c38 <xPortStartScheduler+0x138>)
 8008bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008be2:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <xPortStartScheduler+0x138>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a14      	ldr	r2, [pc, #80]	; (8008c38 <xPortStartScheduler+0x138>)
 8008be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bee:	f000 f8dd 	bl	8008dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bf2:	4b12      	ldr	r3, [pc, #72]	; (8008c3c <xPortStartScheduler+0x13c>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bf8:	f000 f8fc 	bl	8008df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bfc:	4b10      	ldr	r3, [pc, #64]	; (8008c40 <xPortStartScheduler+0x140>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a0f      	ldr	r2, [pc, #60]	; (8008c40 <xPortStartScheduler+0x140>)
 8008c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c08:	f7ff ff66 	bl	8008ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c0c:	f7ff fba8 	bl	8008360 <vTaskSwitchContext>
	prvTaskExitError();
 8008c10:	f7ff ff20 	bl	8008a54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	e000ed00 	.word	0xe000ed00
 8008c24:	410fc271 	.word	0x410fc271
 8008c28:	410fc270 	.word	0x410fc270
 8008c2c:	e000e400 	.word	0xe000e400
 8008c30:	20000420 	.word	0x20000420
 8008c34:	20000424 	.word	0x20000424
 8008c38:	e000ed20 	.word	0xe000ed20
 8008c3c:	2000000c 	.word	0x2000000c
 8008c40:	e000ef34 	.word	0xe000ef34

08008c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	607b      	str	r3, [r7, #4]
}
 8008c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <vPortEnterCritical+0x58>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3301      	adds	r3, #1
 8008c64:	4a0d      	ldr	r2, [pc, #52]	; (8008c9c <vPortEnterCritical+0x58>)
 8008c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c68:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <vPortEnterCritical+0x58>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d10f      	bne.n	8008c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c70:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <vPortEnterCritical+0x5c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00a      	beq.n	8008c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	603b      	str	r3, [r7, #0]
}
 8008c8c:	bf00      	nop
 8008c8e:	e7fe      	b.n	8008c8e <vPortEnterCritical+0x4a>
	}
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	2000000c 	.word	0x2000000c
 8008ca0:	e000ed04 	.word	0xe000ed04

08008ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008caa:	4b12      	ldr	r3, [pc, #72]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <vPortExitCritical+0x24>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	607b      	str	r3, [r7, #4]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008cc8:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	4a09      	ldr	r2, [pc, #36]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cd2:	4b08      	ldr	r3, [pc, #32]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d105      	bne.n	8008ce6 <vPortExitCritical+0x42>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	f383 8811 	msr	BASEPRI, r3
}
 8008ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	2000000c 	.word	0x2000000c
	...

08008d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d00:	f3ef 8009 	mrs	r0, PSP
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <pxCurrentTCBConst>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	f01e 0f10 	tst.w	lr, #16
 8008d10:	bf08      	it	eq
 8008d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1a:	6010      	str	r0, [r2, #0]
 8008d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d24:	f380 8811 	msr	BASEPRI, r0
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f7ff fb16 	bl	8008360 <vTaskSwitchContext>
 8008d34:	f04f 0000 	mov.w	r0, #0
 8008d38:	f380 8811 	msr	BASEPRI, r0
 8008d3c:	bc09      	pop	{r0, r3}
 8008d3e:	6819      	ldr	r1, [r3, #0]
 8008d40:	6808      	ldr	r0, [r1, #0]
 8008d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d46:	f01e 0f10 	tst.w	lr, #16
 8008d4a:	bf08      	it	eq
 8008d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d50:	f380 8809 	msr	PSP, r0
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	f3af 8000 	nop.w

08008d60 <pxCurrentTCBConst>:
 8008d60:	200002f4 	.word	0x200002f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop

08008d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	607b      	str	r3, [r7, #4]
}
 8008d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d82:	f7ff fa35 	bl	80081f0 <xTaskIncrementTick>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d8c:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <SysTick_Handler+0x40>)
 8008d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	2300      	movs	r3, #0
 8008d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f383 8811 	msr	BASEPRI, r3
}
 8008d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008db0:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <vPortSetupTimerInterrupt+0x34>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008db6:	4b0b      	ldr	r3, [pc, #44]	; (8008de4 <vPortSetupTimerInterrupt+0x38>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <vPortSetupTimerInterrupt+0x3c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0a      	ldr	r2, [pc, #40]	; (8008dec <vPortSetupTimerInterrupt+0x40>)
 8008dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc6:	099b      	lsrs	r3, r3, #6
 8008dc8:	4a09      	ldr	r2, [pc, #36]	; (8008df0 <vPortSetupTimerInterrupt+0x44>)
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dce:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <vPortSetupTimerInterrupt+0x34>)
 8008dd0:	2207      	movs	r2, #7
 8008dd2:	601a      	str	r2, [r3, #0]
}
 8008dd4:	bf00      	nop
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	e000e010 	.word	0xe000e010
 8008de4:	e000e018 	.word	0xe000e018
 8008de8:	20000000 	.word	0x20000000
 8008dec:	10624dd3 	.word	0x10624dd3
 8008df0:	e000e014 	.word	0xe000e014

08008df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e04 <vPortEnableVFP+0x10>
 8008df8:	6801      	ldr	r1, [r0, #0]
 8008dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008dfe:	6001      	str	r1, [r0, #0]
 8008e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e02:	bf00      	nop
 8008e04:	e000ed88 	.word	0xe000ed88

08008e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e0e:	f3ef 8305 	mrs	r3, IPSR
 8008e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b0f      	cmp	r3, #15
 8008e18:	d914      	bls.n	8008e44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e1a:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <vPortValidateInterruptPriority+0x70>)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e24:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <vPortValidateInterruptPriority+0x74>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	7afa      	ldrb	r2, [r7, #11]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d20a      	bcs.n	8008e44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	607b      	str	r3, [r7, #4]
}
 8008e40:	bf00      	nop
 8008e42:	e7fe      	b.n	8008e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e44:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <vPortValidateInterruptPriority+0x78>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e4c:	4b0d      	ldr	r3, [pc, #52]	; (8008e84 <vPortValidateInterruptPriority+0x7c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d90a      	bls.n	8008e6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	603b      	str	r3, [r7, #0]
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <vPortValidateInterruptPriority+0x60>
	}
 8008e6a:	bf00      	nop
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	e000e3f0 	.word	0xe000e3f0
 8008e7c:	20000420 	.word	0x20000420
 8008e80:	e000ed0c 	.word	0xe000ed0c
 8008e84:	20000424 	.word	0x20000424

08008e88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08a      	sub	sp, #40	; 0x28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e94:	f7ff f902 	bl	800809c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e98:	4b5b      	ldr	r3, [pc, #364]	; (8009008 <pvPortMalloc+0x180>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ea0:	f000 f920 	bl	80090e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ea4:	4b59      	ldr	r3, [pc, #356]	; (800900c <pvPortMalloc+0x184>)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4013      	ands	r3, r2
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f040 8093 	bne.w	8008fd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01d      	beq.n	8008ef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008eb8:	2208      	movs	r2, #8
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d014      	beq.n	8008ef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f023 0307 	bic.w	r3, r3, #7
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00a      	beq.n	8008ef4 <pvPortMalloc+0x6c>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	617b      	str	r3, [r7, #20]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d06e      	beq.n	8008fd8 <pvPortMalloc+0x150>
 8008efa:	4b45      	ldr	r3, [pc, #276]	; (8009010 <pvPortMalloc+0x188>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d869      	bhi.n	8008fd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f04:	4b43      	ldr	r3, [pc, #268]	; (8009014 <pvPortMalloc+0x18c>)
 8008f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f08:	4b42      	ldr	r3, [pc, #264]	; (8009014 <pvPortMalloc+0x18c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f0e:	e004      	b.n	8008f1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d903      	bls.n	8008f2c <pvPortMalloc+0xa4>
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1f1      	bne.n	8008f10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f2c:	4b36      	ldr	r3, [pc, #216]	; (8009008 <pvPortMalloc+0x180>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d050      	beq.n	8008fd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2208      	movs	r2, #8
 8008f3c:	4413      	add	r3, r2
 8008f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	2308      	movs	r3, #8
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d91f      	bls.n	8008f98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	f003 0307 	and.w	r3, r3, #7
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <pvPortMalloc+0xf8>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	613b      	str	r3, [r7, #16]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	1ad2      	subs	r2, r2, r3
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f92:	69b8      	ldr	r0, [r7, #24]
 8008f94:	f000 f908 	bl	80091a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f98:	4b1d      	ldr	r3, [pc, #116]	; (8009010 <pvPortMalloc+0x188>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	4a1b      	ldr	r2, [pc, #108]	; (8009010 <pvPortMalloc+0x188>)
 8008fa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fa6:	4b1a      	ldr	r3, [pc, #104]	; (8009010 <pvPortMalloc+0x188>)
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	4b1b      	ldr	r3, [pc, #108]	; (8009018 <pvPortMalloc+0x190>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d203      	bcs.n	8008fba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fb2:	4b17      	ldr	r3, [pc, #92]	; (8009010 <pvPortMalloc+0x188>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a18      	ldr	r2, [pc, #96]	; (8009018 <pvPortMalloc+0x190>)
 8008fb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	685a      	ldr	r2, [r3, #4]
 8008fbe:	4b13      	ldr	r3, [pc, #76]	; (800900c <pvPortMalloc+0x184>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	431a      	orrs	r2, r3
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008fce:	4b13      	ldr	r3, [pc, #76]	; (800901c <pvPortMalloc+0x194>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	4a11      	ldr	r2, [pc, #68]	; (800901c <pvPortMalloc+0x194>)
 8008fd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fd8:	f7ff f86e 	bl	80080b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	f003 0307 	and.w	r3, r3, #7
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <pvPortMalloc+0x174>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	60fb      	str	r3, [r7, #12]
}
 8008ff8:	bf00      	nop
 8008ffa:	e7fe      	b.n	8008ffa <pvPortMalloc+0x172>
	return pvReturn;
 8008ffc:	69fb      	ldr	r3, [r7, #28]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3728      	adds	r7, #40	; 0x28
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20002430 	.word	0x20002430
 800900c:	20002444 	.word	0x20002444
 8009010:	20002434 	.word	0x20002434
 8009014:	20002428 	.word	0x20002428
 8009018:	20002438 	.word	0x20002438
 800901c:	2000243c 	.word	0x2000243c

08009020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d04d      	beq.n	80090ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009032:	2308      	movs	r3, #8
 8009034:	425b      	negs	r3, r3
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	4413      	add	r3, r2
 800903a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	4b24      	ldr	r3, [pc, #144]	; (80090d8 <vPortFree+0xb8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4013      	ands	r3, r2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <vPortFree+0x44>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	60fb      	str	r3, [r7, #12]
}
 8009060:	bf00      	nop
 8009062:	e7fe      	b.n	8009062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00a      	beq.n	8009082 <vPortFree+0x62>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	60bb      	str	r3, [r7, #8]
}
 800907e:	bf00      	nop
 8009080:	e7fe      	b.n	8009080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	4b14      	ldr	r3, [pc, #80]	; (80090d8 <vPortFree+0xb8>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4013      	ands	r3, r2
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01e      	beq.n	80090ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d11a      	bne.n	80090ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	4b0e      	ldr	r3, [pc, #56]	; (80090d8 <vPortFree+0xb8>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	43db      	mvns	r3, r3
 80090a2:	401a      	ands	r2, r3
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090a8:	f7fe fff8 	bl	800809c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <vPortFree+0xbc>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4413      	add	r3, r2
 80090b6:	4a09      	ldr	r2, [pc, #36]	; (80090dc <vPortFree+0xbc>)
 80090b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090ba:	6938      	ldr	r0, [r7, #16]
 80090bc:	f000 f874 	bl	80091a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090c0:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <vPortFree+0xc0>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3301      	adds	r3, #1
 80090c6:	4a06      	ldr	r2, [pc, #24]	; (80090e0 <vPortFree+0xc0>)
 80090c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090ca:	f7fe fff5 	bl	80080b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090ce:	bf00      	nop
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20002444 	.word	0x20002444
 80090dc:	20002434 	.word	0x20002434
 80090e0:	20002440 	.word	0x20002440

080090e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090f0:	4b27      	ldr	r3, [pc, #156]	; (8009190 <prvHeapInit+0xac>)
 80090f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f003 0307 	and.w	r3, r3, #7
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00c      	beq.n	8009118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3307      	adds	r3, #7
 8009102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 0307 	bic.w	r3, r3, #7
 800910a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	4a1f      	ldr	r2, [pc, #124]	; (8009190 <prvHeapInit+0xac>)
 8009114:	4413      	add	r3, r2
 8009116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800911c:	4a1d      	ldr	r2, [pc, #116]	; (8009194 <prvHeapInit+0xb0>)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009122:	4b1c      	ldr	r3, [pc, #112]	; (8009194 <prvHeapInit+0xb0>)
 8009124:	2200      	movs	r2, #0
 8009126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	4413      	add	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009130:	2208      	movs	r2, #8
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 0307 	bic.w	r3, r3, #7
 800913e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4a15      	ldr	r2, [pc, #84]	; (8009198 <prvHeapInit+0xb4>)
 8009144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009146:	4b14      	ldr	r3, [pc, #80]	; (8009198 <prvHeapInit+0xb4>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2200      	movs	r2, #0
 800914c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800914e:	4b12      	ldr	r3, [pc, #72]	; (8009198 <prvHeapInit+0xb4>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	1ad2      	subs	r2, r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009164:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <prvHeapInit+0xb4>)
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	4a0a      	ldr	r2, [pc, #40]	; (800919c <prvHeapInit+0xb8>)
 8009172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	4a09      	ldr	r2, [pc, #36]	; (80091a0 <prvHeapInit+0xbc>)
 800917a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800917c:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <prvHeapInit+0xc0>)
 800917e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009182:	601a      	str	r2, [r3, #0]
}
 8009184:	bf00      	nop
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	20000428 	.word	0x20000428
 8009194:	20002428 	.word	0x20002428
 8009198:	20002430 	.word	0x20002430
 800919c:	20002438 	.word	0x20002438
 80091a0:	20002434 	.word	0x20002434
 80091a4:	20002444 	.word	0x20002444

080091a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091b0:	4b28      	ldr	r3, [pc, #160]	; (8009254 <prvInsertBlockIntoFreeList+0xac>)
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	e002      	b.n	80091bc <prvInsertBlockIntoFreeList+0x14>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d8f7      	bhi.n	80091b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	4413      	add	r3, r2
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d108      	bne.n	80091ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	441a      	add	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	441a      	add	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d118      	bne.n	8009230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	4b15      	ldr	r3, [pc, #84]	; (8009258 <prvInsertBlockIntoFreeList+0xb0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	429a      	cmp	r2, r3
 8009208:	d00d      	beq.n	8009226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	441a      	add	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	e008      	b.n	8009238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009226:	4b0c      	ldr	r3, [pc, #48]	; (8009258 <prvInsertBlockIntoFreeList+0xb0>)
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	e003      	b.n	8009238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	429a      	cmp	r2, r3
 800923e:	d002      	beq.n	8009246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009246:	bf00      	nop
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20002428 	.word	0x20002428
 8009258:	20002430 	.word	0x20002430

0800925c <atoi>:
 800925c:	220a      	movs	r2, #10
 800925e:	2100      	movs	r1, #0
 8009260:	f000 b8e4 	b.w	800942c <strtol>

08009264 <__errno>:
 8009264:	4b01      	ldr	r3, [pc, #4]	; (800926c <__errno+0x8>)
 8009266:	6818      	ldr	r0, [r3, #0]
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	20000010 	.word	0x20000010

08009270 <__libc_init_array>:
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	4d0d      	ldr	r5, [pc, #52]	; (80092a8 <__libc_init_array+0x38>)
 8009274:	4c0d      	ldr	r4, [pc, #52]	; (80092ac <__libc_init_array+0x3c>)
 8009276:	1b64      	subs	r4, r4, r5
 8009278:	10a4      	asrs	r4, r4, #2
 800927a:	2600      	movs	r6, #0
 800927c:	42a6      	cmp	r6, r4
 800927e:	d109      	bne.n	8009294 <__libc_init_array+0x24>
 8009280:	4d0b      	ldr	r5, [pc, #44]	; (80092b0 <__libc_init_array+0x40>)
 8009282:	4c0c      	ldr	r4, [pc, #48]	; (80092b4 <__libc_init_array+0x44>)
 8009284:	f000 fcdc 	bl	8009c40 <_init>
 8009288:	1b64      	subs	r4, r4, r5
 800928a:	10a4      	asrs	r4, r4, #2
 800928c:	2600      	movs	r6, #0
 800928e:	42a6      	cmp	r6, r4
 8009290:	d105      	bne.n	800929e <__libc_init_array+0x2e>
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	f855 3b04 	ldr.w	r3, [r5], #4
 8009298:	4798      	blx	r3
 800929a:	3601      	adds	r6, #1
 800929c:	e7ee      	b.n	800927c <__libc_init_array+0xc>
 800929e:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a2:	4798      	blx	r3
 80092a4:	3601      	adds	r6, #1
 80092a6:	e7f2      	b.n	800928e <__libc_init_array+0x1e>
 80092a8:	08009e5c 	.word	0x08009e5c
 80092ac:	08009e5c 	.word	0x08009e5c
 80092b0:	08009e5c 	.word	0x08009e5c
 80092b4:	08009e60 	.word	0x08009e60

080092b8 <memcpy>:
 80092b8:	440a      	add	r2, r1
 80092ba:	4291      	cmp	r1, r2
 80092bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80092c0:	d100      	bne.n	80092c4 <memcpy+0xc>
 80092c2:	4770      	bx	lr
 80092c4:	b510      	push	{r4, lr}
 80092c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092ce:	4291      	cmp	r1, r2
 80092d0:	d1f9      	bne.n	80092c6 <memcpy+0xe>
 80092d2:	bd10      	pop	{r4, pc}

080092d4 <memset>:
 80092d4:	4402      	add	r2, r0
 80092d6:	4603      	mov	r3, r0
 80092d8:	4293      	cmp	r3, r2
 80092da:	d100      	bne.n	80092de <memset+0xa>
 80092dc:	4770      	bx	lr
 80092de:	f803 1b01 	strb.w	r1, [r3], #1
 80092e2:	e7f9      	b.n	80092d8 <memset+0x4>

080092e4 <siprintf>:
 80092e4:	b40e      	push	{r1, r2, r3}
 80092e6:	b500      	push	{lr}
 80092e8:	b09c      	sub	sp, #112	; 0x70
 80092ea:	ab1d      	add	r3, sp, #116	; 0x74
 80092ec:	9002      	str	r0, [sp, #8]
 80092ee:	9006      	str	r0, [sp, #24]
 80092f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092f4:	4809      	ldr	r0, [pc, #36]	; (800931c <siprintf+0x38>)
 80092f6:	9107      	str	r1, [sp, #28]
 80092f8:	9104      	str	r1, [sp, #16]
 80092fa:	4909      	ldr	r1, [pc, #36]	; (8009320 <siprintf+0x3c>)
 80092fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009300:	9105      	str	r1, [sp, #20]
 8009302:	6800      	ldr	r0, [r0, #0]
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	a902      	add	r1, sp, #8
 8009308:	f000 f8f6 	bl	80094f8 <_svfiprintf_r>
 800930c:	9b02      	ldr	r3, [sp, #8]
 800930e:	2200      	movs	r2, #0
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	b01c      	add	sp, #112	; 0x70
 8009314:	f85d eb04 	ldr.w	lr, [sp], #4
 8009318:	b003      	add	sp, #12
 800931a:	4770      	bx	lr
 800931c:	20000010 	.word	0x20000010
 8009320:	ffff0208 	.word	0xffff0208

08009324 <_strtol_l.isra.0>:
 8009324:	2b01      	cmp	r3, #1
 8009326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800932a:	d001      	beq.n	8009330 <_strtol_l.isra.0+0xc>
 800932c:	2b24      	cmp	r3, #36	; 0x24
 800932e:	d906      	bls.n	800933e <_strtol_l.isra.0+0x1a>
 8009330:	f7ff ff98 	bl	8009264 <__errno>
 8009334:	2316      	movs	r3, #22
 8009336:	6003      	str	r3, [r0, #0]
 8009338:	2000      	movs	r0, #0
 800933a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933e:	4f3a      	ldr	r7, [pc, #232]	; (8009428 <_strtol_l.isra.0+0x104>)
 8009340:	468e      	mov	lr, r1
 8009342:	4676      	mov	r6, lr
 8009344:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009348:	5de5      	ldrb	r5, [r4, r7]
 800934a:	f015 0508 	ands.w	r5, r5, #8
 800934e:	d1f8      	bne.n	8009342 <_strtol_l.isra.0+0x1e>
 8009350:	2c2d      	cmp	r4, #45	; 0x2d
 8009352:	d134      	bne.n	80093be <_strtol_l.isra.0+0x9a>
 8009354:	f89e 4000 	ldrb.w	r4, [lr]
 8009358:	f04f 0801 	mov.w	r8, #1
 800935c:	f106 0e02 	add.w	lr, r6, #2
 8009360:	2b00      	cmp	r3, #0
 8009362:	d05c      	beq.n	800941e <_strtol_l.isra.0+0xfa>
 8009364:	2b10      	cmp	r3, #16
 8009366:	d10c      	bne.n	8009382 <_strtol_l.isra.0+0x5e>
 8009368:	2c30      	cmp	r4, #48	; 0x30
 800936a:	d10a      	bne.n	8009382 <_strtol_l.isra.0+0x5e>
 800936c:	f89e 4000 	ldrb.w	r4, [lr]
 8009370:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009374:	2c58      	cmp	r4, #88	; 0x58
 8009376:	d14d      	bne.n	8009414 <_strtol_l.isra.0+0xf0>
 8009378:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800937c:	2310      	movs	r3, #16
 800937e:	f10e 0e02 	add.w	lr, lr, #2
 8009382:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009386:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800938a:	2600      	movs	r6, #0
 800938c:	fbbc f9f3 	udiv	r9, ip, r3
 8009390:	4635      	mov	r5, r6
 8009392:	fb03 ca19 	mls	sl, r3, r9, ip
 8009396:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800939a:	2f09      	cmp	r7, #9
 800939c:	d818      	bhi.n	80093d0 <_strtol_l.isra.0+0xac>
 800939e:	463c      	mov	r4, r7
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	dd24      	ble.n	80093ee <_strtol_l.isra.0+0xca>
 80093a4:	2e00      	cmp	r6, #0
 80093a6:	db1f      	blt.n	80093e8 <_strtol_l.isra.0+0xc4>
 80093a8:	45a9      	cmp	r9, r5
 80093aa:	d31d      	bcc.n	80093e8 <_strtol_l.isra.0+0xc4>
 80093ac:	d101      	bne.n	80093b2 <_strtol_l.isra.0+0x8e>
 80093ae:	45a2      	cmp	sl, r4
 80093b0:	db1a      	blt.n	80093e8 <_strtol_l.isra.0+0xc4>
 80093b2:	fb05 4503 	mla	r5, r5, r3, r4
 80093b6:	2601      	movs	r6, #1
 80093b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80093bc:	e7eb      	b.n	8009396 <_strtol_l.isra.0+0x72>
 80093be:	2c2b      	cmp	r4, #43	; 0x2b
 80093c0:	bf08      	it	eq
 80093c2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80093c6:	46a8      	mov	r8, r5
 80093c8:	bf08      	it	eq
 80093ca:	f106 0e02 	addeq.w	lr, r6, #2
 80093ce:	e7c7      	b.n	8009360 <_strtol_l.isra.0+0x3c>
 80093d0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80093d4:	2f19      	cmp	r7, #25
 80093d6:	d801      	bhi.n	80093dc <_strtol_l.isra.0+0xb8>
 80093d8:	3c37      	subs	r4, #55	; 0x37
 80093da:	e7e1      	b.n	80093a0 <_strtol_l.isra.0+0x7c>
 80093dc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80093e0:	2f19      	cmp	r7, #25
 80093e2:	d804      	bhi.n	80093ee <_strtol_l.isra.0+0xca>
 80093e4:	3c57      	subs	r4, #87	; 0x57
 80093e6:	e7db      	b.n	80093a0 <_strtol_l.isra.0+0x7c>
 80093e8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80093ec:	e7e4      	b.n	80093b8 <_strtol_l.isra.0+0x94>
 80093ee:	2e00      	cmp	r6, #0
 80093f0:	da05      	bge.n	80093fe <_strtol_l.isra.0+0xda>
 80093f2:	2322      	movs	r3, #34	; 0x22
 80093f4:	6003      	str	r3, [r0, #0]
 80093f6:	4665      	mov	r5, ip
 80093f8:	b942      	cbnz	r2, 800940c <_strtol_l.isra.0+0xe8>
 80093fa:	4628      	mov	r0, r5
 80093fc:	e79d      	b.n	800933a <_strtol_l.isra.0+0x16>
 80093fe:	f1b8 0f00 	cmp.w	r8, #0
 8009402:	d000      	beq.n	8009406 <_strtol_l.isra.0+0xe2>
 8009404:	426d      	negs	r5, r5
 8009406:	2a00      	cmp	r2, #0
 8009408:	d0f7      	beq.n	80093fa <_strtol_l.isra.0+0xd6>
 800940a:	b10e      	cbz	r6, 8009410 <_strtol_l.isra.0+0xec>
 800940c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8009410:	6011      	str	r1, [r2, #0]
 8009412:	e7f2      	b.n	80093fa <_strtol_l.isra.0+0xd6>
 8009414:	2430      	movs	r4, #48	; 0x30
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1b3      	bne.n	8009382 <_strtol_l.isra.0+0x5e>
 800941a:	2308      	movs	r3, #8
 800941c:	e7b1      	b.n	8009382 <_strtol_l.isra.0+0x5e>
 800941e:	2c30      	cmp	r4, #48	; 0x30
 8009420:	d0a4      	beq.n	800936c <_strtol_l.isra.0+0x48>
 8009422:	230a      	movs	r3, #10
 8009424:	e7ad      	b.n	8009382 <_strtol_l.isra.0+0x5e>
 8009426:	bf00      	nop
 8009428:	08009d29 	.word	0x08009d29

0800942c <strtol>:
 800942c:	4613      	mov	r3, r2
 800942e:	460a      	mov	r2, r1
 8009430:	4601      	mov	r1, r0
 8009432:	4802      	ldr	r0, [pc, #8]	; (800943c <strtol+0x10>)
 8009434:	6800      	ldr	r0, [r0, #0]
 8009436:	f7ff bf75 	b.w	8009324 <_strtol_l.isra.0>
 800943a:	bf00      	nop
 800943c:	20000010 	.word	0x20000010

08009440 <__ssputs_r>:
 8009440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009444:	688e      	ldr	r6, [r1, #8]
 8009446:	429e      	cmp	r6, r3
 8009448:	4682      	mov	sl, r0
 800944a:	460c      	mov	r4, r1
 800944c:	4690      	mov	r8, r2
 800944e:	461f      	mov	r7, r3
 8009450:	d838      	bhi.n	80094c4 <__ssputs_r+0x84>
 8009452:	898a      	ldrh	r2, [r1, #12]
 8009454:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009458:	d032      	beq.n	80094c0 <__ssputs_r+0x80>
 800945a:	6825      	ldr	r5, [r4, #0]
 800945c:	6909      	ldr	r1, [r1, #16]
 800945e:	eba5 0901 	sub.w	r9, r5, r1
 8009462:	6965      	ldr	r5, [r4, #20]
 8009464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800946c:	3301      	adds	r3, #1
 800946e:	444b      	add	r3, r9
 8009470:	106d      	asrs	r5, r5, #1
 8009472:	429d      	cmp	r5, r3
 8009474:	bf38      	it	cc
 8009476:	461d      	movcc	r5, r3
 8009478:	0553      	lsls	r3, r2, #21
 800947a:	d531      	bpl.n	80094e0 <__ssputs_r+0xa0>
 800947c:	4629      	mov	r1, r5
 800947e:	f000 fb39 	bl	8009af4 <_malloc_r>
 8009482:	4606      	mov	r6, r0
 8009484:	b950      	cbnz	r0, 800949c <__ssputs_r+0x5c>
 8009486:	230c      	movs	r3, #12
 8009488:	f8ca 3000 	str.w	r3, [sl]
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949c:	6921      	ldr	r1, [r4, #16]
 800949e:	464a      	mov	r2, r9
 80094a0:	f7ff ff0a 	bl	80092b8 <memcpy>
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ae:	81a3      	strh	r3, [r4, #12]
 80094b0:	6126      	str	r6, [r4, #16]
 80094b2:	6165      	str	r5, [r4, #20]
 80094b4:	444e      	add	r6, r9
 80094b6:	eba5 0509 	sub.w	r5, r5, r9
 80094ba:	6026      	str	r6, [r4, #0]
 80094bc:	60a5      	str	r5, [r4, #8]
 80094be:	463e      	mov	r6, r7
 80094c0:	42be      	cmp	r6, r7
 80094c2:	d900      	bls.n	80094c6 <__ssputs_r+0x86>
 80094c4:	463e      	mov	r6, r7
 80094c6:	4632      	mov	r2, r6
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	4641      	mov	r1, r8
 80094cc:	f000 faa8 	bl	8009a20 <memmove>
 80094d0:	68a3      	ldr	r3, [r4, #8]
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	1b9b      	subs	r3, r3, r6
 80094d6:	4432      	add	r2, r6
 80094d8:	60a3      	str	r3, [r4, #8]
 80094da:	6022      	str	r2, [r4, #0]
 80094dc:	2000      	movs	r0, #0
 80094de:	e7db      	b.n	8009498 <__ssputs_r+0x58>
 80094e0:	462a      	mov	r2, r5
 80094e2:	f000 fb61 	bl	8009ba8 <_realloc_r>
 80094e6:	4606      	mov	r6, r0
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d1e1      	bne.n	80094b0 <__ssputs_r+0x70>
 80094ec:	6921      	ldr	r1, [r4, #16]
 80094ee:	4650      	mov	r0, sl
 80094f0:	f000 fab0 	bl	8009a54 <_free_r>
 80094f4:	e7c7      	b.n	8009486 <__ssputs_r+0x46>
	...

080094f8 <_svfiprintf_r>:
 80094f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fc:	4698      	mov	r8, r3
 80094fe:	898b      	ldrh	r3, [r1, #12]
 8009500:	061b      	lsls	r3, r3, #24
 8009502:	b09d      	sub	sp, #116	; 0x74
 8009504:	4607      	mov	r7, r0
 8009506:	460d      	mov	r5, r1
 8009508:	4614      	mov	r4, r2
 800950a:	d50e      	bpl.n	800952a <_svfiprintf_r+0x32>
 800950c:	690b      	ldr	r3, [r1, #16]
 800950e:	b963      	cbnz	r3, 800952a <_svfiprintf_r+0x32>
 8009510:	2140      	movs	r1, #64	; 0x40
 8009512:	f000 faef 	bl	8009af4 <_malloc_r>
 8009516:	6028      	str	r0, [r5, #0]
 8009518:	6128      	str	r0, [r5, #16]
 800951a:	b920      	cbnz	r0, 8009526 <_svfiprintf_r+0x2e>
 800951c:	230c      	movs	r3, #12
 800951e:	603b      	str	r3, [r7, #0]
 8009520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009524:	e0d1      	b.n	80096ca <_svfiprintf_r+0x1d2>
 8009526:	2340      	movs	r3, #64	; 0x40
 8009528:	616b      	str	r3, [r5, #20]
 800952a:	2300      	movs	r3, #0
 800952c:	9309      	str	r3, [sp, #36]	; 0x24
 800952e:	2320      	movs	r3, #32
 8009530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009534:	f8cd 800c 	str.w	r8, [sp, #12]
 8009538:	2330      	movs	r3, #48	; 0x30
 800953a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80096e4 <_svfiprintf_r+0x1ec>
 800953e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009542:	f04f 0901 	mov.w	r9, #1
 8009546:	4623      	mov	r3, r4
 8009548:	469a      	mov	sl, r3
 800954a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800954e:	b10a      	cbz	r2, 8009554 <_svfiprintf_r+0x5c>
 8009550:	2a25      	cmp	r2, #37	; 0x25
 8009552:	d1f9      	bne.n	8009548 <_svfiprintf_r+0x50>
 8009554:	ebba 0b04 	subs.w	fp, sl, r4
 8009558:	d00b      	beq.n	8009572 <_svfiprintf_r+0x7a>
 800955a:	465b      	mov	r3, fp
 800955c:	4622      	mov	r2, r4
 800955e:	4629      	mov	r1, r5
 8009560:	4638      	mov	r0, r7
 8009562:	f7ff ff6d 	bl	8009440 <__ssputs_r>
 8009566:	3001      	adds	r0, #1
 8009568:	f000 80aa 	beq.w	80096c0 <_svfiprintf_r+0x1c8>
 800956c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800956e:	445a      	add	r2, fp
 8009570:	9209      	str	r2, [sp, #36]	; 0x24
 8009572:	f89a 3000 	ldrb.w	r3, [sl]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 80a2 	beq.w	80096c0 <_svfiprintf_r+0x1c8>
 800957c:	2300      	movs	r3, #0
 800957e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009586:	f10a 0a01 	add.w	sl, sl, #1
 800958a:	9304      	str	r3, [sp, #16]
 800958c:	9307      	str	r3, [sp, #28]
 800958e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009592:	931a      	str	r3, [sp, #104]	; 0x68
 8009594:	4654      	mov	r4, sl
 8009596:	2205      	movs	r2, #5
 8009598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800959c:	4851      	ldr	r0, [pc, #324]	; (80096e4 <_svfiprintf_r+0x1ec>)
 800959e:	f7f6 fe17 	bl	80001d0 <memchr>
 80095a2:	9a04      	ldr	r2, [sp, #16]
 80095a4:	b9d8      	cbnz	r0, 80095de <_svfiprintf_r+0xe6>
 80095a6:	06d0      	lsls	r0, r2, #27
 80095a8:	bf44      	itt	mi
 80095aa:	2320      	movmi	r3, #32
 80095ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095b0:	0711      	lsls	r1, r2, #28
 80095b2:	bf44      	itt	mi
 80095b4:	232b      	movmi	r3, #43	; 0x2b
 80095b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095ba:	f89a 3000 	ldrb.w	r3, [sl]
 80095be:	2b2a      	cmp	r3, #42	; 0x2a
 80095c0:	d015      	beq.n	80095ee <_svfiprintf_r+0xf6>
 80095c2:	9a07      	ldr	r2, [sp, #28]
 80095c4:	4654      	mov	r4, sl
 80095c6:	2000      	movs	r0, #0
 80095c8:	f04f 0c0a 	mov.w	ip, #10
 80095cc:	4621      	mov	r1, r4
 80095ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095d2:	3b30      	subs	r3, #48	; 0x30
 80095d4:	2b09      	cmp	r3, #9
 80095d6:	d94e      	bls.n	8009676 <_svfiprintf_r+0x17e>
 80095d8:	b1b0      	cbz	r0, 8009608 <_svfiprintf_r+0x110>
 80095da:	9207      	str	r2, [sp, #28]
 80095dc:	e014      	b.n	8009608 <_svfiprintf_r+0x110>
 80095de:	eba0 0308 	sub.w	r3, r0, r8
 80095e2:	fa09 f303 	lsl.w	r3, r9, r3
 80095e6:	4313      	orrs	r3, r2
 80095e8:	9304      	str	r3, [sp, #16]
 80095ea:	46a2      	mov	sl, r4
 80095ec:	e7d2      	b.n	8009594 <_svfiprintf_r+0x9c>
 80095ee:	9b03      	ldr	r3, [sp, #12]
 80095f0:	1d19      	adds	r1, r3, #4
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	9103      	str	r1, [sp, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bfbb      	ittet	lt
 80095fa:	425b      	neglt	r3, r3
 80095fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009600:	9307      	strge	r3, [sp, #28]
 8009602:	9307      	strlt	r3, [sp, #28]
 8009604:	bfb8      	it	lt
 8009606:	9204      	strlt	r2, [sp, #16]
 8009608:	7823      	ldrb	r3, [r4, #0]
 800960a:	2b2e      	cmp	r3, #46	; 0x2e
 800960c:	d10c      	bne.n	8009628 <_svfiprintf_r+0x130>
 800960e:	7863      	ldrb	r3, [r4, #1]
 8009610:	2b2a      	cmp	r3, #42	; 0x2a
 8009612:	d135      	bne.n	8009680 <_svfiprintf_r+0x188>
 8009614:	9b03      	ldr	r3, [sp, #12]
 8009616:	1d1a      	adds	r2, r3, #4
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	9203      	str	r2, [sp, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	bfb8      	it	lt
 8009620:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009624:	3402      	adds	r4, #2
 8009626:	9305      	str	r3, [sp, #20]
 8009628:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096f4 <_svfiprintf_r+0x1fc>
 800962c:	7821      	ldrb	r1, [r4, #0]
 800962e:	2203      	movs	r2, #3
 8009630:	4650      	mov	r0, sl
 8009632:	f7f6 fdcd 	bl	80001d0 <memchr>
 8009636:	b140      	cbz	r0, 800964a <_svfiprintf_r+0x152>
 8009638:	2340      	movs	r3, #64	; 0x40
 800963a:	eba0 000a 	sub.w	r0, r0, sl
 800963e:	fa03 f000 	lsl.w	r0, r3, r0
 8009642:	9b04      	ldr	r3, [sp, #16]
 8009644:	4303      	orrs	r3, r0
 8009646:	3401      	adds	r4, #1
 8009648:	9304      	str	r3, [sp, #16]
 800964a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800964e:	4826      	ldr	r0, [pc, #152]	; (80096e8 <_svfiprintf_r+0x1f0>)
 8009650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009654:	2206      	movs	r2, #6
 8009656:	f7f6 fdbb 	bl	80001d0 <memchr>
 800965a:	2800      	cmp	r0, #0
 800965c:	d038      	beq.n	80096d0 <_svfiprintf_r+0x1d8>
 800965e:	4b23      	ldr	r3, [pc, #140]	; (80096ec <_svfiprintf_r+0x1f4>)
 8009660:	bb1b      	cbnz	r3, 80096aa <_svfiprintf_r+0x1b2>
 8009662:	9b03      	ldr	r3, [sp, #12]
 8009664:	3307      	adds	r3, #7
 8009666:	f023 0307 	bic.w	r3, r3, #7
 800966a:	3308      	adds	r3, #8
 800966c:	9303      	str	r3, [sp, #12]
 800966e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009670:	4433      	add	r3, r6
 8009672:	9309      	str	r3, [sp, #36]	; 0x24
 8009674:	e767      	b.n	8009546 <_svfiprintf_r+0x4e>
 8009676:	fb0c 3202 	mla	r2, ip, r2, r3
 800967a:	460c      	mov	r4, r1
 800967c:	2001      	movs	r0, #1
 800967e:	e7a5      	b.n	80095cc <_svfiprintf_r+0xd4>
 8009680:	2300      	movs	r3, #0
 8009682:	3401      	adds	r4, #1
 8009684:	9305      	str	r3, [sp, #20]
 8009686:	4619      	mov	r1, r3
 8009688:	f04f 0c0a 	mov.w	ip, #10
 800968c:	4620      	mov	r0, r4
 800968e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009692:	3a30      	subs	r2, #48	; 0x30
 8009694:	2a09      	cmp	r2, #9
 8009696:	d903      	bls.n	80096a0 <_svfiprintf_r+0x1a8>
 8009698:	2b00      	cmp	r3, #0
 800969a:	d0c5      	beq.n	8009628 <_svfiprintf_r+0x130>
 800969c:	9105      	str	r1, [sp, #20]
 800969e:	e7c3      	b.n	8009628 <_svfiprintf_r+0x130>
 80096a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80096a4:	4604      	mov	r4, r0
 80096a6:	2301      	movs	r3, #1
 80096a8:	e7f0      	b.n	800968c <_svfiprintf_r+0x194>
 80096aa:	ab03      	add	r3, sp, #12
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	462a      	mov	r2, r5
 80096b0:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <_svfiprintf_r+0x1f8>)
 80096b2:	a904      	add	r1, sp, #16
 80096b4:	4638      	mov	r0, r7
 80096b6:	f3af 8000 	nop.w
 80096ba:	1c42      	adds	r2, r0, #1
 80096bc:	4606      	mov	r6, r0
 80096be:	d1d6      	bne.n	800966e <_svfiprintf_r+0x176>
 80096c0:	89ab      	ldrh	r3, [r5, #12]
 80096c2:	065b      	lsls	r3, r3, #25
 80096c4:	f53f af2c 	bmi.w	8009520 <_svfiprintf_r+0x28>
 80096c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ca:	b01d      	add	sp, #116	; 0x74
 80096cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d0:	ab03      	add	r3, sp, #12
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	462a      	mov	r2, r5
 80096d6:	4b06      	ldr	r3, [pc, #24]	; (80096f0 <_svfiprintf_r+0x1f8>)
 80096d8:	a904      	add	r1, sp, #16
 80096da:	4638      	mov	r0, r7
 80096dc:	f000 f87a 	bl	80097d4 <_printf_i>
 80096e0:	e7eb      	b.n	80096ba <_svfiprintf_r+0x1c2>
 80096e2:	bf00      	nop
 80096e4:	08009e29 	.word	0x08009e29
 80096e8:	08009e33 	.word	0x08009e33
 80096ec:	00000000 	.word	0x00000000
 80096f0:	08009441 	.word	0x08009441
 80096f4:	08009e2f 	.word	0x08009e2f

080096f8 <_printf_common>:
 80096f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fc:	4616      	mov	r6, r2
 80096fe:	4699      	mov	r9, r3
 8009700:	688a      	ldr	r2, [r1, #8]
 8009702:	690b      	ldr	r3, [r1, #16]
 8009704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009708:	4293      	cmp	r3, r2
 800970a:	bfb8      	it	lt
 800970c:	4613      	movlt	r3, r2
 800970e:	6033      	str	r3, [r6, #0]
 8009710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009714:	4607      	mov	r7, r0
 8009716:	460c      	mov	r4, r1
 8009718:	b10a      	cbz	r2, 800971e <_printf_common+0x26>
 800971a:	3301      	adds	r3, #1
 800971c:	6033      	str	r3, [r6, #0]
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	0699      	lsls	r1, r3, #26
 8009722:	bf42      	ittt	mi
 8009724:	6833      	ldrmi	r3, [r6, #0]
 8009726:	3302      	addmi	r3, #2
 8009728:	6033      	strmi	r3, [r6, #0]
 800972a:	6825      	ldr	r5, [r4, #0]
 800972c:	f015 0506 	ands.w	r5, r5, #6
 8009730:	d106      	bne.n	8009740 <_printf_common+0x48>
 8009732:	f104 0a19 	add.w	sl, r4, #25
 8009736:	68e3      	ldr	r3, [r4, #12]
 8009738:	6832      	ldr	r2, [r6, #0]
 800973a:	1a9b      	subs	r3, r3, r2
 800973c:	42ab      	cmp	r3, r5
 800973e:	dc26      	bgt.n	800978e <_printf_common+0x96>
 8009740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009744:	1e13      	subs	r3, r2, #0
 8009746:	6822      	ldr	r2, [r4, #0]
 8009748:	bf18      	it	ne
 800974a:	2301      	movne	r3, #1
 800974c:	0692      	lsls	r2, r2, #26
 800974e:	d42b      	bmi.n	80097a8 <_printf_common+0xb0>
 8009750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009754:	4649      	mov	r1, r9
 8009756:	4638      	mov	r0, r7
 8009758:	47c0      	blx	r8
 800975a:	3001      	adds	r0, #1
 800975c:	d01e      	beq.n	800979c <_printf_common+0xa4>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	68e5      	ldr	r5, [r4, #12]
 8009762:	6832      	ldr	r2, [r6, #0]
 8009764:	f003 0306 	and.w	r3, r3, #6
 8009768:	2b04      	cmp	r3, #4
 800976a:	bf08      	it	eq
 800976c:	1aad      	subeq	r5, r5, r2
 800976e:	68a3      	ldr	r3, [r4, #8]
 8009770:	6922      	ldr	r2, [r4, #16]
 8009772:	bf0c      	ite	eq
 8009774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009778:	2500      	movne	r5, #0
 800977a:	4293      	cmp	r3, r2
 800977c:	bfc4      	itt	gt
 800977e:	1a9b      	subgt	r3, r3, r2
 8009780:	18ed      	addgt	r5, r5, r3
 8009782:	2600      	movs	r6, #0
 8009784:	341a      	adds	r4, #26
 8009786:	42b5      	cmp	r5, r6
 8009788:	d11a      	bne.n	80097c0 <_printf_common+0xc8>
 800978a:	2000      	movs	r0, #0
 800978c:	e008      	b.n	80097a0 <_printf_common+0xa8>
 800978e:	2301      	movs	r3, #1
 8009790:	4652      	mov	r2, sl
 8009792:	4649      	mov	r1, r9
 8009794:	4638      	mov	r0, r7
 8009796:	47c0      	blx	r8
 8009798:	3001      	adds	r0, #1
 800979a:	d103      	bne.n	80097a4 <_printf_common+0xac>
 800979c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a4:	3501      	adds	r5, #1
 80097a6:	e7c6      	b.n	8009736 <_printf_common+0x3e>
 80097a8:	18e1      	adds	r1, r4, r3
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	2030      	movs	r0, #48	; 0x30
 80097ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097b2:	4422      	add	r2, r4
 80097b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097bc:	3302      	adds	r3, #2
 80097be:	e7c7      	b.n	8009750 <_printf_common+0x58>
 80097c0:	2301      	movs	r3, #1
 80097c2:	4622      	mov	r2, r4
 80097c4:	4649      	mov	r1, r9
 80097c6:	4638      	mov	r0, r7
 80097c8:	47c0      	blx	r8
 80097ca:	3001      	adds	r0, #1
 80097cc:	d0e6      	beq.n	800979c <_printf_common+0xa4>
 80097ce:	3601      	adds	r6, #1
 80097d0:	e7d9      	b.n	8009786 <_printf_common+0x8e>
	...

080097d4 <_printf_i>:
 80097d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097d8:	460c      	mov	r4, r1
 80097da:	4691      	mov	r9, r2
 80097dc:	7e27      	ldrb	r7, [r4, #24]
 80097de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80097e0:	2f78      	cmp	r7, #120	; 0x78
 80097e2:	4680      	mov	r8, r0
 80097e4:	469a      	mov	sl, r3
 80097e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097ea:	d807      	bhi.n	80097fc <_printf_i+0x28>
 80097ec:	2f62      	cmp	r7, #98	; 0x62
 80097ee:	d80a      	bhi.n	8009806 <_printf_i+0x32>
 80097f0:	2f00      	cmp	r7, #0
 80097f2:	f000 80d8 	beq.w	80099a6 <_printf_i+0x1d2>
 80097f6:	2f58      	cmp	r7, #88	; 0x58
 80097f8:	f000 80a3 	beq.w	8009942 <_printf_i+0x16e>
 80097fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009804:	e03a      	b.n	800987c <_printf_i+0xa8>
 8009806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800980a:	2b15      	cmp	r3, #21
 800980c:	d8f6      	bhi.n	80097fc <_printf_i+0x28>
 800980e:	a001      	add	r0, pc, #4	; (adr r0, 8009814 <_printf_i+0x40>)
 8009810:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009814:	0800986d 	.word	0x0800986d
 8009818:	08009881 	.word	0x08009881
 800981c:	080097fd 	.word	0x080097fd
 8009820:	080097fd 	.word	0x080097fd
 8009824:	080097fd 	.word	0x080097fd
 8009828:	080097fd 	.word	0x080097fd
 800982c:	08009881 	.word	0x08009881
 8009830:	080097fd 	.word	0x080097fd
 8009834:	080097fd 	.word	0x080097fd
 8009838:	080097fd 	.word	0x080097fd
 800983c:	080097fd 	.word	0x080097fd
 8009840:	0800998d 	.word	0x0800998d
 8009844:	080098b1 	.word	0x080098b1
 8009848:	0800996f 	.word	0x0800996f
 800984c:	080097fd 	.word	0x080097fd
 8009850:	080097fd 	.word	0x080097fd
 8009854:	080099af 	.word	0x080099af
 8009858:	080097fd 	.word	0x080097fd
 800985c:	080098b1 	.word	0x080098b1
 8009860:	080097fd 	.word	0x080097fd
 8009864:	080097fd 	.word	0x080097fd
 8009868:	08009977 	.word	0x08009977
 800986c:	680b      	ldr	r3, [r1, #0]
 800986e:	1d1a      	adds	r2, r3, #4
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	600a      	str	r2, [r1, #0]
 8009874:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800987c:	2301      	movs	r3, #1
 800987e:	e0a3      	b.n	80099c8 <_printf_i+0x1f4>
 8009880:	6825      	ldr	r5, [r4, #0]
 8009882:	6808      	ldr	r0, [r1, #0]
 8009884:	062e      	lsls	r6, r5, #24
 8009886:	f100 0304 	add.w	r3, r0, #4
 800988a:	d50a      	bpl.n	80098a2 <_printf_i+0xce>
 800988c:	6805      	ldr	r5, [r0, #0]
 800988e:	600b      	str	r3, [r1, #0]
 8009890:	2d00      	cmp	r5, #0
 8009892:	da03      	bge.n	800989c <_printf_i+0xc8>
 8009894:	232d      	movs	r3, #45	; 0x2d
 8009896:	426d      	negs	r5, r5
 8009898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800989c:	485e      	ldr	r0, [pc, #376]	; (8009a18 <_printf_i+0x244>)
 800989e:	230a      	movs	r3, #10
 80098a0:	e019      	b.n	80098d6 <_printf_i+0x102>
 80098a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80098a6:	6805      	ldr	r5, [r0, #0]
 80098a8:	600b      	str	r3, [r1, #0]
 80098aa:	bf18      	it	ne
 80098ac:	b22d      	sxthne	r5, r5
 80098ae:	e7ef      	b.n	8009890 <_printf_i+0xbc>
 80098b0:	680b      	ldr	r3, [r1, #0]
 80098b2:	6825      	ldr	r5, [r4, #0]
 80098b4:	1d18      	adds	r0, r3, #4
 80098b6:	6008      	str	r0, [r1, #0]
 80098b8:	0628      	lsls	r0, r5, #24
 80098ba:	d501      	bpl.n	80098c0 <_printf_i+0xec>
 80098bc:	681d      	ldr	r5, [r3, #0]
 80098be:	e002      	b.n	80098c6 <_printf_i+0xf2>
 80098c0:	0669      	lsls	r1, r5, #25
 80098c2:	d5fb      	bpl.n	80098bc <_printf_i+0xe8>
 80098c4:	881d      	ldrh	r5, [r3, #0]
 80098c6:	4854      	ldr	r0, [pc, #336]	; (8009a18 <_printf_i+0x244>)
 80098c8:	2f6f      	cmp	r7, #111	; 0x6f
 80098ca:	bf0c      	ite	eq
 80098cc:	2308      	moveq	r3, #8
 80098ce:	230a      	movne	r3, #10
 80098d0:	2100      	movs	r1, #0
 80098d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098d6:	6866      	ldr	r6, [r4, #4]
 80098d8:	60a6      	str	r6, [r4, #8]
 80098da:	2e00      	cmp	r6, #0
 80098dc:	bfa2      	ittt	ge
 80098de:	6821      	ldrge	r1, [r4, #0]
 80098e0:	f021 0104 	bicge.w	r1, r1, #4
 80098e4:	6021      	strge	r1, [r4, #0]
 80098e6:	b90d      	cbnz	r5, 80098ec <_printf_i+0x118>
 80098e8:	2e00      	cmp	r6, #0
 80098ea:	d04d      	beq.n	8009988 <_printf_i+0x1b4>
 80098ec:	4616      	mov	r6, r2
 80098ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80098f2:	fb03 5711 	mls	r7, r3, r1, r5
 80098f6:	5dc7      	ldrb	r7, [r0, r7]
 80098f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098fc:	462f      	mov	r7, r5
 80098fe:	42bb      	cmp	r3, r7
 8009900:	460d      	mov	r5, r1
 8009902:	d9f4      	bls.n	80098ee <_printf_i+0x11a>
 8009904:	2b08      	cmp	r3, #8
 8009906:	d10b      	bne.n	8009920 <_printf_i+0x14c>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	07df      	lsls	r7, r3, #31
 800990c:	d508      	bpl.n	8009920 <_printf_i+0x14c>
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	6861      	ldr	r1, [r4, #4]
 8009912:	4299      	cmp	r1, r3
 8009914:	bfde      	ittt	le
 8009916:	2330      	movle	r3, #48	; 0x30
 8009918:	f806 3c01 	strble.w	r3, [r6, #-1]
 800991c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009920:	1b92      	subs	r2, r2, r6
 8009922:	6122      	str	r2, [r4, #16]
 8009924:	f8cd a000 	str.w	sl, [sp]
 8009928:	464b      	mov	r3, r9
 800992a:	aa03      	add	r2, sp, #12
 800992c:	4621      	mov	r1, r4
 800992e:	4640      	mov	r0, r8
 8009930:	f7ff fee2 	bl	80096f8 <_printf_common>
 8009934:	3001      	adds	r0, #1
 8009936:	d14c      	bne.n	80099d2 <_printf_i+0x1fe>
 8009938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800993c:	b004      	add	sp, #16
 800993e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009942:	4835      	ldr	r0, [pc, #212]	; (8009a18 <_printf_i+0x244>)
 8009944:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	680e      	ldr	r6, [r1, #0]
 800994c:	061f      	lsls	r7, r3, #24
 800994e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009952:	600e      	str	r6, [r1, #0]
 8009954:	d514      	bpl.n	8009980 <_printf_i+0x1ac>
 8009956:	07d9      	lsls	r1, r3, #31
 8009958:	bf44      	itt	mi
 800995a:	f043 0320 	orrmi.w	r3, r3, #32
 800995e:	6023      	strmi	r3, [r4, #0]
 8009960:	b91d      	cbnz	r5, 800996a <_printf_i+0x196>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	f023 0320 	bic.w	r3, r3, #32
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	2310      	movs	r3, #16
 800996c:	e7b0      	b.n	80098d0 <_printf_i+0xfc>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	f043 0320 	orr.w	r3, r3, #32
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	2378      	movs	r3, #120	; 0x78
 8009978:	4828      	ldr	r0, [pc, #160]	; (8009a1c <_printf_i+0x248>)
 800997a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800997e:	e7e3      	b.n	8009948 <_printf_i+0x174>
 8009980:	065e      	lsls	r6, r3, #25
 8009982:	bf48      	it	mi
 8009984:	b2ad      	uxthmi	r5, r5
 8009986:	e7e6      	b.n	8009956 <_printf_i+0x182>
 8009988:	4616      	mov	r6, r2
 800998a:	e7bb      	b.n	8009904 <_printf_i+0x130>
 800998c:	680b      	ldr	r3, [r1, #0]
 800998e:	6826      	ldr	r6, [r4, #0]
 8009990:	6960      	ldr	r0, [r4, #20]
 8009992:	1d1d      	adds	r5, r3, #4
 8009994:	600d      	str	r5, [r1, #0]
 8009996:	0635      	lsls	r5, r6, #24
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	d501      	bpl.n	80099a0 <_printf_i+0x1cc>
 800999c:	6018      	str	r0, [r3, #0]
 800999e:	e002      	b.n	80099a6 <_printf_i+0x1d2>
 80099a0:	0671      	lsls	r1, r6, #25
 80099a2:	d5fb      	bpl.n	800999c <_printf_i+0x1c8>
 80099a4:	8018      	strh	r0, [r3, #0]
 80099a6:	2300      	movs	r3, #0
 80099a8:	6123      	str	r3, [r4, #16]
 80099aa:	4616      	mov	r6, r2
 80099ac:	e7ba      	b.n	8009924 <_printf_i+0x150>
 80099ae:	680b      	ldr	r3, [r1, #0]
 80099b0:	1d1a      	adds	r2, r3, #4
 80099b2:	600a      	str	r2, [r1, #0]
 80099b4:	681e      	ldr	r6, [r3, #0]
 80099b6:	6862      	ldr	r2, [r4, #4]
 80099b8:	2100      	movs	r1, #0
 80099ba:	4630      	mov	r0, r6
 80099bc:	f7f6 fc08 	bl	80001d0 <memchr>
 80099c0:	b108      	cbz	r0, 80099c6 <_printf_i+0x1f2>
 80099c2:	1b80      	subs	r0, r0, r6
 80099c4:	6060      	str	r0, [r4, #4]
 80099c6:	6863      	ldr	r3, [r4, #4]
 80099c8:	6123      	str	r3, [r4, #16]
 80099ca:	2300      	movs	r3, #0
 80099cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d0:	e7a8      	b.n	8009924 <_printf_i+0x150>
 80099d2:	6923      	ldr	r3, [r4, #16]
 80099d4:	4632      	mov	r2, r6
 80099d6:	4649      	mov	r1, r9
 80099d8:	4640      	mov	r0, r8
 80099da:	47d0      	blx	sl
 80099dc:	3001      	adds	r0, #1
 80099de:	d0ab      	beq.n	8009938 <_printf_i+0x164>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	079b      	lsls	r3, r3, #30
 80099e4:	d413      	bmi.n	8009a0e <_printf_i+0x23a>
 80099e6:	68e0      	ldr	r0, [r4, #12]
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	4298      	cmp	r0, r3
 80099ec:	bfb8      	it	lt
 80099ee:	4618      	movlt	r0, r3
 80099f0:	e7a4      	b.n	800993c <_printf_i+0x168>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4632      	mov	r2, r6
 80099f6:	4649      	mov	r1, r9
 80099f8:	4640      	mov	r0, r8
 80099fa:	47d0      	blx	sl
 80099fc:	3001      	adds	r0, #1
 80099fe:	d09b      	beq.n	8009938 <_printf_i+0x164>
 8009a00:	3501      	adds	r5, #1
 8009a02:	68e3      	ldr	r3, [r4, #12]
 8009a04:	9903      	ldr	r1, [sp, #12]
 8009a06:	1a5b      	subs	r3, r3, r1
 8009a08:	42ab      	cmp	r3, r5
 8009a0a:	dcf2      	bgt.n	80099f2 <_printf_i+0x21e>
 8009a0c:	e7eb      	b.n	80099e6 <_printf_i+0x212>
 8009a0e:	2500      	movs	r5, #0
 8009a10:	f104 0619 	add.w	r6, r4, #25
 8009a14:	e7f5      	b.n	8009a02 <_printf_i+0x22e>
 8009a16:	bf00      	nop
 8009a18:	08009e3a 	.word	0x08009e3a
 8009a1c:	08009e4b 	.word	0x08009e4b

08009a20 <memmove>:
 8009a20:	4288      	cmp	r0, r1
 8009a22:	b510      	push	{r4, lr}
 8009a24:	eb01 0402 	add.w	r4, r1, r2
 8009a28:	d902      	bls.n	8009a30 <memmove+0x10>
 8009a2a:	4284      	cmp	r4, r0
 8009a2c:	4623      	mov	r3, r4
 8009a2e:	d807      	bhi.n	8009a40 <memmove+0x20>
 8009a30:	1e43      	subs	r3, r0, #1
 8009a32:	42a1      	cmp	r1, r4
 8009a34:	d008      	beq.n	8009a48 <memmove+0x28>
 8009a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a3e:	e7f8      	b.n	8009a32 <memmove+0x12>
 8009a40:	4402      	add	r2, r0
 8009a42:	4601      	mov	r1, r0
 8009a44:	428a      	cmp	r2, r1
 8009a46:	d100      	bne.n	8009a4a <memmove+0x2a>
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a52:	e7f7      	b.n	8009a44 <memmove+0x24>

08009a54 <_free_r>:
 8009a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a56:	2900      	cmp	r1, #0
 8009a58:	d048      	beq.n	8009aec <_free_r+0x98>
 8009a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a5e:	9001      	str	r0, [sp, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f1a1 0404 	sub.w	r4, r1, #4
 8009a66:	bfb8      	it	lt
 8009a68:	18e4      	addlt	r4, r4, r3
 8009a6a:	f000 f8d3 	bl	8009c14 <__malloc_lock>
 8009a6e:	4a20      	ldr	r2, [pc, #128]	; (8009af0 <_free_r+0x9c>)
 8009a70:	9801      	ldr	r0, [sp, #4]
 8009a72:	6813      	ldr	r3, [r2, #0]
 8009a74:	4615      	mov	r5, r2
 8009a76:	b933      	cbnz	r3, 8009a86 <_free_r+0x32>
 8009a78:	6063      	str	r3, [r4, #4]
 8009a7a:	6014      	str	r4, [r2, #0]
 8009a7c:	b003      	add	sp, #12
 8009a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a82:	f000 b8cd 	b.w	8009c20 <__malloc_unlock>
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	d90b      	bls.n	8009aa2 <_free_r+0x4e>
 8009a8a:	6821      	ldr	r1, [r4, #0]
 8009a8c:	1862      	adds	r2, r4, r1
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	bf04      	itt	eq
 8009a92:	681a      	ldreq	r2, [r3, #0]
 8009a94:	685b      	ldreq	r3, [r3, #4]
 8009a96:	6063      	str	r3, [r4, #4]
 8009a98:	bf04      	itt	eq
 8009a9a:	1852      	addeq	r2, r2, r1
 8009a9c:	6022      	streq	r2, [r4, #0]
 8009a9e:	602c      	str	r4, [r5, #0]
 8009aa0:	e7ec      	b.n	8009a7c <_free_r+0x28>
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	b10b      	cbz	r3, 8009aac <_free_r+0x58>
 8009aa8:	42a3      	cmp	r3, r4
 8009aaa:	d9fa      	bls.n	8009aa2 <_free_r+0x4e>
 8009aac:	6811      	ldr	r1, [r2, #0]
 8009aae:	1855      	adds	r5, r2, r1
 8009ab0:	42a5      	cmp	r5, r4
 8009ab2:	d10b      	bne.n	8009acc <_free_r+0x78>
 8009ab4:	6824      	ldr	r4, [r4, #0]
 8009ab6:	4421      	add	r1, r4
 8009ab8:	1854      	adds	r4, r2, r1
 8009aba:	42a3      	cmp	r3, r4
 8009abc:	6011      	str	r1, [r2, #0]
 8009abe:	d1dd      	bne.n	8009a7c <_free_r+0x28>
 8009ac0:	681c      	ldr	r4, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	6053      	str	r3, [r2, #4]
 8009ac6:	4421      	add	r1, r4
 8009ac8:	6011      	str	r1, [r2, #0]
 8009aca:	e7d7      	b.n	8009a7c <_free_r+0x28>
 8009acc:	d902      	bls.n	8009ad4 <_free_r+0x80>
 8009ace:	230c      	movs	r3, #12
 8009ad0:	6003      	str	r3, [r0, #0]
 8009ad2:	e7d3      	b.n	8009a7c <_free_r+0x28>
 8009ad4:	6825      	ldr	r5, [r4, #0]
 8009ad6:	1961      	adds	r1, r4, r5
 8009ad8:	428b      	cmp	r3, r1
 8009ada:	bf04      	itt	eq
 8009adc:	6819      	ldreq	r1, [r3, #0]
 8009ade:	685b      	ldreq	r3, [r3, #4]
 8009ae0:	6063      	str	r3, [r4, #4]
 8009ae2:	bf04      	itt	eq
 8009ae4:	1949      	addeq	r1, r1, r5
 8009ae6:	6021      	streq	r1, [r4, #0]
 8009ae8:	6054      	str	r4, [r2, #4]
 8009aea:	e7c7      	b.n	8009a7c <_free_r+0x28>
 8009aec:	b003      	add	sp, #12
 8009aee:	bd30      	pop	{r4, r5, pc}
 8009af0:	20002448 	.word	0x20002448

08009af4 <_malloc_r>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	1ccd      	adds	r5, r1, #3
 8009af8:	f025 0503 	bic.w	r5, r5, #3
 8009afc:	3508      	adds	r5, #8
 8009afe:	2d0c      	cmp	r5, #12
 8009b00:	bf38      	it	cc
 8009b02:	250c      	movcc	r5, #12
 8009b04:	2d00      	cmp	r5, #0
 8009b06:	4606      	mov	r6, r0
 8009b08:	db01      	blt.n	8009b0e <_malloc_r+0x1a>
 8009b0a:	42a9      	cmp	r1, r5
 8009b0c:	d903      	bls.n	8009b16 <_malloc_r+0x22>
 8009b0e:	230c      	movs	r3, #12
 8009b10:	6033      	str	r3, [r6, #0]
 8009b12:	2000      	movs	r0, #0
 8009b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b16:	f000 f87d 	bl	8009c14 <__malloc_lock>
 8009b1a:	4921      	ldr	r1, [pc, #132]	; (8009ba0 <_malloc_r+0xac>)
 8009b1c:	680a      	ldr	r2, [r1, #0]
 8009b1e:	4614      	mov	r4, r2
 8009b20:	b99c      	cbnz	r4, 8009b4a <_malloc_r+0x56>
 8009b22:	4f20      	ldr	r7, [pc, #128]	; (8009ba4 <_malloc_r+0xb0>)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	b923      	cbnz	r3, 8009b32 <_malloc_r+0x3e>
 8009b28:	4621      	mov	r1, r4
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f000 f862 	bl	8009bf4 <_sbrk_r>
 8009b30:	6038      	str	r0, [r7, #0]
 8009b32:	4629      	mov	r1, r5
 8009b34:	4630      	mov	r0, r6
 8009b36:	f000 f85d 	bl	8009bf4 <_sbrk_r>
 8009b3a:	1c43      	adds	r3, r0, #1
 8009b3c:	d123      	bne.n	8009b86 <_malloc_r+0x92>
 8009b3e:	230c      	movs	r3, #12
 8009b40:	6033      	str	r3, [r6, #0]
 8009b42:	4630      	mov	r0, r6
 8009b44:	f000 f86c 	bl	8009c20 <__malloc_unlock>
 8009b48:	e7e3      	b.n	8009b12 <_malloc_r+0x1e>
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	1b5b      	subs	r3, r3, r5
 8009b4e:	d417      	bmi.n	8009b80 <_malloc_r+0x8c>
 8009b50:	2b0b      	cmp	r3, #11
 8009b52:	d903      	bls.n	8009b5c <_malloc_r+0x68>
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	441c      	add	r4, r3
 8009b58:	6025      	str	r5, [r4, #0]
 8009b5a:	e004      	b.n	8009b66 <_malloc_r+0x72>
 8009b5c:	6863      	ldr	r3, [r4, #4]
 8009b5e:	42a2      	cmp	r2, r4
 8009b60:	bf0c      	ite	eq
 8009b62:	600b      	streq	r3, [r1, #0]
 8009b64:	6053      	strne	r3, [r2, #4]
 8009b66:	4630      	mov	r0, r6
 8009b68:	f000 f85a 	bl	8009c20 <__malloc_unlock>
 8009b6c:	f104 000b 	add.w	r0, r4, #11
 8009b70:	1d23      	adds	r3, r4, #4
 8009b72:	f020 0007 	bic.w	r0, r0, #7
 8009b76:	1ac2      	subs	r2, r0, r3
 8009b78:	d0cc      	beq.n	8009b14 <_malloc_r+0x20>
 8009b7a:	1a1b      	subs	r3, r3, r0
 8009b7c:	50a3      	str	r3, [r4, r2]
 8009b7e:	e7c9      	b.n	8009b14 <_malloc_r+0x20>
 8009b80:	4622      	mov	r2, r4
 8009b82:	6864      	ldr	r4, [r4, #4]
 8009b84:	e7cc      	b.n	8009b20 <_malloc_r+0x2c>
 8009b86:	1cc4      	adds	r4, r0, #3
 8009b88:	f024 0403 	bic.w	r4, r4, #3
 8009b8c:	42a0      	cmp	r0, r4
 8009b8e:	d0e3      	beq.n	8009b58 <_malloc_r+0x64>
 8009b90:	1a21      	subs	r1, r4, r0
 8009b92:	4630      	mov	r0, r6
 8009b94:	f000 f82e 	bl	8009bf4 <_sbrk_r>
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d1dd      	bne.n	8009b58 <_malloc_r+0x64>
 8009b9c:	e7cf      	b.n	8009b3e <_malloc_r+0x4a>
 8009b9e:	bf00      	nop
 8009ba0:	20002448 	.word	0x20002448
 8009ba4:	2000244c 	.word	0x2000244c

08009ba8 <_realloc_r>:
 8009ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009baa:	4607      	mov	r7, r0
 8009bac:	4614      	mov	r4, r2
 8009bae:	460e      	mov	r6, r1
 8009bb0:	b921      	cbnz	r1, 8009bbc <_realloc_r+0x14>
 8009bb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	f7ff bf9c 	b.w	8009af4 <_malloc_r>
 8009bbc:	b922      	cbnz	r2, 8009bc8 <_realloc_r+0x20>
 8009bbe:	f7ff ff49 	bl	8009a54 <_free_r>
 8009bc2:	4625      	mov	r5, r4
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc8:	f000 f830 	bl	8009c2c <_malloc_usable_size_r>
 8009bcc:	42a0      	cmp	r0, r4
 8009bce:	d20f      	bcs.n	8009bf0 <_realloc_r+0x48>
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	f7ff ff8e 	bl	8009af4 <_malloc_r>
 8009bd8:	4605      	mov	r5, r0
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d0f2      	beq.n	8009bc4 <_realloc_r+0x1c>
 8009bde:	4631      	mov	r1, r6
 8009be0:	4622      	mov	r2, r4
 8009be2:	f7ff fb69 	bl	80092b8 <memcpy>
 8009be6:	4631      	mov	r1, r6
 8009be8:	4638      	mov	r0, r7
 8009bea:	f7ff ff33 	bl	8009a54 <_free_r>
 8009bee:	e7e9      	b.n	8009bc4 <_realloc_r+0x1c>
 8009bf0:	4635      	mov	r5, r6
 8009bf2:	e7e7      	b.n	8009bc4 <_realloc_r+0x1c>

08009bf4 <_sbrk_r>:
 8009bf4:	b538      	push	{r3, r4, r5, lr}
 8009bf6:	4d06      	ldr	r5, [pc, #24]	; (8009c10 <_sbrk_r+0x1c>)
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	4608      	mov	r0, r1
 8009bfe:	602b      	str	r3, [r5, #0]
 8009c00:	f7f8 f846 	bl	8001c90 <_sbrk>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d102      	bne.n	8009c0e <_sbrk_r+0x1a>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	b103      	cbz	r3, 8009c0e <_sbrk_r+0x1a>
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	20002620 	.word	0x20002620

08009c14 <__malloc_lock>:
 8009c14:	4801      	ldr	r0, [pc, #4]	; (8009c1c <__malloc_lock+0x8>)
 8009c16:	f000 b811 	b.w	8009c3c <__retarget_lock_acquire_recursive>
 8009c1a:	bf00      	nop
 8009c1c:	20002628 	.word	0x20002628

08009c20 <__malloc_unlock>:
 8009c20:	4801      	ldr	r0, [pc, #4]	; (8009c28 <__malloc_unlock+0x8>)
 8009c22:	f000 b80c 	b.w	8009c3e <__retarget_lock_release_recursive>
 8009c26:	bf00      	nop
 8009c28:	20002628 	.word	0x20002628

08009c2c <_malloc_usable_size_r>:
 8009c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c30:	1f18      	subs	r0, r3, #4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	bfbc      	itt	lt
 8009c36:	580b      	ldrlt	r3, [r1, r0]
 8009c38:	18c0      	addlt	r0, r0, r3
 8009c3a:	4770      	bx	lr

08009c3c <__retarget_lock_acquire_recursive>:
 8009c3c:	4770      	bx	lr

08009c3e <__retarget_lock_release_recursive>:
 8009c3e:	4770      	bx	lr

08009c40 <_init>:
 8009c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c42:	bf00      	nop
 8009c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c46:	bc08      	pop	{r3}
 8009c48:	469e      	mov	lr, r3
 8009c4a:	4770      	bx	lr

08009c4c <_fini>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	bf00      	nop
 8009c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c52:	bc08      	pop	{r3}
 8009c54:	469e      	mov	lr, r3
 8009c56:	4770      	bx	lr
